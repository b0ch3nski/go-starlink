// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.2
// source: spacex/api/device/wifi_util.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IfaceType int32

const (
	IfaceType_IFACE_TYPE_UNKNOWN      IfaceType = 0
	IfaceType_IFACE_TYPE_ETH          IfaceType = 1
	IfaceType_IFACE_TYPE_RF_2GHZ      IfaceType = 2
	IfaceType_IFACE_TYPE_RF_5GHZ      IfaceType = 5
	IfaceType_IFACE_TYPE_RF_5GHZ_HIGH IfaceType = 6
)

// Enum value maps for IfaceType.
var (
	IfaceType_name = map[int32]string{
		0: "IFACE_TYPE_UNKNOWN",
		1: "IFACE_TYPE_ETH",
		2: "IFACE_TYPE_RF_2GHZ",
		5: "IFACE_TYPE_RF_5GHZ",
		6: "IFACE_TYPE_RF_5GHZ_HIGH",
	}
	IfaceType_value = map[string]int32{
		"IFACE_TYPE_UNKNOWN":      0,
		"IFACE_TYPE_ETH":          1,
		"IFACE_TYPE_RF_2GHZ":      2,
		"IFACE_TYPE_RF_5GHZ":      5,
		"IFACE_TYPE_RF_5GHZ_HIGH": 6,
	}
)

func (x IfaceType) Enum() *IfaceType {
	p := new(IfaceType)
	*p = x
	return p
}

func (x IfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[0].Descriptor()
}

func (IfaceType) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[0]
}

func (x IfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfaceType.Descriptor instead.
func (IfaceType) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{0}
}

type TxPowerLevel int32

const (
	TxPowerLevel_TX_POWER_LEVEL_100 TxPowerLevel = 0
	TxPowerLevel_TX_POWER_LEVEL_80  TxPowerLevel = 1
	TxPowerLevel_TX_POWER_LEVEL_50  TxPowerLevel = 2
	TxPowerLevel_TX_POWER_LEVEL_25  TxPowerLevel = 3
	TxPowerLevel_TX_POWER_LEVEL_12  TxPowerLevel = 4
	TxPowerLevel_TX_POWER_LEVEL_6   TxPowerLevel = 5
)

// Enum value maps for TxPowerLevel.
var (
	TxPowerLevel_name = map[int32]string{
		0: "TX_POWER_LEVEL_100",
		1: "TX_POWER_LEVEL_80",
		2: "TX_POWER_LEVEL_50",
		3: "TX_POWER_LEVEL_25",
		4: "TX_POWER_LEVEL_12",
		5: "TX_POWER_LEVEL_6",
	}
	TxPowerLevel_value = map[string]int32{
		"TX_POWER_LEVEL_100": 0,
		"TX_POWER_LEVEL_80":  1,
		"TX_POWER_LEVEL_50":  2,
		"TX_POWER_LEVEL_25":  3,
		"TX_POWER_LEVEL_12":  4,
		"TX_POWER_LEVEL_6":   5,
	}
)

func (x TxPowerLevel) Enum() *TxPowerLevel {
	p := new(TxPowerLevel)
	*p = x
	return p
}

func (x TxPowerLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxPowerLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[1].Descriptor()
}

func (TxPowerLevel) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[1]
}

func (x TxPowerLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxPowerLevel.Descriptor instead.
func (TxPowerLevel) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{1}
}

type PoeState int32

const (
	PoeState_POE_STATE_DISABLED            PoeState = 0
	PoeState_POE_STATE_NEGOTIATING         PoeState = 1
	PoeState_POE_STATE_ON_RAMPUP           PoeState = 2
	PoeState_POE_STATE_ON                  PoeState = 3
	PoeState_POE_STATE_WATER_DETECT_RAMPUP PoeState = 4
	PoeState_POE_STATE_WATER_DETECT        PoeState = 5
)

// Enum value maps for PoeState.
var (
	PoeState_name = map[int32]string{
		0: "POE_STATE_DISABLED",
		1: "POE_STATE_NEGOTIATING",
		2: "POE_STATE_ON_RAMPUP",
		3: "POE_STATE_ON",
		4: "POE_STATE_WATER_DETECT_RAMPUP",
		5: "POE_STATE_WATER_DETECT",
	}
	PoeState_value = map[string]int32{
		"POE_STATE_DISABLED":            0,
		"POE_STATE_NEGOTIATING":         1,
		"POE_STATE_ON_RAMPUP":           2,
		"POE_STATE_ON":                  3,
		"POE_STATE_WATER_DETECT_RAMPUP": 4,
		"POE_STATE_WATER_DETECT":        5,
	}
)

func (x PoeState) Enum() *PoeState {
	p := new(PoeState)
	*p = x
	return p
}

func (x PoeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoeState) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[2].Descriptor()
}

func (PoeState) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[2]
}

func (x PoeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoeState.Descriptor instead.
func (PoeState) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{2}
}

type PoeFault int32

const (
	PoeFault_POE_FAULT_FAST_OVERCURRENT PoeFault = 0
	PoeFault_POE_FAULT_SLOW_OVERCURRENT PoeFault = 1
	PoeFault_POE_FAULT_UNDERCURRENT     PoeFault = 2
	PoeFault_POE_FAULT_OVERVOLTAGE      PoeFault = 3
	PoeFault_POE_FAULT_UNDERVOLTAGE     PoeFault = 4
)

// Enum value maps for PoeFault.
var (
	PoeFault_name = map[int32]string{
		0: "POE_FAULT_FAST_OVERCURRENT",
		1: "POE_FAULT_SLOW_OVERCURRENT",
		2: "POE_FAULT_UNDERCURRENT",
		3: "POE_FAULT_OVERVOLTAGE",
		4: "POE_FAULT_UNDERVOLTAGE",
	}
	PoeFault_value = map[string]int32{
		"POE_FAULT_FAST_OVERCURRENT": 0,
		"POE_FAULT_SLOW_OVERCURRENT": 1,
		"POE_FAULT_UNDERCURRENT":     2,
		"POE_FAULT_OVERVOLTAGE":      3,
		"POE_FAULT_UNDERVOLTAGE":     4,
	}
)

func (x PoeFault) Enum() *PoeFault {
	p := new(PoeFault)
	*p = x
	return p
}

func (x PoeFault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoeFault) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[3].Descriptor()
}

func (PoeFault) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[3]
}

func (x PoeFault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoeFault.Descriptor instead.
func (PoeFault) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{3}
}

type WifiMode int32

const (
	WifiMode_WIFI_MODE_DEFAULT WifiMode = 0
	WifiMode_A_ONLY            WifiMode = 1
	WifiMode_B_ONLY            WifiMode = 2
	WifiMode_G_ONLY            WifiMode = 3
	WifiMode_N_ONLY            WifiMode = 4
	WifiMode_B_G_MIXED         WifiMode = 5
	WifiMode_A_N_MIXED         WifiMode = 6
	WifiMode_G_N_MIXED         WifiMode = 7
	WifiMode_B_G_N_MIXED       WifiMode = 8
	WifiMode_A_AN_AC_MIXED     WifiMode = 9
	WifiMode_AN_AC_MIXED       WifiMode = 10
	WifiMode_B_G_N_AX_MIXED    WifiMode = 11
	WifiMode_A_AN_AC_AX_MIXED  WifiMode = 12
	WifiMode_A_N_AC_MIXED      WifiMode = 13
	WifiMode_A_N_AC_AX_MIXED   WifiMode = 14
)

// Enum value maps for WifiMode.
var (
	WifiMode_name = map[int32]string{
		0:  "WIFI_MODE_DEFAULT",
		1:  "A_ONLY",
		2:  "B_ONLY",
		3:  "G_ONLY",
		4:  "N_ONLY",
		5:  "B_G_MIXED",
		6:  "A_N_MIXED",
		7:  "G_N_MIXED",
		8:  "B_G_N_MIXED",
		9:  "A_AN_AC_MIXED",
		10: "AN_AC_MIXED",
		11: "B_G_N_AX_MIXED",
		12: "A_AN_AC_AX_MIXED",
		13: "A_N_AC_MIXED",
		14: "A_N_AC_AX_MIXED",
	}
	WifiMode_value = map[string]int32{
		"WIFI_MODE_DEFAULT": 0,
		"A_ONLY":            1,
		"B_ONLY":            2,
		"G_ONLY":            3,
		"N_ONLY":            4,
		"B_G_MIXED":         5,
		"A_N_MIXED":         6,
		"G_N_MIXED":         7,
		"B_G_N_MIXED":       8,
		"A_AN_AC_MIXED":     9,
		"AN_AC_MIXED":       10,
		"B_G_N_AX_MIXED":    11,
		"A_AN_AC_AX_MIXED":  12,
		"A_N_AC_MIXED":      13,
		"A_N_AC_AX_MIXED":   14,
	}
)

func (x WifiMode) Enum() *WifiMode {
	p := new(WifiMode)
	*p = x
	return p
}

func (x WifiMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[4].Descriptor()
}

func (WifiMode) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[4]
}

func (x WifiMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiMode.Descriptor instead.
func (WifiMode) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{4}
}

type WifiSecurity int32

const (
	WifiSecurity_WIFI_SECURITY_UNKNOWN WifiSecurity = 0
	WifiSecurity_OPEN                  WifiSecurity = 1
	WifiSecurity_WPA2                  WifiSecurity = 2
	WifiSecurity_WPA3                  WifiSecurity = 3
	WifiSecurity_WPA2WPA3              WifiSecurity = 4
)

// Enum value maps for WifiSecurity.
var (
	WifiSecurity_name = map[int32]string{
		0: "WIFI_SECURITY_UNKNOWN",
		1: "OPEN",
		2: "WPA2",
		3: "WPA3",
		4: "WPA2WPA3",
	}
	WifiSecurity_value = map[string]int32{
		"WIFI_SECURITY_UNKNOWN": 0,
		"OPEN":                  1,
		"WPA2":                  2,
		"WPA3":                  3,
		"WPA2WPA3":              4,
	}
)

func (x WifiSecurity) Enum() *WifiSecurity {
	p := new(WifiSecurity)
	*p = x
	return p
}

func (x WifiSecurity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiSecurity) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[5].Descriptor()
}

func (WifiSecurity) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[5]
}

func (x WifiSecurity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiSecurity.Descriptor instead.
func (WifiSecurity) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{5}
}

type Protocol int32

const (
	Protocol_TCP  Protocol = 0
	Protocol_UDP  Protocol = 1
	Protocol_TLS  Protocol = 2
	Protocol_DTLS Protocol = 3
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
		2: "TLS",
		3: "DTLS",
	}
	Protocol_value = map[string]int32{
		"TCP":  0,
		"UDP":  1,
		"TLS":  2,
		"DTLS": 3,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[6].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[6]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{6}
}

type WifiSoftwareUpdateState int32

const (
	WifiSoftwareUpdateState_NOT_RUN                            WifiSoftwareUpdateState = 0
	WifiSoftwareUpdateState_GETTING_TARGET_VERSION             WifiSoftwareUpdateState = 1
	WifiSoftwareUpdateState_DOWNLOADING_UPDATE_IMAGE           WifiSoftwareUpdateState = 2
	WifiSoftwareUpdateState_FLASHING                           WifiSoftwareUpdateState = 3
	WifiSoftwareUpdateState_NO_UPDATE_REQUIRED                 WifiSoftwareUpdateState = 4
	WifiSoftwareUpdateState_REBOOT_PENDING                     WifiSoftwareUpdateState = 5
	WifiSoftwareUpdateState_GETTING_TARGET_VERSION_FAILED      WifiSoftwareUpdateState = 6
	WifiSoftwareUpdateState_GETTING_TARGET_VERSION_EXHAUSTED   WifiSoftwareUpdateState = 7
	WifiSoftwareUpdateState_NO_VALID_ARTIFACT                  WifiSoftwareUpdateState = 8
	WifiSoftwareUpdateState_ILLEGAL_ARTIFACT                   WifiSoftwareUpdateState = 9
	WifiSoftwareUpdateState_DOWNLOADING_UPDATE_IMAGE_FAILED    WifiSoftwareUpdateState = 10
	WifiSoftwareUpdateState_DOWNLOADING_UPDATE_IMAGE_EXHAUSTED WifiSoftwareUpdateState = 11
	WifiSoftwareUpdateState_FLASHING_FAILED                    WifiSoftwareUpdateState = 12
)

// Enum value maps for WifiSoftwareUpdateState.
var (
	WifiSoftwareUpdateState_name = map[int32]string{
		0:  "NOT_RUN",
		1:  "GETTING_TARGET_VERSION",
		2:  "DOWNLOADING_UPDATE_IMAGE",
		3:  "FLASHING",
		4:  "NO_UPDATE_REQUIRED",
		5:  "REBOOT_PENDING",
		6:  "GETTING_TARGET_VERSION_FAILED",
		7:  "GETTING_TARGET_VERSION_EXHAUSTED",
		8:  "NO_VALID_ARTIFACT",
		9:  "ILLEGAL_ARTIFACT",
		10: "DOWNLOADING_UPDATE_IMAGE_FAILED",
		11: "DOWNLOADING_UPDATE_IMAGE_EXHAUSTED",
		12: "FLASHING_FAILED",
	}
	WifiSoftwareUpdateState_value = map[string]int32{
		"NOT_RUN":                            0,
		"GETTING_TARGET_VERSION":             1,
		"DOWNLOADING_UPDATE_IMAGE":           2,
		"FLASHING":                           3,
		"NO_UPDATE_REQUIRED":                 4,
		"REBOOT_PENDING":                     5,
		"GETTING_TARGET_VERSION_FAILED":      6,
		"GETTING_TARGET_VERSION_EXHAUSTED":   7,
		"NO_VALID_ARTIFACT":                  8,
		"ILLEGAL_ARTIFACT":                   9,
		"DOWNLOADING_UPDATE_IMAGE_FAILED":    10,
		"DOWNLOADING_UPDATE_IMAGE_EXHAUSTED": 11,
		"FLASHING_FAILED":                    12,
	}
)

func (x WifiSoftwareUpdateState) Enum() *WifiSoftwareUpdateState {
	p := new(WifiSoftwareUpdateState)
	*p = x
	return p
}

func (x WifiSoftwareUpdateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiSoftwareUpdateState) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[7].Descriptor()
}

func (WifiSoftwareUpdateState) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[7]
}

func (x WifiSoftwareUpdateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiSoftwareUpdateState.Descriptor instead.
func (WifiSoftwareUpdateState) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{7}
}

type WifiSetupRequirementState int32

const (
	WifiSetupRequirementState_NOT_REQUIRED       WifiSetupRequirementState = 0
	WifiSetupRequirementState_REQUIRED_COUNTDOWN WifiSetupRequirementState = 1
	WifiSetupRequirementState_REQUIRED_PAUSED    WifiSetupRequirementState = 2
	WifiSetupRequirementState_REQUIRED_COMPLETE  WifiSetupRequirementState = 3
)

// Enum value maps for WifiSetupRequirementState.
var (
	WifiSetupRequirementState_name = map[int32]string{
		0: "NOT_REQUIRED",
		1: "REQUIRED_COUNTDOWN",
		2: "REQUIRED_PAUSED",
		3: "REQUIRED_COMPLETE",
	}
	WifiSetupRequirementState_value = map[string]int32{
		"NOT_REQUIRED":       0,
		"REQUIRED_COUNTDOWN": 1,
		"REQUIRED_PAUSED":    2,
		"REQUIRED_COMPLETE":  3,
	}
)

func (x WifiSetupRequirementState) Enum() *WifiSetupRequirementState {
	p := new(WifiSetupRequirementState)
	*p = x
	return p
}

func (x WifiSetupRequirementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiSetupRequirementState) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_util_proto_enumTypes[8].Descriptor()
}

func (WifiSetupRequirementState) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_util_proto_enumTypes[8]
}

func (x WifiSetupRequirementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiSetupRequirementState.Descriptor instead.
func (WifiSetupRequirementState) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{8}
}

type InflatedBasicServiceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid      string    `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid       string    `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	MacLan     string    `protobuf:"bytes,3,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	IfaceName  string    `protobuf:"bytes,4,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	IfaceType  IfaceType `protobuf:"varint,5,opt,name=iface_type,json=ifaceType,proto3,enum=SpaceX.API.Device.IfaceType" json:"iface_type,omitempty"`
	Channel    uint32    `protobuf:"varint,6,opt,name=channel,proto3" json:"channel,omitempty"`
	Preference uint32    `protobuf:"varint,7,opt,name=preference,proto3" json:"preference,omitempty"`
	Domain     string    `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *InflatedBasicServiceSet) Reset() {
	*x = InflatedBasicServiceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InflatedBasicServiceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InflatedBasicServiceSet) ProtoMessage() {}

func (x *InflatedBasicServiceSet) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InflatedBasicServiceSet.ProtoReflect.Descriptor instead.
func (*InflatedBasicServiceSet) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{0}
}

func (x *InflatedBasicServiceSet) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *InflatedBasicServiceSet) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *InflatedBasicServiceSet) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *InflatedBasicServiceSet) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *InflatedBasicServiceSet) GetIfaceType() IfaceType {
	if x != nil {
		return x.IfaceType
	}
	return IfaceType_IFACE_TYPE_UNKNOWN
}

func (x *InflatedBasicServiceSet) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *InflatedBasicServiceSet) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *InflatedBasicServiceSet) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type DhcpLease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress   string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress  string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname    string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ExpiresTime string `protobuf:"bytes,4,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"`
	Active      bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	ClientId    uint32 `protobuf:"varint,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DhcpLease) Reset() {
	*x = DhcpLease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpLease) ProtoMessage() {}

func (x *DhcpLease) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpLease.ProtoReflect.Descriptor instead.
func (*DhcpLease) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{1}
}

func (x *DhcpLease) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DhcpLease) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *DhcpLease) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DhcpLease) GetExpiresTime() string {
	if x != nil {
		return x.ExpiresTime
	}
	return ""
}

func (x *DhcpLease) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *DhcpLease) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type DhcpServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain      string       `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Subnet      string       `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Leases      []*DhcpLease `protobuf:"bytes,3,rep,name=leases,proto3" json:"leases,omitempty"`
	IpExhausted bool         `protobuf:"varint,4,opt,name=ip_exhausted,json=ipExhausted,proto3" json:"ip_exhausted,omitempty"`
}

func (x *DhcpServer) Reset() {
	*x = DhcpServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpServer) ProtoMessage() {}

func (x *DhcpServer) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpServer.ProtoReflect.Descriptor instead.
func (*DhcpServer) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{2}
}

func (x *DhcpServer) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DhcpServer) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DhcpServer) GetLeases() []*DhcpLease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *DhcpServer) GetIpExhausted() bool {
	if x != nil {
		return x.IpExhausted
	}
	return false
}

type RadiusStatsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadiusStats map[string]*RadiusStatsMap_RadiusStats `protobuf:"bytes,1,rep,name=radius_stats,json=radiusStats,proto3" json:"radius_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RadiusStatsMap) Reset() {
	*x = RadiusStatsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadiusStatsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadiusStatsMap) ProtoMessage() {}

func (x *RadiusStatsMap) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadiusStatsMap.ProtoReflect.Descriptor instead.
func (*RadiusStatsMap) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{3}
}

func (x *RadiusStatsMap) GetRadiusStats() map[string]*RadiusStatsMap_RadiusStats {
	if x != nil {
		return x.RadiusStats
	}
	return nil
}

type PoeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoeState                 PoeState `protobuf:"varint,1,opt,name=poe_state,json=poeState,proto3,enum=SpaceX.API.Device.PoeState" json:"poe_state,omitempty"`
	PoePower                 float32  `protobuf:"fixed32,2,opt,name=poe_power,json=poePower,proto3" json:"poe_power,omitempty"`
	PoeFaultsFastOvercurrent uint32   `protobuf:"varint,3,opt,name=poe_faults_fast_overcurrent,json=poeFaultsFastOvercurrent,proto3" json:"poe_faults_fast_overcurrent,omitempty"`
	PoeFaultsSlowOvercurrent uint32   `protobuf:"varint,4,opt,name=poe_faults_slow_overcurrent,json=poeFaultsSlowOvercurrent,proto3" json:"poe_faults_slow_overcurrent,omitempty"`
	PoeFaultsOvervoltage     uint32   `protobuf:"varint,5,opt,name=poe_faults_overvoltage,json=poeFaultsOvervoltage,proto3" json:"poe_faults_overvoltage,omitempty"`
	PoeFaultsUndervoltage    uint32   `protobuf:"varint,6,opt,name=poe_faults_undervoltage,json=poeFaultsUndervoltage,proto3" json:"poe_faults_undervoltage,omitempty"`
}

func (x *PoeStats) Reset() {
	*x = PoeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoeStats) ProtoMessage() {}

func (x *PoeStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoeStats.ProtoReflect.Descriptor instead.
func (*PoeStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{4}
}

func (x *PoeStats) GetPoeState() PoeState {
	if x != nil {
		return x.PoeState
	}
	return PoeState_POE_STATE_DISABLED
}

func (x *PoeStats) GetPoePower() float32 {
	if x != nil {
		return x.PoePower
	}
	return 0
}

func (x *PoeStats) GetPoeFaultsFastOvercurrent() uint32 {
	if x != nil {
		return x.PoeFaultsFastOvercurrent
	}
	return 0
}

func (x *PoeStats) GetPoeFaultsSlowOvercurrent() uint32 {
	if x != nil {
		return x.PoeFaultsSlowOvercurrent
	}
	return 0
}

func (x *PoeStats) GetPoeFaultsOvervoltage() uint32 {
	if x != nil {
		return x.PoeFaultsOvervoltage
	}
	return 0
}

func (x *PoeStats) GetPoeFaultsUndervoltage() uint32 {
	if x != nil {
		return x.PoeFaultsUndervoltage
	}
	return 0
}

type WifiSoftwareUpdateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                         WifiSoftwareUpdateState `protobuf:"varint,1,opt,name=state,proto3,enum=SpaceX.API.Device.WifiSoftwareUpdateState" json:"state,omitempty"`
	SoftwareDownloadProgress      float32                 `protobuf:"fixed32,2,opt,name=software_download_progress,json=softwareDownloadProgress,proto3" json:"software_download_progress,omitempty"`
	SecondsSinceGetTargetVersions float32                 `protobuf:"fixed32,3,opt,name=seconds_since_get_target_versions,json=secondsSinceGetTargetVersions,proto3" json:"seconds_since_get_target_versions,omitempty"`
}

func (x *WifiSoftwareUpdateStats) Reset() {
	*x = WifiSoftwareUpdateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSoftwareUpdateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSoftwareUpdateStats) ProtoMessage() {}

func (x *WifiSoftwareUpdateStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSoftwareUpdateStats.ProtoReflect.Descriptor instead.
func (*WifiSoftwareUpdateStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{5}
}

func (x *WifiSoftwareUpdateStats) GetState() WifiSoftwareUpdateState {
	if x != nil {
		return x.State
	}
	return WifiSoftwareUpdateState_NOT_RUN
}

func (x *WifiSoftwareUpdateStats) GetSoftwareDownloadProgress() float32 {
	if x != nil {
		return x.SoftwareDownloadProgress
	}
	return 0
}

func (x *WifiSoftwareUpdateStats) GetSecondsSinceGetTargetVersions() float32 {
	if x != nil {
		return x.SecondsSinceGetTargetVersions
	}
	return 0
}

type WifiSetupRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                 WifiSetupRequirementState `protobuf:"varint,1,opt,name=state,proto3,enum=SpaceX.API.Device.WifiSetupRequirementState" json:"state,omitempty"`
	PauseCountdownSeconds uint64                    `protobuf:"varint,2,opt,name=pause_countdown_seconds,json=pauseCountdownSeconds,proto3" json:"pause_countdown_seconds,omitempty"`
}

func (x *WifiSetupRequirement) Reset() {
	*x = WifiSetupRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetupRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetupRequirement) ProtoMessage() {}

func (x *WifiSetupRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetupRequirement.ProtoReflect.Descriptor instead.
func (*WifiSetupRequirement) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{6}
}

func (x *WifiSetupRequirement) GetState() WifiSetupRequirementState {
	if x != nil {
		return x.State
	}
	return WifiSetupRequirementState_NOT_REQUIRED
}

func (x *WifiSetupRequirement) GetPauseCountdownSeconds() uint64 {
	if x != nil {
		return x.PauseCountdownSeconds
	}
	return 0
}

type RadiusStatsMap_RadiusStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfaceName               string `protobuf:"bytes,1,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	TimeoutCount            uint32 `protobuf:"varint,2,opt,name=timeout_count,json=timeoutCount,proto3" json:"timeout_count,omitempty"`
	AccessRequestCount      uint32 `protobuf:"varint,3,opt,name=access_request_count,json=accessRequestCount,proto3" json:"access_request_count,omitempty"`
	AccessAcceptCount       uint32 `protobuf:"varint,4,opt,name=access_accept_count,json=accessAcceptCount,proto3" json:"access_accept_count,omitempty"`
	AccessRejectCount       uint32 `protobuf:"varint,5,opt,name=access_reject_count,json=accessRejectCount,proto3" json:"access_reject_count,omitempty"`
	AccessChallengeCount    uint32 `protobuf:"varint,6,opt,name=access_challenge_count,json=accessChallengeCount,proto3" json:"access_challenge_count,omitempty"`
	AccountingRequestCount  uint32 `protobuf:"varint,7,opt,name=accounting_request_count,json=accountingRequestCount,proto3" json:"accounting_request_count,omitempty"`
	AccountingResponseCount uint32 `protobuf:"varint,8,opt,name=accounting_response_count,json=accountingResponseCount,proto3" json:"accounting_response_count,omitempty"`
}

func (x *RadiusStatsMap_RadiusStats) Reset() {
	*x = RadiusStatsMap_RadiusStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_util_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadiusStatsMap_RadiusStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadiusStatsMap_RadiusStats) ProtoMessage() {}

func (x *RadiusStatsMap_RadiusStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_util_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadiusStatsMap_RadiusStats.ProtoReflect.Descriptor instead.
func (*RadiusStatsMap_RadiusStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_util_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RadiusStatsMap_RadiusStats) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *RadiusStatsMap_RadiusStats) GetTimeoutCount() uint32 {
	if x != nil {
		return x.TimeoutCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccessRequestCount() uint32 {
	if x != nil {
		return x.AccessRequestCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccessAcceptCount() uint32 {
	if x != nil {
		return x.AccessAcceptCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccessRejectCount() uint32 {
	if x != nil {
		return x.AccessRejectCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccessChallengeCount() uint32 {
	if x != nil {
		return x.AccessChallengeCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccountingRequestCount() uint32 {
	if x != nil {
		return x.AccountingRequestCount
	}
	return 0
}

func (x *RadiusStatsMap_RadiusStats) GetAccountingResponseCount() uint32 {
	if x != nil {
		return x.AccountingResponseCount
	}
	return 0
}

var File_spacex_api_device_wifi_util_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_util_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x63, 0x4c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x44, 0x68, 0x63, 0x70, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x44, 0x68, 0x63, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x70, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22, 0xe8, 0x04,
	0x0a, 0x0e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x12, 0x55, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x8f, 0x03, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x6d, 0x0a, 0x10, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6f, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b,
	0x70, 0x6f, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x70, 0x6f, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x61, 0x73, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70,
	0x6f, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x70, 0x6f, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x6c, 0x6f, 0x77, 0x4f,
	0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f,
	0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x6f, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x70, 0x6f, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x57, 0x69, 0x66,
	0x69, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x2a, 0x84, 0x01, 0x0a, 0x09, 0x49, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x46, 0x5f, 0x32,
	0x47, 0x48, 0x5a, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x46, 0x5f, 0x35,
	0x47, 0x48, 0x5a, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x06, 0x2a, 0x98, 0x01, 0x0a, 0x0c, 0x54,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x30,
	0x30, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x38, 0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x30, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x32, 0x35, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x32, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x36, 0x10, 0x05, 0x2a, 0xa7, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4d, 0x50, 0x55, 0x50, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x4d, 0x50, 0x55,
	0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x05, 0x2a,
	0x9d, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x4f, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x45, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x04, 0x2a,
	0x84, 0x02, 0x0a, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x57, 0x49, 0x46, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x5f, 0x47, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x5f, 0x4e, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x5f, 0x4e, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x5f, 0x47, 0x5f, 0x4e, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x5f, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x4d, 0x49, 0x58,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x4d, 0x49,
	0x58, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x5f, 0x47, 0x5f, 0x4e, 0x5f, 0x41,
	0x58, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x5f, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x5f, 0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x5f, 0x4e, 0x5f, 0x41, 0x43, 0x5f, 0x41, 0x58, 0x5f, 0x4d,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x0e, 0x2a, 0x55, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x50, 0x41, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x33, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x50, 0x41, 0x32, 0x57, 0x50, 0x41, 0x33, 0x10, 0x04, 0x2a, 0x2f, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x4c, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x54, 0x4c, 0x53, 0x10, 0x03, 0x2a, 0xf2,
	0x02, 0x0a, 0x17, 0x57, 0x69, 0x66, 0x69, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x42, 0x4f, 0x4f,
	0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x47,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x24,
	0x0a, 0x20, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10,
	0x09, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0c, 0x2a, 0x71, 0x0a, 0x19, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x42, 0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_wifi_util_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_util_proto_rawDescData = file_spacex_api_device_wifi_util_proto_rawDesc
)

func file_spacex_api_device_wifi_util_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_util_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_util_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_util_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_util_proto_rawDescData
}

var file_spacex_api_device_wifi_util_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_spacex_api_device_wifi_util_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spacex_api_device_wifi_util_proto_goTypes = []interface{}{
	(IfaceType)(0),                     // 0: SpaceX.API.Device.IfaceType
	(TxPowerLevel)(0),                  // 1: SpaceX.API.Device.TxPowerLevel
	(PoeState)(0),                      // 2: SpaceX.API.Device.PoeState
	(PoeFault)(0),                      // 3: SpaceX.API.Device.PoeFault
	(WifiMode)(0),                      // 4: SpaceX.API.Device.WifiMode
	(WifiSecurity)(0),                  // 5: SpaceX.API.Device.WifiSecurity
	(Protocol)(0),                      // 6: SpaceX.API.Device.Protocol
	(WifiSoftwareUpdateState)(0),       // 7: SpaceX.API.Device.WifiSoftwareUpdateState
	(WifiSetupRequirementState)(0),     // 8: SpaceX.API.Device.WifiSetupRequirementState
	(*InflatedBasicServiceSet)(nil),    // 9: SpaceX.API.Device.InflatedBasicServiceSet
	(*DhcpLease)(nil),                  // 10: SpaceX.API.Device.DhcpLease
	(*DhcpServer)(nil),                 // 11: SpaceX.API.Device.DhcpServer
	(*RadiusStatsMap)(nil),             // 12: SpaceX.API.Device.RadiusStatsMap
	(*PoeStats)(nil),                   // 13: SpaceX.API.Device.PoeStats
	(*WifiSoftwareUpdateStats)(nil),    // 14: SpaceX.API.Device.WifiSoftwareUpdateStats
	(*WifiSetupRequirement)(nil),       // 15: SpaceX.API.Device.WifiSetupRequirement
	(*RadiusStatsMap_RadiusStats)(nil), // 16: SpaceX.API.Device.RadiusStatsMap.RadiusStats
	nil,                                // 17: SpaceX.API.Device.RadiusStatsMap.RadiusStatsEntry
}
var file_spacex_api_device_wifi_util_proto_depIdxs = []int32{
	0,  // 0: SpaceX.API.Device.InflatedBasicServiceSet.iface_type:type_name -> SpaceX.API.Device.IfaceType
	10, // 1: SpaceX.API.Device.DhcpServer.leases:type_name -> SpaceX.API.Device.DhcpLease
	17, // 2: SpaceX.API.Device.RadiusStatsMap.radius_stats:type_name -> SpaceX.API.Device.RadiusStatsMap.RadiusStatsEntry
	2,  // 3: SpaceX.API.Device.PoeStats.poe_state:type_name -> SpaceX.API.Device.PoeState
	7,  // 4: SpaceX.API.Device.WifiSoftwareUpdateStats.state:type_name -> SpaceX.API.Device.WifiSoftwareUpdateState
	8,  // 5: SpaceX.API.Device.WifiSetupRequirement.state:type_name -> SpaceX.API.Device.WifiSetupRequirementState
	16, // 6: SpaceX.API.Device.RadiusStatsMap.RadiusStatsEntry.value:type_name -> SpaceX.API.Device.RadiusStatsMap.RadiusStats
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_util_proto_init() }
func file_spacex_api_device_wifi_util_proto_init() {
	if File_spacex_api_device_wifi_util_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_util_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InflatedBasicServiceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpLease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadiusStatsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSoftwareUpdateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetupRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_util_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadiusStatsMap_RadiusStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_util_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spacex_api_device_wifi_util_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_util_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_util_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_util_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_util_proto = out.File
	file_spacex_api_device_wifi_util_proto_rawDesc = nil
	file_spacex_api_device_wifi_util_proto_goTypes = nil
	file_spacex_api_device_wifi_util_proto_depIdxs = nil
}
