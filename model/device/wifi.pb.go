// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.25.3
// source: spacex/api/device/wifi.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	telemetron "github.com/b0ch3nski/go-starlink/model/telemetron"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WifiGetClientHistoryResponse_WifiLimitedReason int32

const (
	WifiGetClientHistoryResponse_LIMIT_UNKNOWN         WifiGetClientHistoryResponse_WifiLimitedReason = 0
	WifiGetClientHistoryResponse_LIMIT_NONE            WifiGetClientHistoryResponse_WifiLimitedReason = 1
	WifiGetClientHistoryResponse_LIMIT_UNCLASSIFIED    WifiGetClientHistoryResponse_WifiLimitedReason = 2
	WifiGetClientHistoryResponse_LIMIT_DROPPED_PACKETS WifiGetClientHistoryResponse_WifiLimitedReason = 3
)

// Enum value maps for WifiGetClientHistoryResponse_WifiLimitedReason.
var (
	WifiGetClientHistoryResponse_WifiLimitedReason_name = map[int32]string{
		0: "LIMIT_UNKNOWN",
		1: "LIMIT_NONE",
		2: "LIMIT_UNCLASSIFIED",
		3: "LIMIT_DROPPED_PACKETS",
	}
	WifiGetClientHistoryResponse_WifiLimitedReason_value = map[string]int32{
		"LIMIT_UNKNOWN":         0,
		"LIMIT_NONE":            1,
		"LIMIT_UNCLASSIFIED":    2,
		"LIMIT_DROPPED_PACKETS": 3,
	}
)

func (x WifiGetClientHistoryResponse_WifiLimitedReason) Enum() *WifiGetClientHistoryResponse_WifiLimitedReason {
	p := new(WifiGetClientHistoryResponse_WifiLimitedReason)
	*p = x
	return p
}

func (x WifiGetClientHistoryResponse_WifiLimitedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiGetClientHistoryResponse_WifiLimitedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[0].Descriptor()
}

func (WifiGetClientHistoryResponse_WifiLimitedReason) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[0]
}

func (x WifiGetClientHistoryResponse_WifiLimitedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiGetClientHistoryResponse_WifiLimitedReason.Descriptor instead.
func (WifiGetClientHistoryResponse_WifiLimitedReason) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{24, 0}
}

type WifiClient_Interface int32

const (
	WifiClient_UNKNOWN      WifiClient_Interface = 0
	WifiClient_ETH          WifiClient_Interface = 1
	WifiClient_RF_2GHZ      WifiClient_Interface = 2
	WifiClient_RF_5GHZ      WifiClient_Interface = 3
	WifiClient_RF_5GHZ_HIGH WifiClient_Interface = 4
)

// Enum value maps for WifiClient_Interface.
var (
	WifiClient_Interface_name = map[int32]string{
		0: "UNKNOWN",
		1: "ETH",
		2: "RF_2GHZ",
		3: "RF_5GHZ",
		4: "RF_5GHZ_HIGH",
	}
	WifiClient_Interface_value = map[string]int32{
		"UNKNOWN":      0,
		"ETH":          1,
		"RF_2GHZ":      2,
		"RF_5GHZ":      3,
		"RF_5GHZ_HIGH": 4,
	}
)

func (x WifiClient_Interface) Enum() *WifiClient_Interface {
	p := new(WifiClient_Interface)
	*p = x
	return p
}

func (x WifiClient_Interface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiClient_Interface) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[1].Descriptor()
}

func (WifiClient_Interface) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[1]
}

func (x WifiClient_Interface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiClient_Interface.Descriptor instead.
func (WifiClient_Interface) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 0}
}

type WifiClient_Role int32

const (
	WifiClient_ROLE_UNKNOWN WifiClient_Role = 0
	WifiClient_CLIENT       WifiClient_Role = 1
	WifiClient_REPEATER     WifiClient_Role = 2
	WifiClient_CONTROLLER   WifiClient_Role = 3
)

// Enum value maps for WifiClient_Role.
var (
	WifiClient_Role_name = map[int32]string{
		0: "ROLE_UNKNOWN",
		1: "CLIENT",
		2: "REPEATER",
		3: "CONTROLLER",
	}
	WifiClient_Role_value = map[string]int32{
		"ROLE_UNKNOWN": 0,
		"CLIENT":       1,
		"REPEATER":     2,
		"CONTROLLER":   3,
	}
)

func (x WifiClient_Role) Enum() *WifiClient_Role {
	p := new(WifiClient_Role)
	*p = x
	return p
}

func (x WifiClient_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiClient_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[2].Descriptor()
}

func (WifiClient_Role) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[2]
}

func (x WifiClient_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiClient_Role.Descriptor instead.
func (WifiClient_Role) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 1}
}

type WifiNetwork_Band int32

const (
	WifiNetwork_WIFI_UNKNOWN WifiNetwork_Band = 0
	WifiNetwork_WIFI_2_4GHZ  WifiNetwork_Band = 1
	WifiNetwork_WIFI_5GHZ    WifiNetwork_Band = 2
)

// Enum value maps for WifiNetwork_Band.
var (
	WifiNetwork_Band_name = map[int32]string{
		0: "WIFI_UNKNOWN",
		1: "WIFI_2_4GHZ",
		2: "WIFI_5GHZ",
	}
	WifiNetwork_Band_value = map[string]int32{
		"WIFI_UNKNOWN": 0,
		"WIFI_2_4GHZ":  1,
		"WIFI_5GHZ":    2,
	}
)

func (x WifiNetwork_Band) Enum() *WifiNetwork_Band {
	p := new(WifiNetwork_Band)
	*p = x
	return p
}

func (x WifiNetwork_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiNetwork_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[3].Descriptor()
}

func (WifiNetwork_Band) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[3]
}

func (x WifiNetwork_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiNetwork_Band.Descriptor instead.
func (WifiNetwork_Band) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{41, 0}
}

type IwprivCommand_Ioctl int32

const (
	IwprivCommand_IOCTL_SET                IwprivCommand_Ioctl = 0
	IwprivCommand_IOCTL_E2P                IwprivCommand_Ioctl = 1
	IwprivCommand_IOCTL_MAC                IwprivCommand_Ioctl = 3
	IwprivCommand_IOCTL_SX_ALLOW_5GHZ_HIGH IwprivCommand_Ioctl = 4
)

// Enum value maps for IwprivCommand_Ioctl.
var (
	IwprivCommand_Ioctl_name = map[int32]string{
		0: "IOCTL_SET",
		1: "IOCTL_E2P",
		3: "IOCTL_MAC",
		4: "IOCTL_SX_ALLOW_5GHZ_HIGH",
	}
	IwprivCommand_Ioctl_value = map[string]int32{
		"IOCTL_SET":                0,
		"IOCTL_E2P":                1,
		"IOCTL_MAC":                3,
		"IOCTL_SX_ALLOW_5GHZ_HIGH": 4,
	}
)

func (x IwprivCommand_Ioctl) Enum() *IwprivCommand_Ioctl {
	p := new(IwprivCommand_Ioctl)
	*p = x
	return p
}

func (x IwprivCommand_Ioctl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IwprivCommand_Ioctl) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[4].Descriptor()
}

func (IwprivCommand_Ioctl) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[4]
}

func (x IwprivCommand_Ioctl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IwprivCommand_Ioctl.Descriptor instead.
func (IwprivCommand_Ioctl) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{63, 0}
}

type WifiClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*WifiClient `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *WifiClients) Reset() {
	*x = WifiClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClients) ProtoMessage() {}

func (x *WifiClients) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClients.ProtoReflect.Descriptor instead.
func (*WifiClients) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{0}
}

func (x *WifiClients) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

type ToController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion int32 `protobuf:"varint,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Types that are assignable to Message:
	//
	//	*ToController_Clients
	//	*ToController_MeshJoin
	//	*ToController_Status
	//	*ToController_Speedtest
	Message isToController_Message `protobuf_oneof:"message"`
}

func (x *ToController) Reset() {
	*x = ToController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToController) ProtoMessage() {}

func (x *ToController) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToController.ProtoReflect.Descriptor instead.
func (*ToController) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{1}
}

func (x *ToController) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (m *ToController) GetMessage() isToController_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ToController) GetClients() *WifiClients {
	if x, ok := x.GetMessage().(*ToController_Clients); ok {
		return x.Clients
	}
	return nil
}

func (x *ToController) GetMeshJoin() *WifiMeshJoin {
	if x, ok := x.GetMessage().(*ToController_MeshJoin); ok {
		return x.MeshJoin
	}
	return nil
}

func (x *ToController) GetStatus() *WifiMeshStatus {
	if x, ok := x.GetMessage().(*ToController_Status); ok {
		return x.Status
	}
	return nil
}

func (x *ToController) GetSpeedtest() *MeshSpeedtest {
	if x, ok := x.GetMessage().(*ToController_Speedtest); ok {
		return x.Speedtest
	}
	return nil
}

type isToController_Message interface {
	isToController_Message()
}

type ToController_Clients struct {
	Clients *WifiClients `protobuf:"bytes,1,opt,name=clients,proto3,oneof"`
}

type ToController_MeshJoin struct {
	MeshJoin *WifiMeshJoin `protobuf:"bytes,2,opt,name=mesh_join,json=meshJoin,proto3,oneof"`
}

type ToController_Status struct {
	Status *WifiMeshStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof"`
}

type ToController_Speedtest struct {
	Speedtest *MeshSpeedtest `protobuf:"bytes,5,opt,name=speedtest,proto3,oneof"`
}

func (*ToController_Clients) isToController_Message() {}

func (*ToController_MeshJoin) isToController_Message() {}

func (*ToController_Status) isToController_Message() {}

func (*ToController_Speedtest) isToController_Message() {}

type WifiMeshJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incarnation       uint64                  `protobuf:"varint,1,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	HardwareVersion   string                  `protobuf:"bytes,2,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	Supports_5GhzHigh bool                    `protobuf:"varint,3,opt,name=supports_5ghz_high,json=supports5ghzHigh,proto3" json:"supports_5ghz_high,omitempty"`
	SiteSurveyScan    []*WifiSiteSurveyResult `protobuf:"bytes,4,rep,name=siteSurveyScan,proto3" json:"siteSurveyScan,omitempty"`
}

func (x *WifiMeshJoin) Reset() {
	*x = WifiMeshJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiMeshJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiMeshJoin) ProtoMessage() {}

func (x *WifiMeshJoin) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiMeshJoin.ProtoReflect.Descriptor instead.
func (*WifiMeshJoin) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{2}
}

func (x *WifiMeshJoin) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *WifiMeshJoin) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *WifiMeshJoin) GetSupports_5GhzHigh() bool {
	if x != nil {
		return x.Supports_5GhzHigh
	}
	return false
}

func (x *WifiMeshJoin) GetSiteSurveyScan() []*WifiSiteSurveyResult {
	if x != nil {
		return x.SiteSurveyScan
	}
	return nil
}

type WifiMeshStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareVersion    string                     `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	MacLan             string                     `protobuf:"bytes,6,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	SourceMacAddresses []string                   `protobuf:"bytes,7,rep,name=source_mac_addresses,json=sourceMacAddresses,proto3" json:"source_mac_addresses,omitempty"`
	Clients            []*WifiClient              `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
	BssList            []*InflatedBasicServiceSet `protobuf:"bytes,3,rep,name=bss_list,json=bssList,proto3" json:"bss_list,omitempty"`
	HardwareVersion    string                     `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
}

func (x *WifiMeshStatus) Reset() {
	*x = WifiMeshStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiMeshStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiMeshStatus) ProtoMessage() {}

func (x *WifiMeshStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiMeshStatus.ProtoReflect.Descriptor instead.
func (*WifiMeshStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{3}
}

func (x *WifiMeshStatus) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *WifiMeshStatus) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *WifiMeshStatus) GetSourceMacAddresses() []string {
	if x != nil {
		return x.SourceMacAddresses
	}
	return nil
}

func (x *WifiMeshStatus) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *WifiMeshStatus) GetBssList() []*InflatedBasicServiceSet {
	if x != nil {
		return x.BssList
	}
	return nil
}

func (x *WifiMeshStatus) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

type MeshSpeedtestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeshSpeedtestRequest) Reset() {
	*x = MeshSpeedtestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpeedtestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpeedtestRequest) ProtoMessage() {}

func (x *MeshSpeedtestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpeedtestRequest.ProtoReflect.Descriptor instead.
func (*MeshSpeedtestRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{4}
}

type MeshSpeedtest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadStartTime   int64   `protobuf:"varint,1,opt,name=upload_start_time,json=uploadStartTime,proto3" json:"upload_start_time,omitempty"`
	DownloadStartTime int64   `protobuf:"varint,2,opt,name=download_start_time,json=downloadStartTime,proto3" json:"download_start_time,omitempty"`
	UploadMbps        float32 `protobuf:"fixed32,3,opt,name=upload_mbps,json=uploadMbps,proto3" json:"upload_mbps,omitempty"`
	DownloadMbps      float32 `protobuf:"fixed32,4,opt,name=download_mbps,json=downloadMbps,proto3" json:"download_mbps,omitempty"`
}

func (x *MeshSpeedtest) Reset() {
	*x = MeshSpeedtest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpeedtest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpeedtest) ProtoMessage() {}

func (x *MeshSpeedtest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpeedtest.ProtoReflect.Descriptor instead.
func (*MeshSpeedtest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{5}
}

func (x *MeshSpeedtest) GetUploadStartTime() int64 {
	if x != nil {
		return x.UploadStartTime
	}
	return 0
}

func (x *MeshSpeedtest) GetDownloadStartTime() int64 {
	if x != nil {
		return x.DownloadStartTime
	}
	return 0
}

func (x *MeshSpeedtest) GetUploadMbps() float32 {
	if x != nil {
		return x.UploadMbps
	}
	return 0
}

func (x *MeshSpeedtest) GetDownloadMbps() float32 {
	if x != nil {
		return x.DownloadMbps
	}
	return 0
}

type WifiSiteSurveyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rssi         float32      `protobuf:"fixed32,1,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Channel      uint32       `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Ssid         string       `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Security     WifiSecurity `protobuf:"varint,4,opt,name=security,proto3,enum=SpaceX.API.Device.WifiSecurity" json:"security,omitempty"`
	WirelessMode WifiMode     `protobuf:"varint,5,opt,name=wireless_mode,json=wirelessMode,proto3,enum=SpaceX.API.Device.WifiMode" json:"wireless_mode,omitempty"`
	Iface        IfaceType    `protobuf:"varint,6,opt,name=iface,proto3,enum=SpaceX.API.Device.IfaceType" json:"iface,omitempty"`
	MacAddress   string       `protobuf:"bytes,7,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *WifiSiteSurveyResult) Reset() {
	*x = WifiSiteSurveyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSiteSurveyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSiteSurveyResult) ProtoMessage() {}

func (x *WifiSiteSurveyResult) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSiteSurveyResult.ProtoReflect.Descriptor instead.
func (*WifiSiteSurveyResult) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{6}
}

func (x *WifiSiteSurveyResult) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *WifiSiteSurveyResult) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *WifiSiteSurveyResult) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiSiteSurveyResult) GetSecurity() WifiSecurity {
	if x != nil {
		return x.Security
	}
	return WifiSecurity_WIFI_SECURITY_UNKNOWN
}

func (x *WifiSiteSurveyResult) GetWirelessMode() WifiMode {
	if x != nil {
		return x.WirelessMode
	}
	return WifiMode_WIFI_MODE_DEFAULT
}

func (x *WifiSiteSurveyResult) GetIface() IfaceType {
	if x != nil {
		return x.Iface
	}
	return IfaceType_IFACE_TYPE_UNKNOWN
}

func (x *WifiSiteSurveyResult) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type WifiGlobalMeshStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareVersion string                     `protobuf:"bytes,1,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	SoftwareVersion string                     `protobuf:"bytes,2,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	BssList         []*InflatedBasicServiceSet `protobuf:"bytes,3,rep,name=bss_list,json=bssList,proto3" json:"bss_list,omitempty"`
}

func (x *WifiGlobalMeshStatus) Reset() {
	*x = WifiGlobalMeshStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGlobalMeshStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGlobalMeshStatus) ProtoMessage() {}

func (x *WifiGlobalMeshStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGlobalMeshStatus.ProtoReflect.Descriptor instead.
func (*WifiGlobalMeshStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{7}
}

func (x *WifiGlobalMeshStatus) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *WifiGlobalMeshStatus) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *WifiGlobalMeshStatus) GetBssList() []*InflatedBasicServiceSet {
	if x != nil {
		return x.BssList
	}
	return nil
}

type BackhaulRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryBackhaul bool        `protobuf:"varint,1,opt,name=retry_backhaul,json=retryBackhaul,proto3" json:"retry_backhaul,omitempty"`
	GoldenBss     *WifiConfig `protobuf:"bytes,2,opt,name=golden_bss,json=goldenBss,proto3" json:"golden_bss,omitempty"`
}

func (x *BackhaulRequest) Reset() {
	*x = BackhaulRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackhaulRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackhaulRequest) ProtoMessage() {}

func (x *BackhaulRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackhaulRequest.ProtoReflect.Descriptor instead.
func (*BackhaulRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{8}
}

func (x *BackhaulRequest) GetRetryBackhaul() bool {
	if x != nil {
		return x.RetryBackhaul
	}
	return false
}

func (x *BackhaulRequest) GetGoldenBss() *WifiConfig {
	if x != nil {
		return x.GoldenBss
	}
	return nil
}

type FromController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion int32 `protobuf:"varint,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Types that are assignable to Message:
	//
	//	*FromController_WifiConfig
	//	*FromController_SteerClientRequest
	//	*FromController_Status
	//	*FromController_BackhaulRequest
	//	*FromController_StartSpeedtest
	//	*FromController_WifiBtmRequest
	Message isFromController_Message `protobuf_oneof:"message"`
}

func (x *FromController) Reset() {
	*x = FromController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromController) ProtoMessage() {}

func (x *FromController) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromController.ProtoReflect.Descriptor instead.
func (*FromController) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{9}
}

func (x *FromController) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (m *FromController) GetMessage() isFromController_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FromController) GetWifiConfig() *WifiConfig {
	if x, ok := x.GetMessage().(*FromController_WifiConfig); ok {
		return x.WifiConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *FromController) GetSteerClientRequest() *SteerClientRequest {
	if x, ok := x.GetMessage().(*FromController_SteerClientRequest); ok {
		return x.SteerClientRequest
	}
	return nil
}

func (x *FromController) GetStatus() *WifiGlobalMeshStatus {
	if x, ok := x.GetMessage().(*FromController_Status); ok {
		return x.Status
	}
	return nil
}

func (x *FromController) GetBackhaulRequest() *BackhaulRequest {
	if x, ok := x.GetMessage().(*FromController_BackhaulRequest); ok {
		return x.BackhaulRequest
	}
	return nil
}

func (x *FromController) GetStartSpeedtest() *MeshSpeedtestRequest {
	if x, ok := x.GetMessage().(*FromController_StartSpeedtest); ok {
		return x.StartSpeedtest
	}
	return nil
}

func (x *FromController) GetWifiBtmRequest() *WifiBtmRequest {
	if x, ok := x.GetMessage().(*FromController_WifiBtmRequest); ok {
		return x.WifiBtmRequest
	}
	return nil
}

type isFromController_Message interface {
	isFromController_Message()
}

type FromController_WifiConfig struct {
	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3,oneof"`
}

type FromController_SteerClientRequest struct {
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	SteerClientRequest *SteerClientRequest `protobuf:"bytes,2,opt,name=steer_client_request,json=steerClientRequest,proto3,oneof"`
}

type FromController_Status struct {
	Status *WifiGlobalMeshStatus `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

type FromController_BackhaulRequest struct {
	BackhaulRequest *BackhaulRequest `protobuf:"bytes,5,opt,name=backhaul_request,json=backhaulRequest,proto3,oneof"`
}

type FromController_StartSpeedtest struct {
	StartSpeedtest *MeshSpeedtestRequest `protobuf:"bytes,6,opt,name=start_speedtest,json=startSpeedtest,proto3,oneof"`
}

type FromController_WifiBtmRequest struct {
	WifiBtmRequest *WifiBtmRequest `protobuf:"bytes,7,opt,name=wifi_btm_request,json=wifiBtmRequest,proto3,oneof"`
}

func (*FromController_WifiConfig) isFromController_Message() {}

func (*FromController_SteerClientRequest) isFromController_Message() {}

func (*FromController_Status) isFromController_Message() {}

func (*FromController_BackhaulRequest) isFromController_Message() {}

func (*FromController_StartSpeedtest) isFromController_Message() {}

func (*FromController_WifiBtmRequest) isFromController_Message() {}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
type SteerClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	ClientMacAddr string `protobuf:"bytes,1,opt,name=client_mac_addr,json=clientMacAddr,proto3" json:"client_mac_addr,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Targets []*SteerClientRequest_SteerTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *SteerClientRequest) Reset() {
	*x = SteerClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteerClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteerClientRequest) ProtoMessage() {}

func (x *SteerClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteerClientRequest.ProtoReflect.Descriptor instead.
func (*SteerClientRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *SteerClientRequest) GetClientMacAddr() string {
	if x != nil {
		return x.ClientMacAddr
	}
	return ""
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *SteerClientRequest) GetTargets() []*SteerClientRequest_SteerTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

type WifiBtmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BssTerminationDurationM uint32                           `protobuf:"varint,5,opt,name=bss_termination_duration_m,json=bssTerminationDurationM,proto3" json:"bss_termination_duration_m,omitempty"`
	PeerBssid               string                           `protobuf:"bytes,1,opt,name=peer_bssid,json=peerBssid,proto3" json:"peer_bssid,omitempty"`
	NeighborReport          []*WifiBtmRequest_NeighborReport `protobuf:"bytes,4,rep,name=neighbor_report,json=neighborReport,proto3" json:"neighbor_report,omitempty"`
}

func (x *WifiBtmRequest) Reset() {
	*x = WifiBtmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBtmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBtmRequest) ProtoMessage() {}

func (x *WifiBtmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBtmRequest.ProtoReflect.Descriptor instead.
func (*WifiBtmRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{11}
}

func (x *WifiBtmRequest) GetBssTerminationDurationM() uint32 {
	if x != nil {
		return x.BssTerminationDurationM
	}
	return 0
}

func (x *WifiBtmRequest) GetPeerBssid() string {
	if x != nil {
		return x.PeerBssid
	}
	return ""
}

func (x *WifiBtmRequest) GetNeighborReport() []*WifiBtmRequest_NeighborReport {
	if x != nil {
		return x.NeighborReport
	}
	return nil
}

type WifiSelfTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSuccess bool                       `protobuf:"varint,1,opt,name=total_success,json=totalSuccess,proto3" json:"total_success,omitempty"`
	Fused        *WifiSelfTest_TestResult   `protobuf:"bytes,2,opt,name=fused,proto3" json:"fused,omitempty"`
	EthPhys      []*WifiSelfTest_TestResult `protobuf:"bytes,3,rep,name=eth_phys,json=ethPhys,proto3" json:"eth_phys,omitempty"`
	Pcis         []*WifiSelfTest_TestResult `protobuf:"bytes,4,rep,name=pcis,proto3" json:"pcis,omitempty"`
	Bl2Prod      *WifiSelfTest_TestResult   `protobuf:"bytes,5,opt,name=bl2_prod,json=bl2Prod,proto3" json:"bl2_prod,omitempty"`
}

func (x *WifiSelfTest) Reset() {
	*x = WifiSelfTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSelfTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSelfTest) ProtoMessage() {}

func (x *WifiSelfTest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSelfTest.ProtoReflect.Descriptor instead.
func (*WifiSelfTest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{12}
}

func (x *WifiSelfTest) GetTotalSuccess() bool {
	if x != nil {
		return x.TotalSuccess
	}
	return false
}

func (x *WifiSelfTest) GetFused() *WifiSelfTest_TestResult {
	if x != nil {
		return x.Fused
	}
	return nil
}

func (x *WifiSelfTest) GetEthPhys() []*WifiSelfTest_TestResult {
	if x != nil {
		return x.EthPhys
	}
	return nil
}

func (x *WifiSelfTest) GetPcis() []*WifiSelfTest_TestResult {
	if x != nil {
		return x.Pcis
	}
	return nil
}

func (x *WifiSelfTest) GetBl2Prod() *WifiSelfTest_TestResult {
	if x != nil {
		return x.Bl2Prod
	}
	return nil
}

type WifiSetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3" json:"wifi_config,omitempty"`
}

func (x *WifiSetConfigRequest) Reset() {
	*x = WifiSetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetConfigRequest) ProtoMessage() {}

func (x *WifiSetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiSetConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{13}
}

func (x *WifiSetConfigRequest) GetWifiConfig() *WifiConfig {
	if x != nil {
		return x.WifiConfig
	}
	return nil
}

type WifiSetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedWifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=updated_wifi_config,json=updatedWifiConfig,proto3" json:"updated_wifi_config,omitempty"`
}

func (x *WifiSetConfigResponse) Reset() {
	*x = WifiSetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetConfigResponse) ProtoMessage() {}

func (x *WifiSetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiSetConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{14}
}

func (x *WifiSetConfigResponse) GetUpdatedWifiConfig() *WifiConfig {
	if x != nil {
		return x.UpdatedWifiConfig
	}
	return nil
}

type WifiGetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetConfigRequest) Reset() {
	*x = WifiGetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetConfigRequest) ProtoMessage() {}

func (x *WifiGetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiGetConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{15}
}

type WifiGetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3" json:"wifi_config,omitempty"`
}

func (x *WifiGetConfigResponse) Reset() {
	*x = WifiGetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetConfigResponse) ProtoMessage() {}

func (x *WifiGetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiGetConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{16}
}

func (x *WifiGetConfigResponse) GetWifiConfig() *WifiConfig {
	if x != nil {
		return x.WifiConfig
	}
	return nil
}

type WifiSetMeshDeviceTrustRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string   `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Auth     MeshAuth `protobuf:"varint,2,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
}

func (x *WifiSetMeshDeviceTrustRequest) Reset() {
	*x = WifiSetMeshDeviceTrustRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshDeviceTrustRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshDeviceTrustRequest) ProtoMessage() {}

func (x *WifiSetMeshDeviceTrustRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshDeviceTrustRequest.ProtoReflect.Descriptor instead.
func (*WifiSetMeshDeviceTrustRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{17}
}

func (x *WifiSetMeshDeviceTrustRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiSetMeshDeviceTrustRequest) GetAuth() MeshAuth {
	if x != nil {
		return x.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

type WifiSetMeshDeviceTrustResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetMeshDeviceTrustResponse) Reset() {
	*x = WifiSetMeshDeviceTrustResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshDeviceTrustResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshDeviceTrustResponse) ProtoMessage() {}

func (x *WifiSetMeshDeviceTrustResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshDeviceTrustResponse.ProtoReflect.Descriptor instead.
func (*WifiSetMeshDeviceTrustResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18}
}

type WifiSetMeshConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshConfig *MeshConfig `protobuf:"bytes,1,opt,name=mesh_config,json=meshConfig,proto3" json:"mesh_config,omitempty"`
	DeviceId   string      `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *WifiSetMeshConfigRequest) Reset() {
	*x = WifiSetMeshConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshConfigRequest) ProtoMessage() {}

func (x *WifiSetMeshConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiSetMeshConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{19}
}

func (x *WifiSetMeshConfigRequest) GetMeshConfig() *MeshConfig {
	if x != nil {
		return x.MeshConfig
	}
	return nil
}

func (x *WifiSetMeshConfigRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type WifiSetMeshConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetMeshConfigResponse) Reset() {
	*x = WifiSetMeshConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshConfigResponse) ProtoMessage() {}

func (x *WifiSetMeshConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiSetMeshConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{20}
}

type WifiGetClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetClientsRequest) Reset() {
	*x = WifiGetClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientsRequest) ProtoMessage() {}

func (x *WifiGetClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientsRequest.ProtoReflect.Descriptor instead.
func (*WifiGetClientsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{21}
}

type WifiGetClientsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients        []*WifiClient `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
	HasClientIndex bool          `protobuf:"varint,2,opt,name=has_client_index,json=hasClientIndex,proto3" json:"has_client_index,omitempty"`
	ClientIndex    int32         `protobuf:"varint,3,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
}

func (x *WifiGetClientsResponse) Reset() {
	*x = WifiGetClientsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientsResponse) ProtoMessage() {}

func (x *WifiGetClientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetClientsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{22}
}

func (x *WifiGetClientsResponse) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *WifiGetClientsResponse) GetHasClientIndex() bool {
	if x != nil {
		return x.HasClientIndex
	}
	return false
}

func (x *WifiGetClientsResponse) GetClientIndex() int32 {
	if x != nil {
		return x.ClientIndex
	}
	return 0
}

type WifiGetClientHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	ClientId   uint32 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *WifiGetClientHistoryRequest) Reset() {
	*x = WifiGetClientHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientHistoryRequest) ProtoMessage() {}

func (x *WifiGetClientHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientHistoryRequest.ProtoReflect.Descriptor instead.
func (*WifiGetClientHistoryRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{23}
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *WifiGetClientHistoryRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WifiGetClientHistoryRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type WifiGetClientHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current           uint64                                           `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	TxThroughputMbps  []float32                                        `protobuf:"fixed32,2,rep,packed,name=tx_throughput_mbps,json=txThroughputMbps,proto3" json:"tx_throughput_mbps,omitempty"`
	RxThroughputMbps  []float32                                        `protobuf:"fixed32,3,rep,packed,name=rx_throughput_mbps,json=rxThroughputMbps,proto3" json:"rx_throughput_mbps,omitempty"`
	ThroughputLimited []WifiGetClientHistoryResponse_WifiLimitedReason `protobuf:"varint,4,rep,packed,name=throughput_limited,json=throughputLimited,proto3,enum=SpaceX.API.Device.WifiGetClientHistoryResponse_WifiLimitedReason" json:"throughput_limited,omitempty"`
	RxRateMbps        []float32                                        `protobuf:"fixed32,5,rep,packed,name=rx_rate_mbps,json=rxRateMbps,proto3" json:"rx_rate_mbps,omitempty"`
	Rssi              []byte                                           `protobuf:"bytes,6,opt,name=rssi,proto3" json:"rssi,omitempty"`
}

func (x *WifiGetClientHistoryResponse) Reset() {
	*x = WifiGetClientHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientHistoryResponse) ProtoMessage() {}

func (x *WifiGetClientHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientHistoryResponse.ProtoReflect.Descriptor instead.
func (*WifiGetClientHistoryResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{24}
}

func (x *WifiGetClientHistoryResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WifiGetClientHistoryResponse) GetTxThroughputMbps() []float32 {
	if x != nil {
		return x.TxThroughputMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRxThroughputMbps() []float32 {
	if x != nil {
		return x.RxThroughputMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetThroughputLimited() []WifiGetClientHistoryResponse_WifiLimitedReason {
	if x != nil {
		return x.ThroughputLimited
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRxRateMbps() []float32 {
	if x != nil {
		return x.RxRateMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRssi() []byte {
	if x != nil {
		return x.Rssi
	}
	return nil
}

type WifiSetAviationConformedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetAviationConformedRequest) Reset() {
	*x = WifiSetAviationConformedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetAviationConformedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetAviationConformedRequest) ProtoMessage() {}

func (x *WifiSetAviationConformedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetAviationConformedRequest.ProtoReflect.Descriptor instead.
func (*WifiSetAviationConformedRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{25}
}

type WifiGetHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current       uint64    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PingDropRate  []float32 `protobuf:"fixed32,1001,rep,packed,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingLatencyMs []float32 `protobuf:"fixed32,1002,rep,packed,name=ping_latency_ms,json=pingLatencyMs,proto3" json:"ping_latency_ms,omitempty"`
}

func (x *WifiGetHistoryResponse) Reset() {
	*x = WifiGetHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetHistoryResponse) ProtoMessage() {}

func (x *WifiGetHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetHistoryResponse.ProtoReflect.Descriptor instead.
func (*WifiGetHistoryResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{26}
}

func (x *WifiGetHistoryResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WifiGetHistoryResponse) GetPingDropRate() []float32 {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *WifiGetHistoryResponse) GetPingLatencyMs() []float32 {
	if x != nil {
		return x.PingLatencyMs
	}
	return nil
}

type WifiNewClientConnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *WifiClient `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *WifiNewClientConnectedEvent) Reset() {
	*x = WifiNewClientConnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNewClientConnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNewClientConnectedEvent) ProtoMessage() {}

func (x *WifiNewClientConnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNewClientConnectedEvent.ProtoReflect.Descriptor instead.
func (*WifiNewClientConnectedEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{27}
}

func (x *WifiNewClientConnectedEvent) GetClient() *WifiClient {
	if x != nil {
		return x.Client
	}
	return nil
}

type WifiClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GivenName                    string                  `protobuf:"bytes,31,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	Domain                       string                  `protobuf:"bytes,22,opt,name=domain,proto3" json:"domain,omitempty"`
	MacAddress                   string                  `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress                    string                  `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Ipv6Addresses                []string                `protobuf:"bytes,41,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	SignalStrength               float32                 `protobuf:"fixed32,4,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	ChannelWidth                 uint32                  `protobuf:"varint,12,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	RxStats                      *WifiClient_RxStats     `protobuf:"bytes,5,opt,name=rx_stats,json=rxStats,proto3" json:"rx_stats,omitempty"`
	TxStats                      *WifiClient_TxStats     `protobuf:"bytes,6,opt,name=tx_stats,json=txStats,proto3" json:"tx_stats,omitempty"`
	AssociatedTimeS              uint32                  `protobuf:"varint,7,opt,name=associated_time_s,json=associatedTimeS,proto3" json:"associated_time_s,omitempty"`
	ModeStr                      string                  `protobuf:"bytes,8,opt,name=mode_str,json=modeStr,proto3" json:"mode_str,omitempty"`
	Iface                        WifiClient_Interface    `protobuf:"varint,9,opt,name=iface,proto3,enum=SpaceX.API.Device.WifiClient_Interface" json:"iface,omitempty"`
	IfaceName                    string                  `protobuf:"bytes,26,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	Snr                          float32                 `protobuf:"fixed32,10,opt,name=snr,proto3" json:"snr,omitempty"`
	Psmode                       int32                   `protobuf:"varint,11,opt,name=psmode,proto3" json:"psmode,omitempty"`
	UpstreamMacAddress           string                  `protobuf:"bytes,13,opt,name=upstream_mac_address,json=upstreamMacAddress,proto3" json:"upstream_mac_address,omitempty"`
	Role                         WifiClient_Role         `protobuf:"varint,14,opt,name=role,proto3,enum=SpaceX.API.Device.WifiClient_Role" json:"role,omitempty"`
	DeviceId                     string                  `protobuf:"bytes,15,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SwqChecks                    uint32                  `protobuf:"varint,16,opt,name=swq_checks,json=swqChecks,proto3" json:"swq_checks,omitempty"`
	SwqChecksNonEmpty            uint32                  `protobuf:"varint,17,opt,name=swq_checks_non_empty,json=swqChecksNonEmpty,proto3" json:"swq_checks_non_empty,omitempty"`
	MibSteerState                uint32                  `protobuf:"varint,18,opt,name=mib_steer_state,json=mibSteerState,proto3" json:"mib_steer_state,omitempty"`
	MibSteerMethod               uint32                  `protobuf:"varint,19,opt,name=mib_steer_method,json=mibSteerMethod,proto3" json:"mib_steer_method,omitempty"`
	BtmRequests                  uint32                  `protobuf:"varint,20,opt,name=btm_requests,json=btmRequests,proto3" json:"btm_requests,omitempty"`
	BtmRequestsSuccess           uint32                  `protobuf:"varint,21,opt,name=btm_requests_success,json=btmRequestsSuccess,proto3" json:"btm_requests_success,omitempty"`
	SteerState                   uint32                  `protobuf:"varint,30,opt,name=steer_state,json=steerState,proto3" json:"steer_state,omitempty"`
	SteerReqSuccessLast_1H       uint32                  `protobuf:"varint,27,opt,name=steer_req_success_last_1h,json=steerReqSuccessLast1h,proto3" json:"steer_req_success_last_1h,omitempty"`
	SteerReqFailLast_1H          uint32                  `protobuf:"varint,28,opt,name=steer_req_fail_last_1h,json=steerReqFailLast1h,proto3" json:"steer_req_fail_last_1h,omitempty"`
	SteerReqFailAndDissocLast_1H uint32                  `protobuf:"varint,29,opt,name=steer_req_fail_and_dissoc_last_1h,json=steerReqFailAndDissocLast1h,proto3" json:"steer_req_fail_and_dissoc_last_1h,omitempty"`
	Dot11VSupport                bool                    `protobuf:"varint,23,opt,name=dot11v_support,json=dot11vSupport,proto3" json:"dot11v_support,omitempty"`
	HopsFromController           uint32                  `protobuf:"varint,32,opt,name=hops_from_controller,json=hopsFromController,proto3" json:"hops_from_controller,omitempty"`
	EstTxRateMbpsFromController  float32                 `protobuf:"fixed32,33,opt,name=est_tx_rate_mbps_from_controller,json=estTxRateMbpsFromController,proto3" json:"est_tx_rate_mbps_from_controller,omitempty"`
	EstRxRateMbpsFromController  float32                 `protobuf:"fixed32,34,opt,name=est_rx_rate_mbps_from_controller,json=estRxRateMbpsFromController,proto3" json:"est_rx_rate_mbps_from_controller,omitempty"`
	HardwareVersion              string                  `protobuf:"bytes,37,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	SoftwareVersion              string                  `protobuf:"bytes,38,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	ApiVersion                   uint32                  `protobuf:"varint,39,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	PingMetrics                  *WifiClient_PingMetrics `protobuf:"bytes,40,opt,name=ping_metrics,json=pingMetrics,proto3" json:"ping_metrics,omitempty"`
	Blocked                      bool                    `protobuf:"varint,42,opt,name=blocked,proto3" json:"blocked,omitempty"`
	ClientId                     uint32                  `protobuf:"varint,43,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FqcodelInfo                  *WifiClient_FqcodelInfo `protobuf:"bytes,44,opt,name=fqcodel_info,json=fqcodelInfo,proto3" json:"fqcodel_info,omitempty"`
}

func (x *WifiClient) Reset() {
	*x = WifiClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient) ProtoMessage() {}

func (x *WifiClient) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient.ProtoReflect.Descriptor instead.
func (*WifiClient) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28}
}

func (x *WifiClient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WifiClient) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *WifiClient) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WifiClient) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WifiClient) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *WifiClient) GetIpv6Addresses() []string {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *WifiClient) GetSignalStrength() float32 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *WifiClient) GetChannelWidth() uint32 {
	if x != nil {
		return x.ChannelWidth
	}
	return 0
}

func (x *WifiClient) GetRxStats() *WifiClient_RxStats {
	if x != nil {
		return x.RxStats
	}
	return nil
}

func (x *WifiClient) GetTxStats() *WifiClient_TxStats {
	if x != nil {
		return x.TxStats
	}
	return nil
}

func (x *WifiClient) GetAssociatedTimeS() uint32 {
	if x != nil {
		return x.AssociatedTimeS
	}
	return 0
}

func (x *WifiClient) GetModeStr() string {
	if x != nil {
		return x.ModeStr
	}
	return ""
}

func (x *WifiClient) GetIface() WifiClient_Interface {
	if x != nil {
		return x.Iface
	}
	return WifiClient_UNKNOWN
}

func (x *WifiClient) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *WifiClient) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *WifiClient) GetPsmode() int32 {
	if x != nil {
		return x.Psmode
	}
	return 0
}

func (x *WifiClient) GetUpstreamMacAddress() string {
	if x != nil {
		return x.UpstreamMacAddress
	}
	return ""
}

func (x *WifiClient) GetRole() WifiClient_Role {
	if x != nil {
		return x.Role
	}
	return WifiClient_ROLE_UNKNOWN
}

func (x *WifiClient) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiClient) GetSwqChecks() uint32 {
	if x != nil {
		return x.SwqChecks
	}
	return 0
}

func (x *WifiClient) GetSwqChecksNonEmpty() uint32 {
	if x != nil {
		return x.SwqChecksNonEmpty
	}
	return 0
}

func (x *WifiClient) GetMibSteerState() uint32 {
	if x != nil {
		return x.MibSteerState
	}
	return 0
}

func (x *WifiClient) GetMibSteerMethod() uint32 {
	if x != nil {
		return x.MibSteerMethod
	}
	return 0
}

func (x *WifiClient) GetBtmRequests() uint32 {
	if x != nil {
		return x.BtmRequests
	}
	return 0
}

func (x *WifiClient) GetBtmRequestsSuccess() uint32 {
	if x != nil {
		return x.BtmRequestsSuccess
	}
	return 0
}

func (x *WifiClient) GetSteerState() uint32 {
	if x != nil {
		return x.SteerState
	}
	return 0
}

func (x *WifiClient) GetSteerReqSuccessLast_1H() uint32 {
	if x != nil {
		return x.SteerReqSuccessLast_1H
	}
	return 0
}

func (x *WifiClient) GetSteerReqFailLast_1H() uint32 {
	if x != nil {
		return x.SteerReqFailLast_1H
	}
	return 0
}

func (x *WifiClient) GetSteerReqFailAndDissocLast_1H() uint32 {
	if x != nil {
		return x.SteerReqFailAndDissocLast_1H
	}
	return 0
}

func (x *WifiClient) GetDot11VSupport() bool {
	if x != nil {
		return x.Dot11VSupport
	}
	return false
}

func (x *WifiClient) GetHopsFromController() uint32 {
	if x != nil {
		return x.HopsFromController
	}
	return 0
}

func (x *WifiClient) GetEstTxRateMbpsFromController() float32 {
	if x != nil {
		return x.EstTxRateMbpsFromController
	}
	return 0
}

func (x *WifiClient) GetEstRxRateMbpsFromController() float32 {
	if x != nil {
		return x.EstRxRateMbpsFromController
	}
	return 0
}

func (x *WifiClient) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *WifiClient) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *WifiClient) GetApiVersion() uint32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *WifiClient) GetPingMetrics() *WifiClient_PingMetrics {
	if x != nil {
		return x.PingMetrics
	}
	return nil
}

func (x *WifiClient) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *WifiClient) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *WifiClient) GetFqcodelInfo() *WifiClient_FqcodelInfo {
	if x != nil {
		return x.FqcodelInfo
	}
	return nil
}

type WifiSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skip            bool   `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	NetworkName     string `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	NetworkPassword string `protobuf:"bytes,3,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
	Bypass          bool   `protobuf:"varint,4,opt,name=bypass,proto3" json:"bypass,omitempty"`
}

func (x *WifiSetupRequest) Reset() {
	*x = WifiSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetupRequest) ProtoMessage() {}

func (x *WifiSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetupRequest.ProtoReflect.Descriptor instead.
func (*WifiSetupRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{29}
}

func (x *WifiSetupRequest) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *WifiSetupRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *WifiSetupRequest) GetNetworkPassword() string {
	if x != nil {
		return x.NetworkPassword
	}
	return ""
}

func (x *WifiSetupRequest) GetBypass() bool {
	if x != nil {
		return x.Bypass
	}
	return false
}

type WifiSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetupResponse) Reset() {
	*x = WifiSetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetupResponse) ProtoMessage() {}

func (x *WifiSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetupResponse.ProtoReflect.Descriptor instead.
func (*WifiSetupResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{30}
}

type WifiBandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanBusyTimeFraction float32 `protobuf:"fixed32,1,opt,name=chan_busy_time_fraction,json=chanBusyTimeFraction,proto3" json:"chan_busy_time_fraction,omitempty"`
	TxAirTimeFraction    float32 `protobuf:"fixed32,2,opt,name=tx_air_time_fraction,json=txAirTimeFraction,proto3" json:"tx_air_time_fraction,omitempty"`
	RxAirTimeFraction    float32 `protobuf:"fixed32,3,opt,name=rx_air_time_fraction,json=rxAirTimeFraction,proto3" json:"rx_air_time_fraction,omitempty"`
	ObssAirTimeFraction  float32 `protobuf:"fixed32,4,opt,name=obss_air_time_fraction,json=obssAirTimeFraction,proto3" json:"obss_air_time_fraction,omitempty"`
	EdccaAirTimeFraction float32 `protobuf:"fixed32,5,opt,name=edcca_air_time_fraction,json=edccaAirTimeFraction,proto3" json:"edcca_air_time_fraction,omitempty"`
}

func (x *WifiBandStatus) Reset() {
	*x = WifiBandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBandStatus) ProtoMessage() {}

func (x *WifiBandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBandStatus.ProtoReflect.Descriptor instead.
func (*WifiBandStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{31}
}

func (x *WifiBandStatus) GetChanBusyTimeFraction() float32 {
	if x != nil {
		return x.ChanBusyTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetTxAirTimeFraction() float32 {
	if x != nil {
		return x.TxAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetRxAirTimeFraction() float32 {
	if x != nil {
		return x.RxAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetObssAirTimeFraction() float32 {
	if x != nil {
		return x.ObssAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetEdccaAirTimeFraction() float32 {
	if x != nil {
		return x.EdccaAirTimeFraction
	}
	return 0
}

type WifiAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermalThrottle           bool `protobuf:"varint,1,opt,name=thermal_throttle,json=thermalThrottle,proto3" json:"thermal_throttle,omitempty"`
	InstallPending            bool `protobuf:"varint,2,opt,name=install_pending,json=installPending,proto3" json:"install_pending,omitempty"`
	FreshlyFused              bool `protobuf:"varint,3,opt,name=freshly_fused,json=freshlyFused,proto3" json:"freshly_fused,omitempty"`
	LanEthSlowLink_10         bool `protobuf:"varint,4,opt,name=lan_eth_slow_link_10,json=lanEthSlowLink10,proto3" json:"lan_eth_slow_link_10,omitempty"`
	LanEthSlowLink_100        bool `protobuf:"varint,5,opt,name=lan_eth_slow_link_100,json=lanEthSlowLink100,proto3" json:"lan_eth_slow_link_100,omitempty"`
	WanEthPoorConnection      bool `protobuf:"varint,10,opt,name=wan_eth_poor_connection,json=wanEthPoorConnection,proto3" json:"wan_eth_poor_connection,omitempty"`
	MeshTopologyChangingOften bool `protobuf:"varint,11,opt,name=mesh_topology_changing_often,json=meshTopologyChangingOften,proto3" json:"mesh_topology_changing_often,omitempty"`
	MeshUnreliableBackhaul    bool `protobuf:"varint,12,opt,name=mesh_unreliable_backhaul,json=meshUnreliableBackhaul,proto3" json:"mesh_unreliable_backhaul,omitempty"`
	RadiusMissingProcess      bool `protobuf:"varint,13,opt,name=radius_missing_process,json=radiusMissingProcess,proto3" json:"radius_missing_process,omitempty"`
	EthSwitchError            bool `protobuf:"varint,14,opt,name=eth_switch_error,json=ethSwitchError,proto3" json:"eth_switch_error,omitempty"`
	PoeOnDishUnreachable      bool `protobuf:"varint,15,opt,name=poe_on_dish_unreachable,json=poeOnDishUnreachable,proto3" json:"poe_on_dish_unreachable,omitempty"`
	PoeFuseBlown              bool `protobuf:"varint,16,opt,name=poe_fuse_blown,json=poeFuseBlown,proto3" json:"poe_fuse_blown,omitempty"`
	PoeRouterOvercurrent      bool `protobuf:"varint,17,opt,name=poe_router_overcurrent,json=poeRouterOvercurrent,proto3" json:"poe_router_overcurrent,omitempty"`
	PoeOffCurrentNominal      bool `protobuf:"varint,18,opt,name=poe_off_current_nominal,json=poeOffCurrentNominal,proto3" json:"poe_off_current_nominal,omitempty"`
	PoeVinOvervoltage         bool `protobuf:"varint,19,opt,name=poe_vin_overvoltage,json=poeVinOvervoltage,proto3" json:"poe_vin_overvoltage,omitempty"`
	PoeVinUndervoltage        bool `protobuf:"varint,20,opt,name=poe_vin_undervoltage,json=poeVinUndervoltage,proto3" json:"poe_vin_undervoltage,omitempty"`
}

func (x *WifiAlerts) Reset() {
	*x = WifiAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAlerts) ProtoMessage() {}

func (x *WifiAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAlerts.ProtoReflect.Descriptor instead.
func (*WifiAlerts) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{32}
}

func (x *WifiAlerts) GetThermalThrottle() bool {
	if x != nil {
		return x.ThermalThrottle
	}
	return false
}

func (x *WifiAlerts) GetInstallPending() bool {
	if x != nil {
		return x.InstallPending
	}
	return false
}

func (x *WifiAlerts) GetFreshlyFused() bool {
	if x != nil {
		return x.FreshlyFused
	}
	return false
}

func (x *WifiAlerts) GetLanEthSlowLink_10() bool {
	if x != nil {
		return x.LanEthSlowLink_10
	}
	return false
}

func (x *WifiAlerts) GetLanEthSlowLink_100() bool {
	if x != nil {
		return x.LanEthSlowLink_100
	}
	return false
}

func (x *WifiAlerts) GetWanEthPoorConnection() bool {
	if x != nil {
		return x.WanEthPoorConnection
	}
	return false
}

func (x *WifiAlerts) GetMeshTopologyChangingOften() bool {
	if x != nil {
		return x.MeshTopologyChangingOften
	}
	return false
}

func (x *WifiAlerts) GetMeshUnreliableBackhaul() bool {
	if x != nil {
		return x.MeshUnreliableBackhaul
	}
	return false
}

func (x *WifiAlerts) GetRadiusMissingProcess() bool {
	if x != nil {
		return x.RadiusMissingProcess
	}
	return false
}

func (x *WifiAlerts) GetEthSwitchError() bool {
	if x != nil {
		return x.EthSwitchError
	}
	return false
}

func (x *WifiAlerts) GetPoeOnDishUnreachable() bool {
	if x != nil {
		return x.PoeOnDishUnreachable
	}
	return false
}

func (x *WifiAlerts) GetPoeFuseBlown() bool {
	if x != nil {
		return x.PoeFuseBlown
	}
	return false
}

func (x *WifiAlerts) GetPoeRouterOvercurrent() bool {
	if x != nil {
		return x.PoeRouterOvercurrent
	}
	return false
}

func (x *WifiAlerts) GetPoeOffCurrentNominal() bool {
	if x != nil {
		return x.PoeOffCurrentNominal
	}
	return false
}

func (x *WifiAlerts) GetPoeVinOvervoltage() bool {
	if x != nil {
		return x.PoeVinOvervoltage
	}
	return false
}

func (x *WifiAlerts) GetPoeVinUndervoltage() bool {
	if x != nil {
		return x.PoeVinUndervoltage
	}
	return false
}

type WifiGetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo           *DeviceInfo  `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	DeviceState          *DeviceState `protobuf:"bytes,4,opt,name=device_state,json=deviceState,proto3" json:"device_state,omitempty"`
	CaptivePortalEnabled bool         `protobuf:"varint,1,opt,name=captive_portal_enabled,json=captivePortalEnabled,proto3" json:"captive_portal_enabled,omitempty"`
	Ipv4WanAddress       string       `protobuf:"bytes,1003,opt,name=ipv4_wan_address,json=ipv4WanAddress,proto3" json:"ipv4_wan_address,omitempty"`
	Ipv6WanAddresses     []string     `protobuf:"bytes,1017,rep,name=ipv6_wan_addresses,json=ipv6WanAddresses,proto3" json:"ipv6_wan_addresses,omitempty"`
	PingDropRate         float32      `protobuf:"fixed32,1004,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingDropRate_5M      float32      `protobuf:"fixed32,1021,opt,name=ping_drop_rate_5m,json=pingDropRate5m,proto3" json:"ping_drop_rate_5m,omitempty"`
	PingLatencyMs        float32      `protobuf:"fixed32,1005,opt,name=ping_latency_ms,json=pingLatencyMs,proto3" json:"ping_latency_ms,omitempty"`
	DishPingDropRate     float32      `protobuf:"fixed32,1012,opt,name=dish_ping_drop_rate,json=dishPingDropRate,proto3" json:"dish_ping_drop_rate,omitempty"`
	DishPingDropRate_5M  float32      `protobuf:"fixed32,1018,opt,name=dish_ping_drop_rate_5m,json=dishPingDropRate5m,proto3" json:"dish_ping_drop_rate_5m,omitempty"`
	DishPingLatencyMs    float32      `protobuf:"fixed32,1013,opt,name=dish_ping_latency_ms,json=dishPingLatencyMs,proto3" json:"dish_ping_latency_ms,omitempty"`
	PopPingDropRate      float32      `protobuf:"fixed32,1014,opt,name=pop_ping_drop_rate,json=popPingDropRate,proto3" json:"pop_ping_drop_rate,omitempty"`
	PopPingDropRate_5M   float32      `protobuf:"fixed32,1020,opt,name=pop_ping_drop_rate_5m,json=popPingDropRate5m,proto3" json:"pop_ping_drop_rate_5m,omitempty"`
	PopPingLatencyMs     float32      `protobuf:"fixed32,1015,opt,name=pop_ping_latency_ms,json=popPingLatencyMs,proto3" json:"pop_ping_latency_ms,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Rf_2GhzStatus *WifiBandStatus `protobuf:"bytes,1008,opt,name=rf_2ghz_status,json=rf2ghzStatus,proto3" json:"rf_2ghz_status,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Rf_5GhzStatus       *WifiBandStatus `protobuf:"bytes,1009,opt,name=rf_5ghz_status,json=rf5ghzStatus,proto3" json:"rf_5ghz_status,omitempty"`
	Alerts              *WifiAlerts     `protobuf:"bytes,1010,opt,name=alerts,proto3" json:"alerts,omitempty"`
	IsAviation          bool            `protobuf:"varint,1011,opt,name=is_aviation,json=isAviation,proto3" json:"is_aviation,omitempty"`
	Config              *WifiConfig     `protobuf:"bytes,2000,opt,name=config,proto3" json:"config,omitempty"`
	Clients             []*WifiClient   `protobuf:"bytes,3000,rep,name=clients,proto3" json:"clients,omitempty"`
	HasClientIndex      bool            `protobuf:"varint,3001,opt,name=has_client_index,json=hasClientIndex,proto3" json:"has_client_index,omitempty"`
	ClientIndex         int32           `protobuf:"varint,3002,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	IsAviationConformed bool            `protobuf:"varint,1016,opt,name=is_aviation_conformed,json=isAviationConformed,proto3" json:"is_aviation_conformed,omitempty"`
	RadiusStats         *RadiusStatsMap `protobuf:"bytes,3003,opt,name=radius_stats,json=radiusStats,proto3" json:"radius_stats,omitempty"`
	DhcpServers         []*DhcpServer   `protobuf:"bytes,1019,rep,name=dhcp_servers,json=dhcpServers,proto3" json:"dhcp_servers,omitempty"`
	PoeStats            *PoeStats       `protobuf:"bytes,1022,opt,name=poe_stats,json=poeStats,proto3" json:"poe_stats,omitempty"`
	DishId              string          `protobuf:"bytes,1023,opt,name=dish_id,json=dishId,proto3" json:"dish_id,omitempty"`
	UtcNs               int64           `protobuf:"varint,1024,opt,name=utc_ns,json=utcNs,proto3" json:"utc_ns,omitempty"`
}

func (x *WifiGetStatusResponse) Reset() {
	*x = WifiGetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetStatusResponse) ProtoMessage() {}

func (x *WifiGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetStatusResponse.ProtoReflect.Descriptor instead.
func (*WifiGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{33}
}

func (x *WifiGetStatusResponse) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *WifiGetStatusResponse) GetDeviceState() *DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return nil
}

func (x *WifiGetStatusResponse) GetCaptivePortalEnabled() bool {
	if x != nil {
		return x.CaptivePortalEnabled
	}
	return false
}

func (x *WifiGetStatusResponse) GetIpv4WanAddress() string {
	if x != nil {
		return x.Ipv4WanAddress
	}
	return ""
}

func (x *WifiGetStatusResponse) GetIpv6WanAddresses() []string {
	if x != nil {
		return x.Ipv6WanAddresses
	}
	return nil
}

func (x *WifiGetStatusResponse) GetPingDropRate() float32 {
	if x != nil {
		return x.PingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPingDropRate_5M() float32 {
	if x != nil {
		return x.PingDropRate_5M
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPingLatencyMs() float32 {
	if x != nil {
		return x.PingLatencyMs
	}
	return 0
}

func (x *WifiGetStatusResponse) GetDishPingDropRate() float32 {
	if x != nil {
		return x.DishPingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetDishPingDropRate_5M() float32 {
	if x != nil {
		return x.DishPingDropRate_5M
	}
	return 0
}

func (x *WifiGetStatusResponse) GetDishPingLatencyMs() float32 {
	if x != nil {
		return x.DishPingLatencyMs
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPopPingDropRate() float32 {
	if x != nil {
		return x.PopPingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPopPingDropRate_5M() float32 {
	if x != nil {
		return x.PopPingDropRate_5M
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPopPingLatencyMs() float32 {
	if x != nil {
		return x.PopPingLatencyMs
	}
	return 0
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *WifiGetStatusResponse) GetRf_2GhzStatus() *WifiBandStatus {
	if x != nil {
		return x.Rf_2GhzStatus
	}
	return nil
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *WifiGetStatusResponse) GetRf_5GhzStatus() *WifiBandStatus {
	if x != nil {
		return x.Rf_5GhzStatus
	}
	return nil
}

func (x *WifiGetStatusResponse) GetAlerts() *WifiAlerts {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *WifiGetStatusResponse) GetIsAviation() bool {
	if x != nil {
		return x.IsAviation
	}
	return false
}

func (x *WifiGetStatusResponse) GetConfig() *WifiConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WifiGetStatusResponse) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *WifiGetStatusResponse) GetHasClientIndex() bool {
	if x != nil {
		return x.HasClientIndex
	}
	return false
}

func (x *WifiGetStatusResponse) GetClientIndex() int32 {
	if x != nil {
		return x.ClientIndex
	}
	return 0
}

func (x *WifiGetStatusResponse) GetIsAviationConformed() bool {
	if x != nil {
		return x.IsAviationConformed
	}
	return false
}

func (x *WifiGetStatusResponse) GetRadiusStats() *RadiusStatsMap {
	if x != nil {
		return x.RadiusStats
	}
	return nil
}

func (x *WifiGetStatusResponse) GetDhcpServers() []*DhcpServer {
	if x != nil {
		return x.DhcpServers
	}
	return nil
}

func (x *WifiGetStatusResponse) GetPoeStats() *PoeStats {
	if x != nil {
		return x.PoeStats
	}
	return nil
}

func (x *WifiGetStatusResponse) GetDishId() string {
	if x != nil {
		return x.DishId
	}
	return ""
}

func (x *WifiGetStatusResponse) GetUtcNs() int64 {
	if x != nil {
		return x.UtcNs
	}
	return 0
}

type WifiAuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *SignedData `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *WifiAuthenticateRequest) Reset() {
	*x = WifiAuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAuthenticateRequest) ProtoMessage() {}

func (x *WifiAuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAuthenticateRequest.ProtoReflect.Descriptor instead.
func (*WifiAuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{34}
}

func (x *WifiAuthenticateRequest) GetChallenge() *SignedData {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type WifiAuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wifi *ChallengeResponse `protobuf:"bytes,1,opt,name=wifi,proto3" json:"wifi,omitempty"`
	Dish *ChallengeResponse `protobuf:"bytes,2,opt,name=dish,proto3" json:"dish,omitempty"`
}

func (x *WifiAuthenticateResponse) Reset() {
	*x = WifiAuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAuthenticateResponse) ProtoMessage() {}

func (x *WifiAuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAuthenticateResponse.ProtoReflect.Descriptor instead.
func (*WifiAuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{35}
}

func (x *WifiAuthenticateResponse) GetWifi() *ChallengeResponse {
	if x != nil {
		return x.Wifi
	}
	return nil
}

func (x *WifiAuthenticateResponse) GetDish() *ChallengeResponse {
	if x != nil {
		return x.Dish
	}
	return nil
}

type WifiAccountBondingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DishId          string `protobuf:"bytes,1,opt,name=dish_id,json=dishId,proto3" json:"dish_id,omitempty"`
	IsRepeater      bool   `protobuf:"varint,2,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	HardwareVersion string `protobuf:"bytes,3,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
}

func (x *WifiAccountBondingEvent) Reset() {
	*x = WifiAccountBondingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAccountBondingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAccountBondingEvent) ProtoMessage() {}

func (x *WifiAccountBondingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAccountBondingEvent.ProtoReflect.Descriptor instead.
func (*WifiAccountBondingEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{36}
}

func (x *WifiAccountBondingEvent) GetDishId() string {
	if x != nil {
		return x.DishId
	}
	return ""
}

func (x *WifiAccountBondingEvent) GetIsRepeater() bool {
	if x != nil {
		return x.IsRepeater
	}
	return false
}

func (x *WifiAccountBondingEvent) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

type WifiNewPeerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *WifiNewPeerEvent) Reset() {
	*x = WifiNewPeerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNewPeerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNewPeerEvent) ProtoMessage() {}

func (x *WifiNewPeerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNewPeerEvent.ProtoReflect.Descriptor instead.
func (*WifiNewPeerEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{37}
}

func (x *WifiNewPeerEvent) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type PingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyMeanMs    float32 `protobuf:"fixed32,1,opt,name=latency_mean_ms,json=latencyMeanMs,proto3" json:"latency_mean_ms,omitempty"`
	LatencyStddevMs  float32 `protobuf:"fixed32,2,opt,name=latency_stddev_ms,json=latencyStddevMs,proto3" json:"latency_stddev_ms,omitempty"`
	LatencyMeanMs_5M float32 `protobuf:"fixed32,3,opt,name=latency_mean_ms_5m,json=latencyMeanMs5m,proto3" json:"latency_mean_ms_5m,omitempty"`
	LatencyMeanMs_1H float32 `protobuf:"fixed32,4,opt,name=latency_mean_ms_1h,json=latencyMeanMs1h,proto3" json:"latency_mean_ms_1h,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	LatencyMeanMs_1D            float32 `protobuf:"fixed32,5,opt,name=latency_mean_ms_1d,json=latencyMeanMs1d,proto3" json:"latency_mean_ms_1d,omitempty"`
	DropRate                    float32 `protobuf:"fixed32,6,opt,name=drop_rate,json=dropRate,proto3" json:"drop_rate,omitempty"`
	DropRate_5M                 float32 `protobuf:"fixed32,7,opt,name=drop_rate_5m,json=dropRate5m,proto3" json:"drop_rate_5m,omitempty"`
	DropRate_1H                 float32 `protobuf:"fixed32,8,opt,name=drop_rate_1h,json=dropRate1h,proto3" json:"drop_rate_1h,omitempty"`
	DropRate_1D                 float32 `protobuf:"fixed32,9,opt,name=drop_rate_1d,json=dropRate1d,proto3" json:"drop_rate_1d,omitempty"`
	SecondsSinceLastSuccess     float32 `protobuf:"fixed32,10,opt,name=seconds_since_last_success,json=secondsSinceLastSuccess,proto3" json:"seconds_since_last_success,omitempty"`
	SecondsSinceLast_1SOutage   float32 `protobuf:"fixed32,11,opt,name=seconds_since_last_1s_outage,json=secondsSinceLast1sOutage,proto3" json:"seconds_since_last_1s_outage,omitempty"`
	SecondsSinceLast_2SOutage   float32 `protobuf:"fixed32,15,opt,name=seconds_since_last_2s_outage,json=secondsSinceLast2sOutage,proto3" json:"seconds_since_last_2s_outage,omitempty"`
	SecondsSinceLast_5SOutage   float32 `protobuf:"fixed32,12,opt,name=seconds_since_last_5s_outage,json=secondsSinceLast5sOutage,proto3" json:"seconds_since_last_5s_outage,omitempty"`
	SecondsSinceLast_15SOutage  float32 `protobuf:"fixed32,18,opt,name=seconds_since_last_15s_outage,json=secondsSinceLast15sOutage,proto3" json:"seconds_since_last_15s_outage,omitempty"`
	SecondsSinceLast_60SOutage  float32 `protobuf:"fixed32,19,opt,name=seconds_since_last_60s_outage,json=secondsSinceLast60sOutage,proto3" json:"seconds_since_last_60s_outage,omitempty"`
	SecondsSinceLast_300SOutage float32 `protobuf:"fixed32,20,opt,name=seconds_since_last_300s_outage,json=secondsSinceLast300sOutage,proto3" json:"seconds_since_last_300s_outage,omitempty"`
	HappyHours_1S_1D            float32 `protobuf:"fixed32,13,opt,name=happy_hours_1s_1d,json=happyHours1s1d,proto3" json:"happy_hours_1s_1d,omitempty"`
	HappyHours_2S_1D            float32 `protobuf:"fixed32,16,opt,name=happy_hours_2s_1d,json=happyHours2s1d,proto3" json:"happy_hours_2s_1d,omitempty"`
	HappyHours_5S_1D            float32 `protobuf:"fixed32,14,opt,name=happy_hours_5s_1d,json=happyHours5s1d,proto3" json:"happy_hours_5s_1d,omitempty"`
}

func (x *PingMetrics) Reset() {
	*x = PingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMetrics) ProtoMessage() {}

func (x *PingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMetrics.ProtoReflect.Descriptor instead.
func (*PingMetrics) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{38}
}

func (x *PingMetrics) GetLatencyMeanMs() float32 {
	if x != nil {
		return x.LatencyMeanMs
	}
	return 0
}

func (x *PingMetrics) GetLatencyStddevMs() float32 {
	if x != nil {
		return x.LatencyStddevMs
	}
	return 0
}

func (x *PingMetrics) GetLatencyMeanMs_5M() float32 {
	if x != nil {
		return x.LatencyMeanMs_5M
	}
	return 0
}

func (x *PingMetrics) GetLatencyMeanMs_1H() float32 {
	if x != nil {
		return x.LatencyMeanMs_1H
	}
	return 0
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *PingMetrics) GetLatencyMeanMs_1D() float32 {
	if x != nil {
		return x.LatencyMeanMs_1D
	}
	return 0
}

func (x *PingMetrics) GetDropRate() float32 {
	if x != nil {
		return x.DropRate
	}
	return 0
}

func (x *PingMetrics) GetDropRate_5M() float32 {
	if x != nil {
		return x.DropRate_5M
	}
	return 0
}

func (x *PingMetrics) GetDropRate_1H() float32 {
	if x != nil {
		return x.DropRate_1H
	}
	return 0
}

func (x *PingMetrics) GetDropRate_1D() float32 {
	if x != nil {
		return x.DropRate_1D
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLastSuccess() float32 {
	if x != nil {
		return x.SecondsSinceLastSuccess
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_1SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_1SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_2SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_2SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_5SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_5SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_15SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_15SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_60SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_60SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_300SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_300SOutage
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_1S_1D() float32 {
	if x != nil {
		return x.HappyHours_1S_1D
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_2S_1D() float32 {
	if x != nil {
		return x.HappyHours_2S_1D
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_5S_1D() float32 {
	if x != nil {
		return x.HappyHours_5S_1D
	}
	return 0
}

type WifiGetPingMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetPingMetricsRequest) Reset() {
	*x = WifiGetPingMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPingMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPingMetricsRequest) ProtoMessage() {}

func (x *WifiGetPingMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPingMetricsRequest.ProtoReflect.Descriptor instead.
func (*WifiGetPingMetricsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{39}
}

type WifiGetPingMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Internet *PingMetrics `protobuf:"bytes,1,opt,name=internet,proto3" json:"internet,omitempty"`
}

func (x *WifiGetPingMetricsResponse) Reset() {
	*x = WifiGetPingMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPingMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPingMetricsResponse) ProtoMessage() {}

func (x *WifiGetPingMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPingMetricsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetPingMetricsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{40}
}

func (x *WifiGetPingMetricsResponse) GetInternet() *PingMetrics {
	if x != nil {
		return x.Internet
	}
	return nil
}

type WifiNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Band              WifiNetwork_Band `protobuf:"varint,1,opt,name=band,proto3,enum=SpaceX.API.Device.WifiNetwork_Band" json:"band,omitempty"`
	Ssid              string           `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Channel           uint32           `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	EncryptionTypeStr string           `protobuf:"bytes,4,opt,name=encryption_type_str,json=encryptionTypeStr,proto3" json:"encryption_type_str,omitempty"`
}

func (x *WifiNetwork) Reset() {
	*x = WifiNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNetwork) ProtoMessage() {}

func (x *WifiNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNetwork.ProtoReflect.Descriptor instead.
func (*WifiNetwork) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{41}
}

func (x *WifiNetwork) GetBand() WifiNetwork_Band {
	if x != nil {
		return x.Band
	}
	return WifiNetwork_WIFI_UNKNOWN
}

func (x *WifiNetwork) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiNetwork) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *WifiNetwork) GetEncryptionTypeStr() string {
	if x != nil {
		return x.EncryptionTypeStr
	}
	return ""
}

type WifiPersistentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoryResetButton               *WifiPersistentStats_Event `protobuf:"bytes,1,opt,name=factory_reset_button,json=factoryResetButton,proto3" json:"factory_reset_button,omitempty"`
	FactoryResetPlugUnplug           *WifiPersistentStats_Event `protobuf:"bytes,2,opt,name=factory_reset_plug_unplug,json=factoryResetPlugUnplug,proto3" json:"factory_reset_plug_unplug,omitempty"`
	FactoryResetCommand              *WifiPersistentStats_Event `protobuf:"bytes,3,opt,name=factory_reset_command,json=factoryResetCommand,proto3" json:"factory_reset_command,omitempty"`
	FactoryResetFailedLoadWifiConfig *WifiPersistentStats_Event `protobuf:"bytes,4,opt,name=factory_reset_failed_load_wifi_config,json=factoryResetFailedLoadWifiConfig,proto3" json:"factory_reset_failed_load_wifi_config,omitempty"`
	RebootFromSoftwareUpdate         *WifiPersistentStats_Event `protobuf:"bytes,5,opt,name=reboot_from_software_update,json=rebootFromSoftwareUpdate,proto3" json:"reboot_from_software_update,omitempty"`
}

func (x *WifiPersistentStats) Reset() {
	*x = WifiPersistentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiPersistentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiPersistentStats) ProtoMessage() {}

func (x *WifiPersistentStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiPersistentStats.ProtoReflect.Descriptor instead.
func (*WifiPersistentStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{42}
}

func (x *WifiPersistentStats) GetFactoryResetButton() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetButton
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetPlugUnplug() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetPlugUnplug
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetCommand() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetCommand
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetFailedLoadWifiConfig() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetFailedLoadWifiConfig
	}
	return nil
}

func (x *WifiPersistentStats) GetRebootFromSoftwareUpdate() *WifiPersistentStats_Event {
	if x != nil {
		return x.RebootFromSoftwareUpdate
	}
	return nil
}

type WifiGetPersistentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *WifiPersistentStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *WifiGetPersistentStatsResponse) Reset() {
	*x = WifiGetPersistentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPersistentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPersistentStatsResponse) ProtoMessage() {}

func (x *WifiGetPersistentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPersistentStatsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetPersistentStatsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{43}
}

func (x *WifiGetPersistentStatsResponse) GetStats() *WifiPersistentStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type RadioStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Band          WifiConfig_Band           `protobuf:"varint,1,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	RxStats       *NetworkInterface_RxStats `protobuf:"bytes,2,opt,name=rx_stats,json=rxStats,proto3" json:"rx_stats,omitempty"`
	TxStats       *NetworkInterface_TxStats `protobuf:"bytes,3,opt,name=tx_stats,json=txStats,proto3" json:"tx_stats,omitempty"`
	ThermalStatus *RadioStats_ThermalStatus `protobuf:"bytes,4,opt,name=thermal_status,json=thermalStatus,proto3" json:"thermal_status,omitempty"`
	AntennaStatus *RadioStats_AntennaStatus `protobuf:"bytes,5,opt,name=antenna_status,json=antennaStatus,proto3" json:"antenna_status,omitempty"`
}

func (x *RadioStats) Reset() {
	*x = RadioStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStats) ProtoMessage() {}

func (x *RadioStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStats.ProtoReflect.Descriptor instead.
func (*RadioStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{44}
}

func (x *RadioStats) GetBand() WifiConfig_Band {
	if x != nil {
		return x.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (x *RadioStats) GetRxStats() *NetworkInterface_RxStats {
	if x != nil {
		return x.RxStats
	}
	return nil
}

func (x *RadioStats) GetTxStats() *NetworkInterface_TxStats {
	if x != nil {
		return x.TxStats
	}
	return nil
}

func (x *RadioStats) GetThermalStatus() *RadioStats_ThermalStatus {
	if x != nil {
		return x.ThermalStatus
	}
	return nil
}

func (x *RadioStats) GetAntennaStatus() *RadioStats_AntennaStatus {
	if x != nil {
		return x.AntennaStatus
	}
	return nil
}

type StarlinkRoutersHourlyMetricsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                     *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimestampDate                          *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=timestamp_date,json=timestampDate,proto3" json:"timestamp_date,omitempty"`
	TimestampHour                          *wrapperspb.UInt32Value   `protobuf:"bytes,3,opt,name=timestamp_hour,json=timestampHour,proto3" json:"timestamp_hour,omitempty"`
	Timestamp                              *telemetron.TimestampInfo `protobuf:"bytes,10000,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SysHwGen                               *wrapperspb.UInt32Value   `protobuf:"bytes,4,opt,name=sys_hw_gen,json=sysHwGen,proto3" json:"sys_hw_gen,omitempty"`
	SysSw                                  *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=sys_sw,json=sysSw,proto3" json:"sys_sw,omitempty"`
	SysCountry                             *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=sys_country,json=sysCountry,proto3" json:"sys_country,omitempty"`
	SysIsDev                               *wrapperspb.BoolValue     `protobuf:"bytes,7,opt,name=sys_is_dev,json=sysIsDev,proto3" json:"sys_is_dev,omitempty"`
	SysAllocFds                            *wrapperspb.UInt32Value   `protobuf:"bytes,8,opt,name=sys_alloc_fds,json=sysAllocFds,proto3" json:"sys_alloc_fds,omitempty"`
	SysCpuUsage                            *wrapperspb.FloatValue    `protobuf:"bytes,9,opt,name=sys_cpu_usage,json=sysCpuUsage,proto3" json:"sys_cpu_usage,omitempty"`
	SysMemFreeKb                           *wrapperspb.FloatValue    `protobuf:"bytes,10,opt,name=sys_mem_free_kb,json=sysMemFreeKb,proto3" json:"sys_mem_free_kb,omitempty"`
	SysBootcount                           *wrapperspb.Int32Value    `protobuf:"bytes,11,opt,name=sys_bootcount,json=sysBootcount,proto3" json:"sys_bootcount,omitempty"`
	SysPartitionsEqual                     *wrapperspb.BoolValue     `protobuf:"bytes,12,opt,name=sys_partitions_equal,json=sysPartitionsEqual,proto3" json:"sys_partitions_equal,omitempty"`
	SysUptimeSeconds                       *wrapperspb.UInt32Value   `protobuf:"bytes,13,opt,name=sys_uptime_seconds,json=sysUptimeSeconds,proto3" json:"sys_uptime_seconds,omitempty"`
	SysAntiRollbackVersion                 *wrapperspb.Int32Value    `protobuf:"bytes,14,opt,name=sys_anti_rollback_version,json=sysAntiRollbackVersion,proto3" json:"sys_anti_rollback_version,omitempty"`
	SysIsWitl                              *wrapperspb.BoolValue     `protobuf:"bytes,15,opt,name=sys_is_witl,json=sysIsWitl,proto3" json:"sys_is_witl,omitempty"`
	SysIsAviationConformed                 *wrapperspb.BoolValue     `protobuf:"bytes,16,opt,name=sys_is_aviation_conformed,json=sysIsAviationConformed,proto3" json:"sys_is_aviation_conformed,omitempty"`
	SysUbiMaxEc                            *wrapperspb.UInt32Value   `protobuf:"bytes,17,opt,name=sys_ubi_max_ec,json=sysUbiMaxEc,proto3" json:"sys_ubi_max_ec,omitempty"`
	SysUbiBadPeb                           *wrapperspb.UInt32Value   `protobuf:"bytes,18,opt,name=sys_ubi_bad_peb,json=sysUbiBadPeb,proto3" json:"sys_ubi_bad_peb,omitempty"`
	SysBoardRev                            *wrapperspb.UInt32Value   `protobuf:"bytes,19,opt,name=sys_board_rev,json=sysBoardRev,proto3" json:"sys_board_rev,omitempty"`
	Radios_2GhzChannel                     *wrapperspb.UInt32Value   `protobuf:"bytes,100,opt,name=radios_2ghz_channel,json=radios2ghzChannel,proto3" json:"radios_2ghz_channel,omitempty"`
	Radios_2GhzAntenna1Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,101,opt,name=radios_2ghz_antenna1_rssi,json=radios2ghzAntenna1Rssi,proto3" json:"radios_2ghz_antenna1_rssi,omitempty"`
	Radios_2GhzAntenna2Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,102,opt,name=radios_2ghz_antenna2_rssi,json=radios2ghzAntenna2Rssi,proto3" json:"radios_2ghz_antenna2_rssi,omitempty"`
	Radios_2GhzAntenna3Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,103,opt,name=radios_2ghz_antenna3_rssi,json=radios2ghzAntenna3Rssi,proto3" json:"radios_2ghz_antenna3_rssi,omitempty"`
	Radios_2GhzAntenna4Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,197,opt,name=radios_2ghz_antenna4_rssi,json=radios2ghzAntenna4Rssi,proto3" json:"radios_2ghz_antenna4_rssi,omitempty"`
	Radios_2GhzAntenna1Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,157,opt,name=radios_2ghz_antenna1_tssi,json=radios2ghzAntenna1Tssi,proto3" json:"radios_2ghz_antenna1_tssi,omitempty"`
	Radios_2GhzAntenna2Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,158,opt,name=radios_2ghz_antenna2_tssi,json=radios2ghzAntenna2Tssi,proto3" json:"radios_2ghz_antenna2_tssi,omitempty"`
	Radios_2GhzAntenna3Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,159,opt,name=radios_2ghz_antenna3_tssi,json=radios2ghzAntenna3Tssi,proto3" json:"radios_2ghz_antenna3_tssi,omitempty"`
	Radios_2GhzAntenna4Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,160,opt,name=radios_2ghz_antenna4_tssi,json=radios2ghzAntenna4Tssi,proto3" json:"radios_2ghz_antenna4_tssi,omitempty"`
	Radios_2GhzIfaceCount                  *wrapperspb.UInt32Value   `protobuf:"bytes,104,opt,name=radios_2ghz_iface_count,json=radios2ghzIfaceCount,proto3" json:"radios_2ghz_iface_count,omitempty"`
	Radios_2GhzChanBusyFraction            *wrapperspb.FloatValue    `protobuf:"bytes,105,opt,name=radios_2ghz_chan_busy_fraction,json=radios2ghzChanBusyFraction,proto3" json:"radios_2ghz_chan_busy_fraction,omitempty"`
	Radios_2GhzEdccaFraction               *wrapperspb.FloatValue    `protobuf:"bytes,106,opt,name=radios_2ghz_edcca_fraction,json=radios2ghzEdccaFraction,proto3" json:"radios_2ghz_edcca_fraction,omitempty"`
	Radios_2GhzOverlappingBssFraction      *wrapperspb.FloatValue    `protobuf:"bytes,107,opt,name=radios_2ghz_overlapping_bss_fraction,json=radios2ghzOverlappingBssFraction,proto3" json:"radios_2ghz_overlapping_bss_fraction,omitempty"`
	Radios_2GhzRxBytes                     *wrapperspb.Int64Value    `protobuf:"bytes,108,opt,name=radios_2ghz_rx_bytes,json=radios2ghzRxBytes,proto3" json:"radios_2ghz_rx_bytes,omitempty"`
	Radios_2GhzRxPackets                   *wrapperspb.Int64Value    `protobuf:"bytes,109,opt,name=radios_2ghz_rx_packets,json=radios2ghzRxPackets,proto3" json:"radios_2ghz_rx_packets,omitempty"`
	Radios_2GhzRxErrors                    *wrapperspb.Int64Value    `protobuf:"bytes,110,opt,name=radios_2ghz_rx_errors,json=radios2ghzRxErrors,proto3" json:"radios_2ghz_rx_errors,omitempty"`
	Radios_2GhzRxFrameErrors               *wrapperspb.Int64Value    `protobuf:"bytes,111,opt,name=radios_2ghz_rx_frame_errors,json=radios2ghzRxFrameErrors,proto3" json:"radios_2ghz_rx_frame_errors,omitempty"`
	Radios_2GhzRxPacketErrorRate           *wrapperspb.FloatValue    `protobuf:"bytes,112,opt,name=radios_2ghz_rx_packet_error_rate,json=radios2ghzRxPacketErrorRate,proto3" json:"radios_2ghz_rx_packet_error_rate,omitempty"`
	Radios_2GhzRxAirtimeFraction           *wrapperspb.FloatValue    `protobuf:"bytes,113,opt,name=radios_2ghz_rx_airtime_fraction,json=radios2ghzRxAirtimeFraction,proto3" json:"radios_2ghz_rx_airtime_fraction,omitempty"`
	Radios_2GhzTxBytes                     *wrapperspb.Int64Value    `protobuf:"bytes,114,opt,name=radios_2ghz_tx_bytes,json=radios2ghzTxBytes,proto3" json:"radios_2ghz_tx_bytes,omitempty"`
	Radios_2GhzTxPackets                   *wrapperspb.Int64Value    `protobuf:"bytes,115,opt,name=radios_2ghz_tx_packets,json=radios2ghzTxPackets,proto3" json:"radios_2ghz_tx_packets,omitempty"`
	Radios_2GhzTxErrors                    *wrapperspb.Int64Value    `protobuf:"bytes,116,opt,name=radios_2ghz_tx_errors,json=radios2ghzTxErrors,proto3" json:"radios_2ghz_tx_errors,omitempty"`
	Radios_2GhzTxPacketErrorRate           *wrapperspb.FloatValue    `protobuf:"bytes,117,opt,name=radios_2ghz_tx_packet_error_rate,json=radios2ghzTxPacketErrorRate,proto3" json:"radios_2ghz_tx_packet_error_rate,omitempty"`
	Radios_2GhzTxAirtimeFraction           *wrapperspb.FloatValue    `protobuf:"bytes,118,opt,name=radios_2ghz_tx_airtime_fraction,json=radios2ghzTxAirtimeFraction,proto3" json:"radios_2ghz_tx_airtime_fraction,omitempty"`
	Radios_5GhzChannel                     *wrapperspb.UInt32Value   `protobuf:"bytes,119,opt,name=radios_5ghz_channel,json=radios5ghzChannel,proto3" json:"radios_5ghz_channel,omitempty"`
	Radios_5GhzAntenna1Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,120,opt,name=radios_5ghz_antenna1_rssi,json=radios5ghzAntenna1Rssi,proto3" json:"radios_5ghz_antenna1_rssi,omitempty"`
	Radios_5GhzAntenna2Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,121,opt,name=radios_5ghz_antenna2_rssi,json=radios5ghzAntenna2Rssi,proto3" json:"radios_5ghz_antenna2_rssi,omitempty"`
	Radios_5GhzAntenna3Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,122,opt,name=radios_5ghz_antenna3_rssi,json=radios5ghzAntenna3Rssi,proto3" json:"radios_5ghz_antenna3_rssi,omitempty"`
	Radios_5GhzAntenna4Rssi                *wrapperspb.FloatValue    `protobuf:"bytes,198,opt,name=radios_5ghz_antenna4_rssi,json=radios5ghzAntenna4Rssi,proto3" json:"radios_5ghz_antenna4_rssi,omitempty"`
	Radios_5GhzAntenna1Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,161,opt,name=radios_5ghz_antenna1_tssi,json=radios5ghzAntenna1Tssi,proto3" json:"radios_5ghz_antenna1_tssi,omitempty"`
	Radios_5GhzAntenna2Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,162,opt,name=radios_5ghz_antenna2_tssi,json=radios5ghzAntenna2Tssi,proto3" json:"radios_5ghz_antenna2_tssi,omitempty"`
	Radios_5GhzAntenna3Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,163,opt,name=radios_5ghz_antenna3_tssi,json=radios5ghzAntenna3Tssi,proto3" json:"radios_5ghz_antenna3_tssi,omitempty"`
	Radios_5GhzAntenna4Tssi                *wrapperspb.FloatValue    `protobuf:"bytes,164,opt,name=radios_5ghz_antenna4_tssi,json=radios5ghzAntenna4Tssi,proto3" json:"radios_5ghz_antenna4_tssi,omitempty"`
	Radios_5GhzIfaceCount                  *wrapperspb.UInt32Value   `protobuf:"bytes,123,opt,name=radios_5ghz_iface_count,json=radios5ghzIfaceCount,proto3" json:"radios_5ghz_iface_count,omitempty"`
	Radios_5GhzChanBusyFraction            *wrapperspb.FloatValue    `protobuf:"bytes,124,opt,name=radios_5ghz_chan_busy_fraction,json=radios5ghzChanBusyFraction,proto3" json:"radios_5ghz_chan_busy_fraction,omitempty"`
	Radios_5GhzEdccaFraction               *wrapperspb.FloatValue    `protobuf:"bytes,125,opt,name=radios_5ghz_edcca_fraction,json=radios5ghzEdccaFraction,proto3" json:"radios_5ghz_edcca_fraction,omitempty"`
	Radios_5GhzOverlappingBssFraction      *wrapperspb.FloatValue    `protobuf:"bytes,126,opt,name=radios_5ghz_overlapping_bss_fraction,json=radios5ghzOverlappingBssFraction,proto3" json:"radios_5ghz_overlapping_bss_fraction,omitempty"`
	Radios_5GhzRxBytes                     *wrapperspb.Int64Value    `protobuf:"bytes,127,opt,name=radios_5ghz_rx_bytes,json=radios5ghzRxBytes,proto3" json:"radios_5ghz_rx_bytes,omitempty"`
	Radios_5GhzRxPackets                   *wrapperspb.Int64Value    `protobuf:"bytes,128,opt,name=radios_5ghz_rx_packets,json=radios5ghzRxPackets,proto3" json:"radios_5ghz_rx_packets,omitempty"`
	Radios_5GhzRxErrors                    *wrapperspb.Int64Value    `protobuf:"bytes,129,opt,name=radios_5ghz_rx_errors,json=radios5ghzRxErrors,proto3" json:"radios_5ghz_rx_errors,omitempty"`
	Radios_5GhzRxFrameErrors               *wrapperspb.Int64Value    `protobuf:"bytes,130,opt,name=radios_5ghz_rx_frame_errors,json=radios5ghzRxFrameErrors,proto3" json:"radios_5ghz_rx_frame_errors,omitempty"`
	Radios_5GhzRxPacketErrorRate           *wrapperspb.FloatValue    `protobuf:"bytes,131,opt,name=radios_5ghz_rx_packet_error_rate,json=radios5ghzRxPacketErrorRate,proto3" json:"radios_5ghz_rx_packet_error_rate,omitempty"`
	Radios_5GhzRxAirtimeFraction           *wrapperspb.FloatValue    `protobuf:"bytes,132,opt,name=radios_5ghz_rx_airtime_fraction,json=radios5ghzRxAirtimeFraction,proto3" json:"radios_5ghz_rx_airtime_fraction,omitempty"`
	Radios_5GhzTxBytes                     *wrapperspb.Int64Value    `protobuf:"bytes,133,opt,name=radios_5ghz_tx_bytes,json=radios5ghzTxBytes,proto3" json:"radios_5ghz_tx_bytes,omitempty"`
	Radios_5GhzTxPackets                   *wrapperspb.Int64Value    `protobuf:"bytes,134,opt,name=radios_5ghz_tx_packets,json=radios5ghzTxPackets,proto3" json:"radios_5ghz_tx_packets,omitempty"`
	Radios_5GhzTxErrors                    *wrapperspb.Int64Value    `protobuf:"bytes,135,opt,name=radios_5ghz_tx_errors,json=radios5ghzTxErrors,proto3" json:"radios_5ghz_tx_errors,omitempty"`
	Radios_5GhzTxPacketErrorRate           *wrapperspb.FloatValue    `protobuf:"bytes,136,opt,name=radios_5ghz_tx_packet_error_rate,json=radios5ghzTxPacketErrorRate,proto3" json:"radios_5ghz_tx_packet_error_rate,omitempty"`
	Radios_5GhzTxAirtimeFraction           *wrapperspb.FloatValue    `protobuf:"bytes,137,opt,name=radios_5ghz_tx_airtime_fraction,json=radios5ghzTxAirtimeFraction,proto3" json:"radios_5ghz_tx_airtime_fraction,omitempty"`
	Radios_5GhzHighChannel                 *wrapperspb.UInt32Value   `protobuf:"bytes,138,opt,name=radios_5ghz_high_channel,json=radios5ghzHighChannel,proto3" json:"radios_5ghz_high_channel,omitempty"`
	Radios_5GhzHighAntenna1Rssi            *wrapperspb.FloatValue    `protobuf:"bytes,139,opt,name=radios_5ghz_high_antenna1_rssi,json=radios5ghzHighAntenna1Rssi,proto3" json:"radios_5ghz_high_antenna1_rssi,omitempty"`
	Radios_5GhzHighAntenna2Rssi            *wrapperspb.FloatValue    `protobuf:"bytes,140,opt,name=radios_5ghz_high_antenna2_rssi,json=radios5ghzHighAntenna2Rssi,proto3" json:"radios_5ghz_high_antenna2_rssi,omitempty"`
	Radios_5GhzHighAntenna3Rssi            *wrapperspb.FloatValue    `protobuf:"bytes,141,opt,name=radios_5ghz_high_antenna3_rssi,json=radios5ghzHighAntenna3Rssi,proto3" json:"radios_5ghz_high_antenna3_rssi,omitempty"`
	Radios_5GhzHighAntenna4Rssi            *wrapperspb.FloatValue    `protobuf:"bytes,199,opt,name=radios_5ghz_high_antenna4_rssi,json=radios5ghzHighAntenna4Rssi,proto3" json:"radios_5ghz_high_antenna4_rssi,omitempty"`
	Radios_5GhzHighAntenna1Tssi            *wrapperspb.FloatValue    `protobuf:"bytes,165,opt,name=radios_5ghz_high_antenna1_tssi,json=radios5ghzHighAntenna1Tssi,proto3" json:"radios_5ghz_high_antenna1_tssi,omitempty"`
	Radios_5GhzHighAntenna2Tssi            *wrapperspb.FloatValue    `protobuf:"bytes,166,opt,name=radios_5ghz_high_antenna2_tssi,json=radios5ghzHighAntenna2Tssi,proto3" json:"radios_5ghz_high_antenna2_tssi,omitempty"`
	Radios_5GhzHighAntenna3Tssi            *wrapperspb.FloatValue    `protobuf:"bytes,167,opt,name=radios_5ghz_high_antenna3_tssi,json=radios5ghzHighAntenna3Tssi,proto3" json:"radios_5ghz_high_antenna3_tssi,omitempty"`
	Radios_5GhzHighAntenna4Tssi            *wrapperspb.FloatValue    `protobuf:"bytes,168,opt,name=radios_5ghz_high_antenna4_tssi,json=radios5ghzHighAntenna4Tssi,proto3" json:"radios_5ghz_high_antenna4_tssi,omitempty"`
	Radios_5GhzHighIfaceCount              *wrapperspb.UInt32Value   `protobuf:"bytes,142,opt,name=radios_5ghz_high_iface_count,json=radios5ghzHighIfaceCount,proto3" json:"radios_5ghz_high_iface_count,omitempty"`
	Radios_5GhzHighChanBusyFraction        *wrapperspb.FloatValue    `protobuf:"bytes,143,opt,name=radios_5ghz_high_chan_busy_fraction,json=radios5ghzHighChanBusyFraction,proto3" json:"radios_5ghz_high_chan_busy_fraction,omitempty"`
	Radios_5GhzHighEdccaFraction           *wrapperspb.FloatValue    `protobuf:"bytes,144,opt,name=radios_5ghz_high_edcca_fraction,json=radios5ghzHighEdccaFraction,proto3" json:"radios_5ghz_high_edcca_fraction,omitempty"`
	Radios_5GhzHighOverlappingBssFraction  *wrapperspb.FloatValue    `protobuf:"bytes,145,opt,name=radios_5ghz_high_overlapping_bss_fraction,json=radios5ghzHighOverlappingBssFraction,proto3" json:"radios_5ghz_high_overlapping_bss_fraction,omitempty"`
	Radios_5GhzHighRxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,146,opt,name=radios_5ghz_high_rx_bytes,json=radios5ghzHighRxBytes,proto3" json:"radios_5ghz_high_rx_bytes,omitempty"`
	Radios_5GhzHighRxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,147,opt,name=radios_5ghz_high_rx_packets,json=radios5ghzHighRxPackets,proto3" json:"radios_5ghz_high_rx_packets,omitempty"`
	Radios_5GhzHighRxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,148,opt,name=radios_5ghz_high_rx_errors,json=radios5ghzHighRxErrors,proto3" json:"radios_5ghz_high_rx_errors,omitempty"`
	Radios_5GhzHighRxFrameErrors           *wrapperspb.Int64Value    `protobuf:"bytes,149,opt,name=radios_5ghz_high_rx_frame_errors,json=radios5ghzHighRxFrameErrors,proto3" json:"radios_5ghz_high_rx_frame_errors,omitempty"`
	Radios_5GhzHighRxPacketErrorRate       *wrapperspb.FloatValue    `protobuf:"bytes,150,opt,name=radios_5ghz_high_rx_packet_error_rate,json=radios5ghzHighRxPacketErrorRate,proto3" json:"radios_5ghz_high_rx_packet_error_rate,omitempty"`
	Radios_5GhzHighRxAirtimeFraction       *wrapperspb.FloatValue    `protobuf:"bytes,151,opt,name=radios_5ghz_high_rx_airtime_fraction,json=radios5ghzHighRxAirtimeFraction,proto3" json:"radios_5ghz_high_rx_airtime_fraction,omitempty"`
	Radios_5GhzHighTxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,152,opt,name=radios_5ghz_high_tx_bytes,json=radios5ghzHighTxBytes,proto3" json:"radios_5ghz_high_tx_bytes,omitempty"`
	Radios_5GhzHighTxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,153,opt,name=radios_5ghz_high_tx_packets,json=radios5ghzHighTxPackets,proto3" json:"radios_5ghz_high_tx_packets,omitempty"`
	Radios_5GhzHighTxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,154,opt,name=radios_5ghz_high_tx_errors,json=radios5ghzHighTxErrors,proto3" json:"radios_5ghz_high_tx_errors,omitempty"`
	Radios_5GhzHighTxPacketErrorRate       *wrapperspb.FloatValue    `protobuf:"bytes,155,opt,name=radios_5ghz_high_tx_packet_error_rate,json=radios5ghzHighTxPacketErrorRate,proto3" json:"radios_5ghz_high_tx_packet_error_rate,omitempty"`
	Radios_5GhzHighTxAirtimeFraction       *wrapperspb.FloatValue    `protobuf:"bytes,156,opt,name=radios_5ghz_high_tx_airtime_fraction,json=radios5ghzHighTxAirtimeFraction,proto3" json:"radios_5ghz_high_tx_airtime_fraction,omitempty"`
	Radios_2GhzThermalTemp                 *wrapperspb.FloatValue    `protobuf:"bytes,200,opt,name=radios_2ghz_thermal_temp,json=radios2ghzThermalTemp,proto3" json:"radios_2ghz_thermal_temp,omitempty"`
	Radios_5GhzThermalTemp                 *wrapperspb.FloatValue    `protobuf:"bytes,201,opt,name=radios_5ghz_thermal_temp,json=radios5ghzThermalTemp,proto3" json:"radios_5ghz_thermal_temp,omitempty"`
	Radios_5GhzHighThermalTemp             *wrapperspb.FloatValue    `protobuf:"bytes,206,opt,name=radios_5ghz_high_thermal_temp,json=radios5ghzHighThermalTemp,proto3" json:"radios_5ghz_high_thermal_temp,omitempty"`
	Radios_2GhzThermalDutyCycle            *wrapperspb.FloatValue    `protobuf:"bytes,202,opt,name=radios_2ghz_thermal_duty_cycle,json=radios2ghzThermalDutyCycle,proto3" json:"radios_2ghz_thermal_duty_cycle,omitempty"`
	Radios_5GhzThermalDutyCycle            *wrapperspb.FloatValue    `protobuf:"bytes,203,opt,name=radios_5ghz_thermal_duty_cycle,json=radios5ghzThermalDutyCycle,proto3" json:"radios_5ghz_thermal_duty_cycle,omitempty"`
	Radios_5GhzHighThermalDutyCycle        *wrapperspb.FloatValue    `protobuf:"bytes,207,opt,name=radios_5ghz_high_thermal_duty_cycle,json=radios5ghzHighThermalDutyCycle,proto3" json:"radios_5ghz_high_thermal_duty_cycle,omitempty"`
	Radios_2GhzThermalThrottledSeconds     *wrapperspb.UInt32Value   `protobuf:"bytes,204,opt,name=radios_2ghz_thermal_throttled_seconds,json=radios2ghzThermalThrottledSeconds,proto3" json:"radios_2ghz_thermal_throttled_seconds,omitempty"`
	Radios_5GhzThermalThrottledSeconds     *wrapperspb.UInt32Value   `protobuf:"bytes,205,opt,name=radios_5ghz_thermal_throttled_seconds,json=radios5ghzThermalThrottledSeconds,proto3" json:"radios_5ghz_thermal_throttled_seconds,omitempty"`
	Radios_5GhzHighThermalThrottledSeconds *wrapperspb.UInt32Value   `protobuf:"bytes,208,opt,name=radios_5ghz_high_thermal_throttled_seconds,json=radios5ghzHighThermalThrottledSeconds,proto3" json:"radios_5ghz_high_thermal_throttled_seconds,omitempty"`
	BoardTemp                              *wrapperspb.FloatValue    `protobuf:"bytes,210,opt,name=board_temp,json=boardTemp,proto3" json:"board_temp,omitempty"`
	PoeMcuDieTemp                          *wrapperspb.FloatValue    `protobuf:"bytes,211,opt,name=poe_mcu_die_temp,json=poeMcuDieTemp,proto3" json:"poe_mcu_die_temp,omitempty"`
	IfacesLanEthRxBytes                    *wrapperspb.Int64Value    `protobuf:"bytes,300,opt,name=ifaces_lan_eth_rx_bytes,json=ifacesLanEthRxBytes,proto3" json:"ifaces_lan_eth_rx_bytes,omitempty"`
	IfacesLanEthRxPackets                  *wrapperspb.Int64Value    `protobuf:"bytes,301,opt,name=ifaces_lan_eth_rx_packets,json=ifacesLanEthRxPackets,proto3" json:"ifaces_lan_eth_rx_packets,omitempty"`
	IfacesLanEthRxErrors                   *wrapperspb.Int64Value    `protobuf:"bytes,302,opt,name=ifaces_lan_eth_rx_errors,json=ifacesLanEthRxErrors,proto3" json:"ifaces_lan_eth_rx_errors,omitempty"`
	IfacesLanEthRxFrameErrors              *wrapperspb.Int64Value    `protobuf:"bytes,303,opt,name=ifaces_lan_eth_rx_frame_errors,json=ifacesLanEthRxFrameErrors,proto3" json:"ifaces_lan_eth_rx_frame_errors,omitempty"`
	IfacesLanEthTxBytes                    *wrapperspb.Int64Value    `protobuf:"bytes,304,opt,name=ifaces_lan_eth_tx_bytes,json=ifacesLanEthTxBytes,proto3" json:"ifaces_lan_eth_tx_bytes,omitempty"`
	IfacesLanEthTxPackets                  *wrapperspb.Int64Value    `protobuf:"bytes,305,opt,name=ifaces_lan_eth_tx_packets,json=ifacesLanEthTxPackets,proto3" json:"ifaces_lan_eth_tx_packets,omitempty"`
	IfacesLanEthTxErrors                   *wrapperspb.Int64Value    `protobuf:"bytes,306,opt,name=ifaces_lan_eth_tx_errors,json=ifacesLanEthTxErrors,proto3" json:"ifaces_lan_eth_tx_errors,omitempty"`
	IfacesLan1EthRxBytes                   *wrapperspb.Int64Value    `protobuf:"bytes,314,opt,name=ifaces_lan1_eth_rx_bytes,json=ifacesLan1EthRxBytes,proto3" json:"ifaces_lan1_eth_rx_bytes,omitempty"`
	IfacesLan1EthRxPackets                 *wrapperspb.Int64Value    `protobuf:"bytes,315,opt,name=ifaces_lan1_eth_rx_packets,json=ifacesLan1EthRxPackets,proto3" json:"ifaces_lan1_eth_rx_packets,omitempty"`
	IfacesLan1EthRxErrors                  *wrapperspb.Int64Value    `protobuf:"bytes,316,opt,name=ifaces_lan1_eth_rx_errors,json=ifacesLan1EthRxErrors,proto3" json:"ifaces_lan1_eth_rx_errors,omitempty"`
	IfacesLan1EthRxFrameErrors             *wrapperspb.Int64Value    `protobuf:"bytes,317,opt,name=ifaces_lan1_eth_rx_frame_errors,json=ifacesLan1EthRxFrameErrors,proto3" json:"ifaces_lan1_eth_rx_frame_errors,omitempty"`
	IfacesLan1EthTxBytes                   *wrapperspb.Int64Value    `protobuf:"bytes,318,opt,name=ifaces_lan1_eth_tx_bytes,json=ifacesLan1EthTxBytes,proto3" json:"ifaces_lan1_eth_tx_bytes,omitempty"`
	IfacesLan1EthTxPackets                 *wrapperspb.Int64Value    `protobuf:"bytes,319,opt,name=ifaces_lan1_eth_tx_packets,json=ifacesLan1EthTxPackets,proto3" json:"ifaces_lan1_eth_tx_packets,omitempty"`
	IfacesLan1EthTxErrors                  *wrapperspb.Int64Value    `protobuf:"bytes,320,opt,name=ifaces_lan1_eth_tx_errors,json=ifacesLan1EthTxErrors,proto3" json:"ifaces_lan1_eth_tx_errors,omitempty"`
	IfacesWanEthRxBytes                    *wrapperspb.Int64Value    `protobuf:"bytes,307,opt,name=ifaces_wan_eth_rx_bytes,json=ifacesWanEthRxBytes,proto3" json:"ifaces_wan_eth_rx_bytes,omitempty"`
	IfacesWanEthRxPackets                  *wrapperspb.Int64Value    `protobuf:"bytes,308,opt,name=ifaces_wan_eth_rx_packets,json=ifacesWanEthRxPackets,proto3" json:"ifaces_wan_eth_rx_packets,omitempty"`
	IfacesWanEthRxErrors                   *wrapperspb.Int64Value    `protobuf:"bytes,309,opt,name=ifaces_wan_eth_rx_errors,json=ifacesWanEthRxErrors,proto3" json:"ifaces_wan_eth_rx_errors,omitempty"`
	IfacesWanEthRxFrameErrors              *wrapperspb.Int64Value    `protobuf:"bytes,310,opt,name=ifaces_wan_eth_rx_frame_errors,json=ifacesWanEthRxFrameErrors,proto3" json:"ifaces_wan_eth_rx_frame_errors,omitempty"`
	IfacesWanEthTxBytes                    *wrapperspb.Int64Value    `protobuf:"bytes,311,opt,name=ifaces_wan_eth_tx_bytes,json=ifacesWanEthTxBytes,proto3" json:"ifaces_wan_eth_tx_bytes,omitempty"`
	IfacesWanEthTxPackets                  *wrapperspb.Int64Value    `protobuf:"bytes,312,opt,name=ifaces_wan_eth_tx_packets,json=ifacesWanEthTxPackets,proto3" json:"ifaces_wan_eth_tx_packets,omitempty"`
	IfacesWanEthTxErrors                   *wrapperspb.Int64Value    `protobuf:"bytes,313,opt,name=ifaces_wan_eth_tx_errors,json=ifacesWanEthTxErrors,proto3" json:"ifaces_wan_eth_tx_errors,omitempty"`
	Clients                                *wrapperspb.UInt32Value   `protobuf:"bytes,400,opt,name=clients,proto3" json:"clients,omitempty"`
	Clients_2Ghz                           *wrapperspb.UInt32Value   `protobuf:"bytes,401,opt,name=clients_2ghz,json=clients2ghz,proto3" json:"clients_2ghz,omitempty"`
	Clients_5Ghz                           *wrapperspb.UInt32Value   `protobuf:"bytes,402,opt,name=clients_5ghz,json=clients5ghz,proto3" json:"clients_5ghz,omitempty"`
	Clients_5GhzHigh                       *wrapperspb.UInt32Value   `protobuf:"bytes,413,opt,name=clients_5ghz_high,json=clients5ghzHigh,proto3" json:"clients_5ghz_high,omitempty"`
	ClientsEth                             *wrapperspb.UInt32Value   `protobuf:"bytes,403,opt,name=clients_eth,json=clientsEth,proto3" json:"clients_eth,omitempty"`
	Clients_5GhzRxBandwidth_20Mhz          *wrapperspb.UInt32Value   `protobuf:"bytes,429,opt,name=clients_5ghz_rx_bandwidth_20mhz,json=clients5ghzRxBandwidth20mhz,proto3" json:"clients_5ghz_rx_bandwidth_20mhz,omitempty"`
	Clients_5GhzRxBandwidth_40Mhz          *wrapperspb.UInt32Value   `protobuf:"bytes,430,opt,name=clients_5ghz_rx_bandwidth_40mhz,json=clients5ghzRxBandwidth40mhz,proto3" json:"clients_5ghz_rx_bandwidth_40mhz,omitempty"`
	Clients_5GhzRxBandwidth_80Mhz          *wrapperspb.UInt32Value   `protobuf:"bytes,431,opt,name=clients_5ghz_rx_bandwidth_80mhz,json=clients5ghzRxBandwidth80mhz,proto3" json:"clients_5ghz_rx_bandwidth_80mhz,omitempty"`
	ClientsRepeater                        *wrapperspb.UInt32Value   `protobuf:"bytes,404,opt,name=clients_repeater,json=clientsRepeater,proto3" json:"clients_repeater,omitempty"`
	ClientsRepeater_2Ghz                   *wrapperspb.UInt32Value   `protobuf:"bytes,405,opt,name=clients_repeater_2ghz,json=clientsRepeater2ghz,proto3" json:"clients_repeater_2ghz,omitempty"`
	ClientsRepeater_5Ghz                   *wrapperspb.UInt32Value   `protobuf:"bytes,406,opt,name=clients_repeater_5ghz,json=clientsRepeater5ghz,proto3" json:"clients_repeater_5ghz,omitempty"`
	ClientsRepeater_5GhzHigh               *wrapperspb.UInt32Value   `protobuf:"bytes,416,opt,name=clients_repeater_5ghz_high,json=clientsRepeater5ghzHigh,proto3" json:"clients_repeater_5ghz_high,omitempty"`
	ClientsRepeaterEth                     *wrapperspb.UInt32Value   `protobuf:"bytes,407,opt,name=clients_repeater_eth,json=clientsRepeaterEth,proto3" json:"clients_repeater_eth,omitempty"`
	MeshHops                               *wrapperspb.UInt32Value   `protobuf:"bytes,408,opt,name=mesh_hops,json=meshHops,proto3" json:"mesh_hops,omitempty"`
	MeshOneHopRssiAvg_2Ghz                 *wrapperspb.FloatValue    `protobuf:"bytes,409,opt,name=mesh_one_hop_rssi_avg_2ghz,json=meshOneHopRssiAvg2ghz,proto3" json:"mesh_one_hop_rssi_avg_2ghz,omitempty"`
	MeshOneHopRssiAvg_5Ghz                 *wrapperspb.FloatValue    `protobuf:"bytes,410,opt,name=mesh_one_hop_rssi_avg_5ghz,json=meshOneHopRssiAvg5ghz,proto3" json:"mesh_one_hop_rssi_avg_5ghz,omitempty"`
	MeshOneHopRssiAvg_5GhzHigh             *wrapperspb.FloatValue    `protobuf:"bytes,414,opt,name=mesh_one_hop_rssi_avg_5ghz_high,json=meshOneHopRssiAvg5ghzHigh,proto3" json:"mesh_one_hop_rssi_avg_5ghz_high,omitempty"`
	MeshTwoHopRssiAvg_2Ghz                 *wrapperspb.FloatValue    `protobuf:"bytes,411,opt,name=mesh_two_hop_rssi_avg_2ghz,json=meshTwoHopRssiAvg2ghz,proto3" json:"mesh_two_hop_rssi_avg_2ghz,omitempty"`
	MeshTwoHopRssiAvg_5Ghz                 *wrapperspb.FloatValue    `protobuf:"bytes,412,opt,name=mesh_two_hop_rssi_avg_5ghz,json=meshTwoHopRssiAvg5ghz,proto3" json:"mesh_two_hop_rssi_avg_5ghz,omitempty"`
	MeshTwoHopRssiAvg_5GhzHigh             *wrapperspb.FloatValue    `protobuf:"bytes,415,opt,name=mesh_two_hop_rssi_avg_5ghz_high,json=meshTwoHopRssiAvg5ghzHigh,proto3" json:"mesh_two_hop_rssi_avg_5ghz_high,omitempty"`
	RepeaterTxRateMbpsMin                  *wrapperspb.FloatValue    `protobuf:"bytes,418,opt,name=repeater_tx_rate_mbps_min,json=repeaterTxRateMbpsMin,proto3" json:"repeater_tx_rate_mbps_min,omitempty"`
	RepeaterRxRateMbpsMin                  *wrapperspb.FloatValue    `protobuf:"bytes,419,opt,name=repeater_rx_rate_mbps_min,json=repeaterRxRateMbpsMin,proto3" json:"repeater_rx_rate_mbps_min,omitempty"`
	RepeaterTxRateMbpsAvg                  *wrapperspb.FloatValue    `protobuf:"bytes,420,opt,name=repeater_tx_rate_mbps_avg,json=repeaterTxRateMbpsAvg,proto3" json:"repeater_tx_rate_mbps_avg,omitempty"`
	RepeaterRxRateMbpsAvg                  *wrapperspb.FloatValue    `protobuf:"bytes,421,opt,name=repeater_rx_rate_mbps_avg,json=repeaterRxRateMbpsAvg,proto3" json:"repeater_rx_rate_mbps_avg,omitempty"`
	RepeaterSecondsSince_2SOutageMin       *wrapperspb.FloatValue    `protobuf:"bytes,422,opt,name=repeater_seconds_since_2s_outage_min,json=repeaterSecondsSince2sOutageMin,proto3" json:"repeater_seconds_since_2s_outage_min,omitempty"`
	RepeaterSecondsSince_5SOutageMin       *wrapperspb.FloatValue    `protobuf:"bytes,424,opt,name=repeater_seconds_since_5s_outage_min,json=repeaterSecondsSince5sOutageMin,proto3" json:"repeater_seconds_since_5s_outage_min,omitempty"`
	RepeaterSecondsSince_2SOutageAvg       *wrapperspb.FloatValue    `protobuf:"bytes,423,opt,name=repeater_seconds_since_2s_outage_avg,json=repeaterSecondsSince2sOutageAvg,proto3" json:"repeater_seconds_since_2s_outage_avg,omitempty"`
	RepeaterSecondsSince_5SOutageAvg       *wrapperspb.FloatValue    `protobuf:"bytes,425,opt,name=repeater_seconds_since_5s_outage_avg,json=repeaterSecondsSince5sOutageAvg,proto3" json:"repeater_seconds_since_5s_outage_avg,omitempty"`
	RepeaterLatencyMs_1HMax                *wrapperspb.FloatValue    `protobuf:"bytes,426,opt,name=repeater_latency_ms_1h_max,json=repeaterLatencyMs1hMax,proto3" json:"repeater_latency_ms_1h_max,omitempty"`
	RepeaterLatencyMs_1HAvg                *wrapperspb.FloatValue    `protobuf:"bytes,427,opt,name=repeater_latency_ms_1h_avg,json=repeaterLatencyMs1hAvg,proto3" json:"repeater_latency_ms_1h_avg,omitempty"`
	MeshTopologyChangeCount_1D             *wrapperspb.UInt32Value   `protobuf:"bytes,428,opt,name=mesh_topology_change_count_1d,json=meshTopologyChangeCount1d,proto3" json:"mesh_topology_change_count_1d,omitempty"`
	PingSecondsSinceLast_1SOutage          *wrapperspb.FloatValue    `protobuf:"bytes,600,opt,name=ping_seconds_since_last_1s_outage,json=pingSecondsSinceLast1sOutage,proto3" json:"ping_seconds_since_last_1s_outage,omitempty"`
	PingSecondsSinceLast_2SOutage          *wrapperspb.FloatValue    `protobuf:"bytes,601,opt,name=ping_seconds_since_last_2s_outage,json=pingSecondsSinceLast2sOutage,proto3" json:"ping_seconds_since_last_2s_outage,omitempty"`
	PingSecondsSinceLast_5SOutage          *wrapperspb.FloatValue    `protobuf:"bytes,602,opt,name=ping_seconds_since_last_5s_outage,json=pingSecondsSinceLast5sOutage,proto3" json:"ping_seconds_since_last_5s_outage,omitempty"`
	PingSecondsSinceLast_60SOutage         *wrapperspb.FloatValue    `protobuf:"bytes,603,opt,name=ping_seconds_since_last_60s_outage,json=pingSecondsSinceLast60sOutage,proto3" json:"ping_seconds_since_last_60s_outage,omitempty"`
	PingSecondsSinceLast_300SOutage        *wrapperspb.FloatValue    `protobuf:"bytes,604,opt,name=ping_seconds_since_last_300s_outage,json=pingSecondsSinceLast300sOutage,proto3" json:"ping_seconds_since_last_300s_outage,omitempty"`
	PingDropRate                           *wrapperspb.FloatValue    `protobuf:"bytes,605,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingDropRateLast_1H                    *wrapperspb.FloatValue    `protobuf:"bytes,606,opt,name=ping_drop_rate_last_1h,json=pingDropRateLast1h,proto3" json:"ping_drop_rate_last_1h,omitempty"`
	PingLatency                            *wrapperspb.FloatValue    `protobuf:"bytes,607,opt,name=ping_latency,json=pingLatency,proto3" json:"ping_latency,omitempty"`
	PingLatencyLast_1H                     *wrapperspb.FloatValue    `protobuf:"bytes,618,opt,name=ping_latency_last_1h,json=pingLatencyLast1h,proto3" json:"ping_latency_last_1h,omitempty"`
	PingDishSecondsSinceLast_1SOutage      *wrapperspb.FloatValue    `protobuf:"bytes,610,opt,name=ping_dish_seconds_since_last_1s_outage,json=pingDishSecondsSinceLast1sOutage,proto3" json:"ping_dish_seconds_since_last_1s_outage,omitempty"`
	PingDishSecondsSinceLast_2SOutage      *wrapperspb.FloatValue    `protobuf:"bytes,611,opt,name=ping_dish_seconds_since_last_2s_outage,json=pingDishSecondsSinceLast2sOutage,proto3" json:"ping_dish_seconds_since_last_2s_outage,omitempty"`
	PingDishSecondsSinceLast_5SOutage      *wrapperspb.FloatValue    `protobuf:"bytes,612,opt,name=ping_dish_seconds_since_last_5s_outage,json=pingDishSecondsSinceLast5sOutage,proto3" json:"ping_dish_seconds_since_last_5s_outage,omitempty"`
	PingDishSecondsSinceLast_60SOutage     *wrapperspb.FloatValue    `protobuf:"bytes,613,opt,name=ping_dish_seconds_since_last_60s_outage,json=pingDishSecondsSinceLast60sOutage,proto3" json:"ping_dish_seconds_since_last_60s_outage,omitempty"`
	PingDishSecondsSinceLast_300SOutage    *wrapperspb.FloatValue    `protobuf:"bytes,614,opt,name=ping_dish_seconds_since_last_300s_outage,json=pingDishSecondsSinceLast300sOutage,proto3" json:"ping_dish_seconds_since_last_300s_outage,omitempty"`
	PingDishDropRate                       *wrapperspb.FloatValue    `protobuf:"bytes,615,opt,name=ping_dish_drop_rate,json=pingDishDropRate,proto3" json:"ping_dish_drop_rate,omitempty"`
	PingDishDropRateLast_1H                *wrapperspb.FloatValue    `protobuf:"bytes,616,opt,name=ping_dish_drop_rate_last_1h,json=pingDishDropRateLast1h,proto3" json:"ping_dish_drop_rate_last_1h,omitempty"`
	PingDishLatency                        *wrapperspb.FloatValue    `protobuf:"bytes,617,opt,name=ping_dish_latency,json=pingDishLatency,proto3" json:"ping_dish_latency,omitempty"`
	PingDishLatencyLast_1H                 *wrapperspb.FloatValue    `protobuf:"bytes,619,opt,name=ping_dish_latency_last_1h,json=pingDishLatencyLast1h,proto3" json:"ping_dish_latency_last_1h,omitempty"`
	ClientSpeedtestRouterDownloadMbps      *wrapperspb.FloatValue    `protobuf:"bytes,700,opt,name=client_speedtest_router_download_mbps,json=clientSpeedtestRouterDownloadMbps,proto3" json:"client_speedtest_router_download_mbps,omitempty"`
	ClientSpeedtestRouterUploadMbps        *wrapperspb.FloatValue    `protobuf:"bytes,701,opt,name=client_speedtest_router_upload_mbps,json=clientSpeedtestRouterUploadMbps,proto3" json:"client_speedtest_router_upload_mbps,omitempty"`
	ClientSpeedtestRouterRssi              *wrapperspb.FloatValue    `protobuf:"bytes,702,opt,name=client_speedtest_router_rssi,json=clientSpeedtestRouterRssi,proto3" json:"client_speedtest_router_rssi,omitempty"`
	ClientSpeedtestWifiDownloadMbps        *wrapperspb.FloatValue    `protobuf:"bytes,703,opt,name=client_speedtest_wifi_download_mbps,json=clientSpeedtestWifiDownloadMbps,proto3" json:"client_speedtest_wifi_download_mbps,omitempty"`
	ClientSpeedtestWifiUploadMbps          *wrapperspb.FloatValue    `protobuf:"bytes,704,opt,name=client_speedtest_wifi_upload_mbps,json=clientSpeedtestWifiUploadMbps,proto3" json:"client_speedtest_wifi_upload_mbps,omitempty"`
	ClientSpeedtestClientDownloadMbps      *wrapperspb.FloatValue    `protobuf:"bytes,705,opt,name=client_speedtest_client_download_mbps,json=clientSpeedtestClientDownloadMbps,proto3" json:"client_speedtest_client_download_mbps,omitempty"`
	ClientSpeedtestClientUploadMbps        *wrapperspb.FloatValue    `protobuf:"bytes,706,opt,name=client_speedtest_client_upload_mbps,json=clientSpeedtestClientUploadMbps,proto3" json:"client_speedtest_client_upload_mbps,omitempty"`
	ClientSpeedtestClientRssi              *wrapperspb.FloatValue    `protobuf:"bytes,707,opt,name=client_speedtest_client_rssi,json=clientSpeedtestClientRssi,proto3" json:"client_speedtest_client_rssi,omitempty"`
	ClientSpeedtestClientIface             *wrapperspb.UInt32Value   `protobuf:"bytes,708,opt,name=client_speedtest_client_iface,json=clientSpeedtestClientIface,proto3" json:"client_speedtest_client_iface,omitempty"`
	ClientSpeedtestClientOui               *wrapperspb.StringValue   `protobuf:"bytes,709,opt,name=client_speedtest_client_oui,json=clientSpeedtestClientOui,proto3" json:"client_speedtest_client_oui,omitempty"`
	ClientSpeedtestClientTxRate            *wrapperspb.UInt32Value   `protobuf:"bytes,710,opt,name=client_speedtest_client_tx_rate,json=clientSpeedtestClientTxRate,proto3" json:"client_speedtest_client_tx_rate,omitempty"`
	ClientSpeedtestClientRxRate            *wrapperspb.UInt32Value   `protobuf:"bytes,711,opt,name=client_speedtest_client_rx_rate,json=clientSpeedtestClientRxRate,proto3" json:"client_speedtest_client_rx_rate,omitempty"`
	ClientSpeedtestClientPlatformType      *wrapperspb.UInt32Value   `protobuf:"bytes,712,opt,name=client_speedtest_client_platform_type,json=clientSpeedtestClientPlatformType,proto3" json:"client_speedtest_client_platform_type,omitempty"`
	SpeedtestTcp_8DownloadMbpsAvg          *wrapperspb.FloatValue    `protobuf:"bytes,800,opt,name=speedtest_tcp_8_download_mbps_avg,json=speedtestTcp8DownloadMbpsAvg,proto3" json:"speedtest_tcp_8_download_mbps_avg,omitempty"`
	SpeedtestTcp_8DownloadMbpsMax          *wrapperspb.FloatValue    `protobuf:"bytes,801,opt,name=speedtest_tcp_8_download_mbps_max,json=speedtestTcp8DownloadMbpsMax,proto3" json:"speedtest_tcp_8_download_mbps_max,omitempty"`
	SpeedtestTcp_8UploadMbpsAvg            *wrapperspb.FloatValue    `protobuf:"bytes,802,opt,name=speedtest_tcp_8_upload_mbps_avg,json=speedtestTcp8UploadMbpsAvg,proto3" json:"speedtest_tcp_8_upload_mbps_avg,omitempty"`
	SpeedtestTcp_8UploadMbpsMax            *wrapperspb.FloatValue    `protobuf:"bytes,803,opt,name=speedtest_tcp_8_upload_mbps_max,json=speedtestTcp8UploadMbpsMax,proto3" json:"speedtest_tcp_8_upload_mbps_max,omitempty"`
	SpeedtestTcp_64DownloadMbpsAvg         *wrapperspb.FloatValue    `protobuf:"bytes,804,opt,name=speedtest_tcp_64_download_mbps_avg,json=speedtestTcp64DownloadMbpsAvg,proto3" json:"speedtest_tcp_64_download_mbps_avg,omitempty"`
	SpeedtestTcp_64DownloadMbpsMax         *wrapperspb.FloatValue    `protobuf:"bytes,805,opt,name=speedtest_tcp_64_download_mbps_max,json=speedtestTcp64DownloadMbpsMax,proto3" json:"speedtest_tcp_64_download_mbps_max,omitempty"`
	SpeedtestTcp_64UploadMbpsAvg           *wrapperspb.FloatValue    `protobuf:"bytes,806,opt,name=speedtest_tcp_64_upload_mbps_avg,json=speedtestTcp64UploadMbpsAvg,proto3" json:"speedtest_tcp_64_upload_mbps_avg,omitempty"`
	SpeedtestTcp_64UploadMbpsMax           *wrapperspb.FloatValue    `protobuf:"bytes,807,opt,name=speedtest_tcp_64_upload_mbps_max,json=speedtestTcp64UploadMbpsMax,proto3" json:"speedtest_tcp_64_upload_mbps_max,omitempty"`
	DishCellId                             *wrapperspb.UInt32Value   `protobuf:"bytes,900,opt,name=dish_cell_id,json=dishCellId,proto3" json:"dish_cell_id,omitempty"`
	ConfigSetupComplete                    *wrapperspb.BoolValue     `protobuf:"bytes,1000,opt,name=config_setup_complete,json=configSetupComplete,proto3" json:"config_setup_complete,omitempty"`
	ConfigBandsSplit                       *wrapperspb.BoolValue     `protobuf:"bytes,1001,opt,name=config_bands_split,json=configBandsSplit,proto3" json:"config_bands_split,omitempty"`
	ConfigIsRepeater                       *wrapperspb.BoolValue     `protobuf:"bytes,1002,opt,name=config_is_repeater,json=configIsRepeater,proto3" json:"config_is_repeater,omitempty"`
	ConfigOpenNetwork                      *wrapperspb.BoolValue     `protobuf:"bytes,1003,opt,name=config_open_network,json=configOpenNetwork,proto3" json:"config_open_network,omitempty"`
	ConfigIsAviation                       *wrapperspb.BoolValue     `protobuf:"bytes,1004,opt,name=config_is_aviation,json=configIsAviation,proto3" json:"config_is_aviation,omitempty"`
	ConfigSecureDns                        *wrapperspb.BoolValue     `protobuf:"bytes,1005,opt,name=config_secure_dns,json=configSecureDns,proto3" json:"config_secure_dns,omitempty"`
	ConfigLegacy                           *wrapperspb.BoolValue     `protobuf:"bytes,1006,opt,name=config_legacy,json=configLegacy,proto3" json:"config_legacy,omitempty"`
	ConfigApMode                           *wrapperspb.BoolValue     `protobuf:"bytes,1007,opt,name=config_ap_mode,json=configApMode,proto3" json:"config_ap_mode,omitempty"`
	ConfigDfsEnabled                       *wrapperspb.BoolValue     `protobuf:"bytes,1008,opt,name=config_dfs_enabled,json=configDfsEnabled,proto3" json:"config_dfs_enabled,omitempty"`
	ConfigNetworkNameIsDefault             *wrapperspb.BoolValue     `protobuf:"bytes,1009,opt,name=config_network_name_is_default,json=configNetworkNameIsDefault,proto3" json:"config_network_name_is_default,omitempty"`
	ConfigRemoteSshEnabled                 *wrapperspb.BoolValue     `protobuf:"bytes,1010,opt,name=config_remote_ssh_enabled,json=configRemoteSshEnabled,proto3" json:"config_remote_ssh_enabled,omitempty"`
	ConfigIsRepeaterWired                  *wrapperspb.BoolValue     `protobuf:"bytes,1011,opt,name=config_is_repeater_wired,json=configIsRepeaterWired,proto3" json:"config_is_repeater_wired,omitempty"`
	ConfigIsRepeaterWireless               *wrapperspb.BoolValue     `protobuf:"bytes,1012,opt,name=config_is_repeater_wireless,json=configIsRepeaterWireless,proto3" json:"config_is_repeater_wireless,omitempty"`
	ConfigBlockSchedulesSet                *wrapperspb.UInt32Value   `protobuf:"bytes,1013,opt,name=config_block_schedules_set,json=configBlockSchedulesSet,proto3" json:"config_block_schedules_set,omitempty"`
	ConfigCustomNameservers                *wrapperspb.BoolValue     `protobuf:"bytes,1014,opt,name=config_custom_nameservers,json=configCustomNameservers,proto3" json:"config_custom_nameservers,omitempty"`
	ConfigDisableMeshOnboarding            *wrapperspb.BoolValue     `protobuf:"bytes,1015,opt,name=config_disable_mesh_onboarding,json=configDisableMeshOnboarding,proto3" json:"config_disable_mesh_onboarding,omitempty"`
	ConfigPinCountryCode                   *wrapperspb.BoolValue     `protobuf:"bytes,1016,opt,name=config_pin_country_code,json=configPinCountryCode,proto3" json:"config_pin_country_code,omitempty"`
	ConfigDisableUpdateReboot              *wrapperspb.BoolValue     `protobuf:"bytes,1017,opt,name=config_disable_update_reboot,json=configDisableUpdateReboot,proto3" json:"config_disable_update_reboot,omitempty"`
	ConfigDisable_2Ghz                     *wrapperspb.BoolValue     `protobuf:"bytes,1018,opt,name=config_disable_2ghz,json=configDisable2ghz,proto3" json:"config_disable_2ghz,omitempty"`
	ConfigDisable_5Ghz                     *wrapperspb.BoolValue     `protobuf:"bytes,1019,opt,name=config_disable_5ghz,json=configDisable5ghz,proto3" json:"config_disable_5ghz,omitempty"`
	ConfigDisable_5GhzHigh                 *wrapperspb.BoolValue     `protobuf:"bytes,1029,opt,name=config_disable_5ghz_high,json=configDisable5ghzHigh,proto3" json:"config_disable_5ghz_high,omitempty"`
	ConfigChannel_2Ghz                     *wrapperspb.UInt32Value   `protobuf:"bytes,1020,opt,name=config_channel_2ghz,json=configChannel2ghz,proto3" json:"config_channel_2ghz,omitempty"`
	ConfigChannel_5Ghz                     *wrapperspb.UInt32Value   `protobuf:"bytes,1021,opt,name=config_channel_5ghz,json=configChannel5ghz,proto3" json:"config_channel_5ghz,omitempty"`
	ConfigChannel_5GhzHigh                 *wrapperspb.UInt32Value   `protobuf:"bytes,1022,opt,name=config_channel_5ghz_high,json=configChannel5ghzHigh,proto3" json:"config_channel_5ghz_high,omitempty"`
	ConfigNetworks                         *wrapperspb.UInt32Value   `protobuf:"bytes,1023,opt,name=config_networks,json=configNetworks,proto3" json:"config_networks,omitempty"`
	ConfigNetworksGuest                    *wrapperspb.UInt32Value   `protobuf:"bytes,1024,opt,name=config_networks_guest,json=configNetworksGuest,proto3" json:"config_networks_guest,omitempty"`
	ConfigNetworksHidden                   *wrapperspb.UInt32Value   `protobuf:"bytes,1025,opt,name=config_networks_hidden,json=configNetworksHidden,proto3" json:"config_networks_hidden,omitempty"`
	ConfigNetworksClientIsolation          *wrapperspb.UInt32Value   `protobuf:"bytes,1026,opt,name=config_networks_client_isolation,json=configNetworksClientIsolation,proto3" json:"config_networks_client_isolation,omitempty"`
	ConfigNetworksBandsSplit               *wrapperspb.UInt32Value   `protobuf:"bytes,1027,opt,name=config_networks_bands_split,json=configNetworksBandsSplit,proto3" json:"config_networks_bands_split,omitempty"`
	WanTrafficControlCakeBytes             *wrapperspb.Int64Value    `protobuf:"bytes,1101,opt,name=wan_traffic_control_cake_bytes,json=wanTrafficControlCakeBytes,proto3" json:"wan_traffic_control_cake_bytes,omitempty"`
	WanTrafficControlCakePackets           *wrapperspb.Int64Value    `protobuf:"bytes,1102,opt,name=wan_traffic_control_cake_packets,json=wanTrafficControlCakePackets,proto3" json:"wan_traffic_control_cake_packets,omitempty"`
	WanTrafficControlCakeDrops             *wrapperspb.Int64Value    `protobuf:"bytes,1103,opt,name=wan_traffic_control_cake_drops,json=wanTrafficControlCakeDrops,proto3" json:"wan_traffic_control_cake_drops,omitempty"`
	WanTrafficControlCakeAckDrops          *wrapperspb.Int64Value    `protobuf:"bytes,1104,opt,name=wan_traffic_control_cake_ack_drops,json=wanTrafficControlCakeAckDrops,proto3" json:"wan_traffic_control_cake_ack_drops,omitempty"`
}

func (x *StarlinkRoutersHourlyMetricsV2) Reset() {
	*x = StarlinkRoutersHourlyMetricsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRoutersHourlyMetricsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRoutersHourlyMetricsV2) ProtoMessage() {}

func (x *StarlinkRoutersHourlyMetricsV2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRoutersHourlyMetricsV2.ProtoReflect.Descriptor instead.
func (*StarlinkRoutersHourlyMetricsV2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{45}
}

func (x *StarlinkRoutersHourlyMetricsV2) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestampDate() *wrapperspb.StringValue {
	if x != nil {
		return x.TimestampDate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestampHour() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TimestampHour
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestamp() *telemetron.TimestampInfo {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysHwGen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysHwGen
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysSw() *wrapperspb.StringValue {
	if x != nil {
		return x.SysSw
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.SysCountry
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysIsDev() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsDev
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysAllocFds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysAllocFds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysCpuUsage() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysCpuUsage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysMemFreeKb() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysMemFreeKb
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysBootcount() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysBootcount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysPartitionsEqual() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysPartitionsEqual
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysUptimeSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUptimeSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysAntiRollbackVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysAntiRollbackVersion
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysIsWitl() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsWitl
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysIsAviationConformed() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsAviationConformed
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysUbiMaxEc() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUbiMaxEc
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysUbiBadPeb() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUbiBadPeb
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysBoardRev() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysBoardRev
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzChannel
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna4Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna4Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna1Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna1Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna2Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna2Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna3Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna3Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna4Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna4Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzChannel
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna4Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna4Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna1Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna1Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna2Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna2Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna3Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna3Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna4Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna4Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzHighChannel
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna4Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna4Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna1Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna1Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna2Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna2Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna3Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna3Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighAntenna4Tssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighAntenna4Tssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzHighIfaceCount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighChanBusyFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighEdccaFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzHighTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighThermalTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzHighThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzHighThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzHighThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetBoardTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.BoardTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPoeMcuDieTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.PoeMcuDieTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLan1EthTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLan1EthTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5GhzHigh() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsEth
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5GhzRxBandwidth_20Mhz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5GhzRxBandwidth_20Mhz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5GhzRxBandwidth_40Mhz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5GhzRxBandwidth_40Mhz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5GhzRxBandwidth_80Mhz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5GhzRxBandwidth_80Mhz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater_5GhzHigh() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeaterEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeaterEth
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshHops
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshOneHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshOneHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshOneHopRssiAvg_5GhzHigh() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTwoHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTwoHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTwoHopRssiAvg_5GhzHigh() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterTxRateMbpsMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterTxRateMbpsMin
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterRxRateMbpsMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterRxRateMbpsMin
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterTxRateMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterTxRateMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterRxRateMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterRxRateMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterSecondsSince_2SOutageMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterSecondsSince_2SOutageMin
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterSecondsSince_5SOutageMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterSecondsSince_5SOutageMin
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterSecondsSince_2SOutageAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterSecondsSince_2SOutageAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterSecondsSince_5SOutageAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterSecondsSince_5SOutageAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterLatencyMs_1HMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterLatencyMs_1HMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRepeaterLatencyMs_1HAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RepeaterLatencyMs_1HAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTopologyChangeCount_1D() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshTopologyChangeCount_1D
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatency
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingLatencyLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatencyLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatency
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishLatencyLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatencyLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterRssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestWifiDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestWifiUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientRssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientIface() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientIface
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientOui() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSpeedtestClientOui
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientTxRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientRxRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientPlatformType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientPlatformType
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetDishCellId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DishCellId
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigSetupComplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSetupComplete
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigBandsSplit() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigBandsSplit
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsRepeater() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeater
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigOpenNetwork() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigOpenNetwork
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsAviation() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsAviation
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigSecureDns() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSecureDns
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigLegacy() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigLegacy
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigApMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigApMode
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDfsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDfsEnabled
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworkNameIsDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigNetworkNameIsDefault
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigRemoteSshEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigRemoteSshEnabled
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsRepeaterWired() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeaterWired
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsRepeaterWireless() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeaterWireless
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigBlockSchedulesSet() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigBlockSchedulesSet
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigCustomNameservers() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigCustomNameservers
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDisableMeshOnboarding() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDisableMeshOnboarding
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigPinCountryCode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigPinCountryCode
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDisableUpdateReboot() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDisableUpdateReboot
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDisable_2Ghz() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDisable_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDisable_5Ghz() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDisable_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDisable_5GhzHigh() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDisable_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigChannel_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigChannel_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigChannel_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigChannel_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigChannel_5GhzHigh() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigChannel_5GhzHigh
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworks() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigNetworks
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworksGuest() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigNetworksGuest
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworksHidden() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigNetworksHidden
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworksClientIsolation() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigNetworksClientIsolation
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworksBandsSplit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConfigNetworksBandsSplit
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetWanTrafficControlCakeBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.WanTrafficControlCakeBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetWanTrafficControlCakePackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.WanTrafficControlCakePackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetWanTrafficControlCakeDrops() *wrapperspb.Int64Value {
	if x != nil {
		return x.WanTrafficControlCakeDrops
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetWanTrafficControlCakeAckDrops() *wrapperspb.Int64Value {
	if x != nil {
		return x.WanTrafficControlCakeAckDrops
	}
	return nil
}

type StarlinkRouterAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source string                    `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Active bool                      `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Start  *telemetron.TimestampInfo `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End    *telemetron.TimestampInfo `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StarlinkRouterAlerts) Reset() {
	*x = StarlinkRouterAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterAlerts) ProtoMessage() {}

func (x *StarlinkRouterAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterAlerts.ProtoReflect.Descriptor instead.
func (*StarlinkRouterAlerts) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{46}
}

func (x *StarlinkRouterAlerts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StarlinkRouterAlerts) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StarlinkRouterAlerts) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StarlinkRouterAlerts) GetStart() *telemetron.TimestampInfo {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StarlinkRouterAlerts) GetEnd() *telemetron.TimestampInfo {
	if x != nil {
		return x.End
	}
	return nil
}

type StarlinkRouterClientSpeedtests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataRecord              *telemetron.TimestampInfo `protobuf:"bytes,2,opt,name=data_record,json=dataRecord,proto3" json:"data_record,omitempty"`
	Country                 string                    `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	SpeedtestId             *wrapperspb.StringValue   `protobuf:"bytes,30,opt,name=speedtest_id,json=speedtestId,proto3" json:"speedtest_id,omitempty"`
	ClientRssi              *wrapperspb.FloatValue    `protobuf:"bytes,8,opt,name=client_rssi,json=clientRssi,proto3" json:"client_rssi,omitempty"`
	RouterRssi              *wrapperspb.FloatValue    `protobuf:"bytes,9,opt,name=router_rssi,json=routerRssi,proto3" json:"router_rssi,omitempty"`
	ClientIface             *wrapperspb.UInt32Value   `protobuf:"bytes,10,opt,name=client_iface,json=clientIface,proto3" json:"client_iface,omitempty"`
	ClientOui               *wrapperspb.StringValue   `protobuf:"bytes,11,opt,name=client_oui,json=clientOui,proto3" json:"client_oui,omitempty"`
	ClientTxRate            *wrapperspb.UInt32Value   `protobuf:"bytes,12,opt,name=client_tx_rate,json=clientTxRate,proto3" json:"client_tx_rate,omitempty"`
	ClientRxRate            *wrapperspb.UInt32Value   `protobuf:"bytes,13,opt,name=client_rx_rate,json=clientRxRate,proto3" json:"client_rx_rate,omitempty"`
	ClientPlatformType      *wrapperspb.StringValue   `protobuf:"bytes,27,opt,name=client_platform_type,json=clientPlatformType,proto3" json:"client_platform_type,omitempty"`
	ClientAppVersion        *wrapperspb.StringValue   `protobuf:"bytes,34,opt,name=client_app_version,json=clientAppVersion,proto3" json:"client_app_version,omitempty"`
	ClientAppBuild          *wrapperspb.UInt32Value   `protobuf:"bytes,35,opt,name=client_app_build,json=clientAppBuild,proto3" json:"client_app_build,omitempty"`
	ClientRxPhyMode         *wrapperspb.UInt32Value   `protobuf:"bytes,31,opt,name=client_rx_phy_mode,json=clientRxPhyMode,proto3" json:"client_rx_phy_mode,omitempty"`
	ClientRxSpatialStreams  *wrapperspb.UInt32Value   `protobuf:"bytes,32,opt,name=client_rx_spatial_streams,json=clientRxSpatialStreams,proto3" json:"client_rx_spatial_streams,omitempty"`
	ClientRxMcs             *wrapperspb.UInt32Value   `protobuf:"bytes,33,opt,name=client_rx_mcs,json=clientRxMcs,proto3" json:"client_rx_mcs,omitempty"`
	ClientDownloadStartTime *telemetron.TimestampInfo `protobuf:"bytes,4,opt,name=client_download_start_time,json=clientDownloadStartTime,proto3" json:"client_download_start_time,omitempty"`
	ClientUploadStartTime   *telemetron.TimestampInfo `protobuf:"bytes,5,opt,name=client_upload_start_time,json=clientUploadStartTime,proto3" json:"client_upload_start_time,omitempty"`
	ClientDownloadMbpsAvg   *wrapperspb.FloatValue    `protobuf:"bytes,6,opt,name=client_download_mbps_avg,json=clientDownloadMbpsAvg,proto3" json:"client_download_mbps_avg,omitempty"`
	ClientUploadMbpsAvg     *wrapperspb.FloatValue    `protobuf:"bytes,7,opt,name=client_upload_mbps_avg,json=clientUploadMbpsAvg,proto3" json:"client_upload_mbps_avg,omitempty"`
	ClientTarget            *wrapperspb.StringValue   `protobuf:"bytes,28,opt,name=client_target,json=clientTarget,proto3" json:"client_target,omitempty"`
	ClientTcpStreams        *wrapperspb.UInt32Value   `protobuf:"bytes,16,opt,name=client_tcp_streams,json=clientTcpStreams,proto3" json:"client_tcp_streams,omitempty"`
	RouterDownloadStartTime *telemetron.TimestampInfo `protobuf:"bytes,17,opt,name=router_download_start_time,json=routerDownloadStartTime,proto3" json:"router_download_start_time,omitempty"`
	RouterUploadStartTime   *telemetron.TimestampInfo `protobuf:"bytes,18,opt,name=router_upload_start_time,json=routerUploadStartTime,proto3" json:"router_upload_start_time,omitempty"`
	RouterDownloadMbpsAvg   *wrapperspb.FloatValue    `protobuf:"bytes,19,opt,name=router_download_mbps_avg,json=routerDownloadMbpsAvg,proto3" json:"router_download_mbps_avg,omitempty"`
	RouterUploadMbpsAvg     *wrapperspb.FloatValue    `protobuf:"bytes,20,opt,name=router_upload_mbps_avg,json=routerUploadMbpsAvg,proto3" json:"router_upload_mbps_avg,omitempty"`
	RouterTarget            *wrapperspb.StringValue   `protobuf:"bytes,29,opt,name=router_target,json=routerTarget,proto3" json:"router_target,omitempty"`
	RouterTcpStreams        *wrapperspb.UInt32Value   `protobuf:"bytes,22,opt,name=router_tcp_streams,json=routerTcpStreams,proto3" json:"router_tcp_streams,omitempty"`
	WifiDownloadStartTime   *telemetron.TimestampInfo `protobuf:"bytes,23,opt,name=wifi_download_start_time,json=wifiDownloadStartTime,proto3" json:"wifi_download_start_time,omitempty"`
	WifiUploadStartTime     *telemetron.TimestampInfo `protobuf:"bytes,24,opt,name=wifi_upload_start_time,json=wifiUploadStartTime,proto3" json:"wifi_upload_start_time,omitempty"`
	WifiDownloadMbpsAvg     *wrapperspb.FloatValue    `protobuf:"bytes,25,opt,name=wifi_download_mbps_avg,json=wifiDownloadMbpsAvg,proto3" json:"wifi_download_mbps_avg,omitempty"`
	WifiUploadMbpsAvg       *wrapperspb.FloatValue    `protobuf:"bytes,26,opt,name=wifi_upload_mbps_avg,json=wifiUploadMbpsAvg,proto3" json:"wifi_upload_mbps_avg,omitempty"`
}

func (x *StarlinkRouterClientSpeedtests) Reset() {
	*x = StarlinkRouterClientSpeedtests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterClientSpeedtests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterClientSpeedtests) ProtoMessage() {}

func (x *StarlinkRouterClientSpeedtests) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterClientSpeedtests.ProtoReflect.Descriptor instead.
func (*StarlinkRouterClientSpeedtests) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{47}
}

func (x *StarlinkRouterClientSpeedtests) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StarlinkRouterClientSpeedtests) GetDataRecord() *telemetron.TimestampInfo {
	if x != nil {
		return x.DataRecord
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StarlinkRouterClientSpeedtests) GetSpeedtestId() *wrapperspb.StringValue {
	if x != nil {
		return x.SpeedtestId
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientRssi
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.RouterRssi
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientIface() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientIface
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientOui() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientOui
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientTxRate
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientRxRate
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientPlatformType() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientPlatformType
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientAppVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientAppVersion
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientAppBuild() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientAppBuild
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientRxPhyMode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientRxPhyMode
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientRxSpatialStreams() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientRxSpatialStreams
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientRxMcs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientRxMcs
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientDownloadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.ClientDownloadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientUploadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.ClientUploadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientDownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientDownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientUploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientUploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientTarget() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientTarget
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetClientTcpStreams() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientTcpStreams
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterDownloadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.RouterDownloadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterUploadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.RouterUploadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterDownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RouterDownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterUploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.RouterUploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterTarget() *wrapperspb.StringValue {
	if x != nil {
		return x.RouterTarget
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetRouterTcpStreams() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RouterTcpStreams
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetWifiDownloadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.WifiDownloadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetWifiUploadStartTime() *telemetron.TimestampInfo {
	if x != nil {
		return x.WifiUploadStartTime
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetWifiDownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.WifiDownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterClientSpeedtests) GetWifiUploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.WifiUploadMbpsAvg
	}
	return nil
}

type StarlinkRouterClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId              string                    `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Timestamp             *telemetron.TimestampInfo `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientId              uint32                    `protobuf:"varint,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RouterHw              *wrapperspb.StringValue   `protobuf:"bytes,119,opt,name=router_hw,json=routerHw,proto3" json:"router_hw,omitempty"`
	RouterSw              *wrapperspb.StringValue   `protobuf:"bytes,120,opt,name=router_sw,json=routerSw,proto3" json:"router_sw,omitempty"`
	ClientRouterId        *wrapperspb.StringValue   `protobuf:"bytes,121,opt,name=client_router_id,json=clientRouterId,proto3" json:"client_router_id,omitempty"`
	ClientHw              *wrapperspb.StringValue   `protobuf:"bytes,122,opt,name=client_hw,json=clientHw,proto3" json:"client_hw,omitempty"`
	ClientSw              *wrapperspb.StringValue   `protobuf:"bytes,123,opt,name=client_sw,json=clientSw,proto3" json:"client_sw,omitempty"`
	Oui                   *wrapperspb.StringValue   `protobuf:"bytes,101,opt,name=oui,proto3" json:"oui,omitempty"`
	UpstreamId            *wrapperspb.StringValue   `protobuf:"bytes,102,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
	IsRepeater            *wrapperspb.BoolValue     `protobuf:"bytes,103,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ConnectedS            *wrapperspb.UInt32Value   `protobuf:"bytes,104,opt,name=connected_s,json=connectedS,proto3" json:"connected_s,omitempty"`
	Interface             *wrapperspb.StringValue   `protobuf:"bytes,105,opt,name=interface,proto3" json:"interface,omitempty"`
	RadioChannel          *wrapperspb.UInt32Value   `protobuf:"bytes,106,opt,name=radio_channel,json=radioChannel,proto3" json:"radio_channel,omitempty"`
	Rssi                  *wrapperspb.FloatValue    `protobuf:"bytes,107,opt,name=rssi,proto3" json:"rssi,omitempty"`
	RxMcs                 *wrapperspb.UInt32Value   `protobuf:"bytes,108,opt,name=rx_mcs,json=rxMcs,proto3" json:"rx_mcs,omitempty"`
	TxMcs                 *wrapperspb.UInt32Value   `protobuf:"bytes,109,opt,name=tx_mcs,json=txMcs,proto3" json:"tx_mcs,omitempty"`
	RxRate                *wrapperspb.UInt32Value   `protobuf:"bytes,110,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	TxRate                *wrapperspb.UInt32Value   `protobuf:"bytes,111,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
	RxBandwidth           *wrapperspb.UInt32Value   `protobuf:"bytes,112,opt,name=rx_bandwidth,json=rxBandwidth,proto3" json:"rx_bandwidth,omitempty"`
	RxSpatialStreams      *wrapperspb.UInt32Value   `protobuf:"bytes,113,opt,name=rx_spatial_streams,json=rxSpatialStreams,proto3" json:"rx_spatial_streams,omitempty"`
	RxPhyMode             *wrapperspb.UInt32Value   `protobuf:"bytes,114,opt,name=rx_phy_mode,json=rxPhyMode,proto3" json:"rx_phy_mode,omitempty"`
	PingDropRateLast_1H   *wrapperspb.FloatValue    `protobuf:"bytes,115,opt,name=ping_drop_rate_last_1h,json=pingDropRateLast1h,proto3" json:"ping_drop_rate_last_1h,omitempty"`
	PingLatencyLast_1H    *wrapperspb.FloatValue    `protobuf:"bytes,116,opt,name=ping_latency_last_1h,json=pingLatencyLast1h,proto3" json:"ping_latency_last_1h,omitempty"`
	SteerState            *wrapperspb.StringValue   `protobuf:"bytes,117,opt,name=steer_state,json=steerState,proto3" json:"steer_state,omitempty"`
	MeshHops              *wrapperspb.UInt32Value   `protobuf:"bytes,118,opt,name=mesh_hops,json=meshHops,proto3" json:"mesh_hops,omitempty"`
	SpeedtestUploadMbps   *wrapperspb.FloatValue    `protobuf:"bytes,124,opt,name=speedtest_upload_mbps,json=speedtestUploadMbps,proto3" json:"speedtest_upload_mbps,omitempty"`
	SpeedtestDownloadMbps *wrapperspb.FloatValue    `protobuf:"bytes,125,opt,name=speedtest_download_mbps,json=speedtestDownloadMbps,proto3" json:"speedtest_download_mbps,omitempty"`
	Blocked               *wrapperspb.BoolValue     `protobuf:"bytes,126,opt,name=blocked,proto3" json:"blocked,omitempty"`
}

func (x *StarlinkRouterClients) Reset() {
	*x = StarlinkRouterClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterClients) ProtoMessage() {}

func (x *StarlinkRouterClients) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterClients.ProtoReflect.Descriptor instead.
func (*StarlinkRouterClients) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{48}
}

func (x *StarlinkRouterClients) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *StarlinkRouterClients) GetTimestamp() *telemetron.TimestampInfo {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StarlinkRouterClients) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *StarlinkRouterClients) GetRouterHw() *wrapperspb.StringValue {
	if x != nil {
		return x.RouterHw
	}
	return nil
}

func (x *StarlinkRouterClients) GetRouterSw() *wrapperspb.StringValue {
	if x != nil {
		return x.RouterSw
	}
	return nil
}

func (x *StarlinkRouterClients) GetClientRouterId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientRouterId
	}
	return nil
}

func (x *StarlinkRouterClients) GetClientHw() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientHw
	}
	return nil
}

func (x *StarlinkRouterClients) GetClientSw() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSw
	}
	return nil
}

func (x *StarlinkRouterClients) GetOui() *wrapperspb.StringValue {
	if x != nil {
		return x.Oui
	}
	return nil
}

func (x *StarlinkRouterClients) GetUpstreamId() *wrapperspb.StringValue {
	if x != nil {
		return x.UpstreamId
	}
	return nil
}

func (x *StarlinkRouterClients) GetIsRepeater() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsRepeater
	}
	return nil
}

func (x *StarlinkRouterClients) GetConnectedS() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ConnectedS
	}
	return nil
}

func (x *StarlinkRouterClients) GetInterface() *wrapperspb.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *StarlinkRouterClients) GetRadioChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RadioChannel
	}
	return nil
}

func (x *StarlinkRouterClients) GetRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *StarlinkRouterClients) GetRxMcs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RxMcs
	}
	return nil
}

func (x *StarlinkRouterClients) GetTxMcs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TxMcs
	}
	return nil
}

func (x *StarlinkRouterClients) GetRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RxRate
	}
	return nil
}

func (x *StarlinkRouterClients) GetTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TxRate
	}
	return nil
}

func (x *StarlinkRouterClients) GetRxBandwidth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RxBandwidth
	}
	return nil
}

func (x *StarlinkRouterClients) GetRxSpatialStreams() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RxSpatialStreams
	}
	return nil
}

func (x *StarlinkRouterClients) GetRxPhyMode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RxPhyMode
	}
	return nil
}

func (x *StarlinkRouterClients) GetPingDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRouterClients) GetPingLatencyLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatencyLast_1H
	}
	return nil
}

func (x *StarlinkRouterClients) GetSteerState() *wrapperspb.StringValue {
	if x != nil {
		return x.SteerState
	}
	return nil
}

func (x *StarlinkRouterClients) GetMeshHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshHops
	}
	return nil
}

func (x *StarlinkRouterClients) GetSpeedtestUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestUploadMbps
	}
	return nil
}

func (x *StarlinkRouterClients) GetSpeedtestDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterClients) GetBlocked() *wrapperspb.BoolValue {
	if x != nil {
		return x.Blocked
	}
	return nil
}

type WifiSetClientGivenNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	ClientName   *ClientName   `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientConfig *ClientConfig `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
}

func (x *WifiSetClientGivenNameRequest) Reset() {
	*x = WifiSetClientGivenNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetClientGivenNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetClientGivenNameRequest) ProtoMessage() {}

func (x *WifiSetClientGivenNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetClientGivenNameRequest.ProtoReflect.Descriptor instead.
func (*WifiSetClientGivenNameRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{49}
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *WifiSetClientGivenNameRequest) GetClientName() *ClientName {
	if x != nil {
		return x.ClientName
	}
	return nil
}

func (x *WifiSetClientGivenNameRequest) GetClientConfig() *ClientConfig {
	if x != nil {
		return x.ClientConfig
	}
	return nil
}

type WifiSelfTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSelfTestRequest) Reset() {
	*x = WifiSelfTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSelfTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSelfTestRequest) ProtoMessage() {}

func (x *WifiSelfTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSelfTestRequest.ProtoReflect.Descriptor instead.
func (*WifiSelfTestRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{50}
}

type WifiSelfTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfTest *WifiSelfTest `protobuf:"bytes,1,opt,name=self_test,json=selfTest,proto3" json:"self_test,omitempty"`
	Json     string        `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *WifiSelfTestResponse) Reset() {
	*x = WifiSelfTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSelfTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSelfTestResponse) ProtoMessage() {}

func (x *WifiSelfTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSelfTestResponse.ProtoReflect.Descriptor instead.
func (*WifiSelfTestResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{51}
}

func (x *WifiSelfTestResponse) GetSelfTest() *WifiSelfTest {
	if x != nil {
		return x.SelfTest
	}
	return nil
}

func (x *WifiSelfTestResponse) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type WifiRfTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumMeasurements  uint32 `protobuf:"varint,1,opt,name=num_measurements,json=numMeasurements,proto3" json:"num_measurements,omitempty"`
	Channel_2Ghz     uint32 `protobuf:"varint,2,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	Channel_5Ghz     uint32 `protobuf:"varint,3,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	Channel_5GhzHigh uint32 `protobuf:"varint,4,opt,name=channel_5ghz_high,json=channel5ghzHigh,proto3" json:"channel_5ghz_high,omitempty"`
	Mcs_2Ghz         uint32 `protobuf:"varint,5,opt,name=mcs_2ghz,json=mcs2ghz,proto3" json:"mcs_2ghz,omitempty"`
	Mcs_5Ghz         uint32 `protobuf:"varint,6,opt,name=mcs_5ghz,json=mcs5ghz,proto3" json:"mcs_5ghz,omitempty"`
	Mcs_5GhzHigh     uint32 `protobuf:"varint,7,opt,name=mcs_5ghz_high,json=mcs5ghzHigh,proto3" json:"mcs_5ghz_high,omitempty"`
	PhyMode_2Ghz     uint32 `protobuf:"varint,8,opt,name=phy_mode_2ghz,json=phyMode2ghz,proto3" json:"phy_mode_2ghz,omitempty"`
	PhyMode_5Ghz     uint32 `protobuf:"varint,9,opt,name=phy_mode_5ghz,json=phyMode5ghz,proto3" json:"phy_mode_5ghz,omitempty"`
	PhyMode_5GhzHigh uint32 `protobuf:"varint,10,opt,name=phy_mode_5ghz_high,json=phyMode5ghzHigh,proto3" json:"phy_mode_5ghz_high,omitempty"`
}

func (x *WifiRfTestRequest) Reset() {
	*x = WifiRfTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiRfTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiRfTestRequest) ProtoMessage() {}

func (x *WifiRfTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiRfTestRequest.ProtoReflect.Descriptor instead.
func (*WifiRfTestRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{52}
}

func (x *WifiRfTestRequest) GetNumMeasurements() uint32 {
	if x != nil {
		return x.NumMeasurements
	}
	return 0
}

func (x *WifiRfTestRequest) GetChannel_2Ghz() uint32 {
	if x != nil {
		return x.Channel_2Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetChannel_5Ghz() uint32 {
	if x != nil {
		return x.Channel_5Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetChannel_5GhzHigh() uint32 {
	if x != nil {
		return x.Channel_5GhzHigh
	}
	return 0
}

func (x *WifiRfTestRequest) GetMcs_2Ghz() uint32 {
	if x != nil {
		return x.Mcs_2Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetMcs_5Ghz() uint32 {
	if x != nil {
		return x.Mcs_5Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetMcs_5GhzHigh() uint32 {
	if x != nil {
		return x.Mcs_5GhzHigh
	}
	return 0
}

func (x *WifiRfTestRequest) GetPhyMode_2Ghz() uint32 {
	if x != nil {
		return x.PhyMode_2Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetPhyMode_5Ghz() uint32 {
	if x != nil {
		return x.PhyMode_5Ghz
	}
	return 0
}

func (x *WifiRfTestRequest) GetPhyMode_5GhzHigh() uint32 {
	if x != nil {
		return x.PhyMode_5GhzHigh
	}
	return 0
}

type WifiRfTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report string `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *WifiRfTestResponse) Reset() {
	*x = WifiRfTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiRfTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiRfTestResponse) ProtoMessage() {}

func (x *WifiRfTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiRfTestResponse.ProtoReflect.Descriptor instead.
func (*WifiRfTestResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{53}
}

func (x *WifiRfTestResponse) GetReport() string {
	if x != nil {
		return x.Report
	}
	return ""
}

type WifiGetFirewallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetFirewallRequest) Reset() {
	*x = WifiGetFirewallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetFirewallRequest) ProtoMessage() {}

func (x *WifiGetFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetFirewallRequest.ProtoReflect.Descriptor instead.
func (*WifiGetFirewallRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{54}
}

type WifiGetFirewallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iptables   string `protobuf:"bytes,1,opt,name=iptables,proto3" json:"iptables,omitempty"`
	Iptables_6 string `protobuf:"bytes,2,opt,name=iptables_6,json=iptables6,proto3" json:"iptables_6,omitempty"`
}

func (x *WifiGetFirewallResponse) Reset() {
	*x = WifiGetFirewallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetFirewallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetFirewallResponse) ProtoMessage() {}

func (x *WifiGetFirewallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetFirewallResponse.ProtoReflect.Descriptor instead.
func (*WifiGetFirewallResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{55}
}

func (x *WifiGetFirewallResponse) GetIptables() string {
	if x != nil {
		return x.Iptables
	}
	return ""
}

func (x *WifiGetFirewallResponse) GetIptables_6() string {
	if x != nil {
		return x.Iptables_6
	}
	return ""
}

type WifiTogglePoeNegotiationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *WifiTogglePoeNegotiationRequest) Reset() {
	*x = WifiTogglePoeNegotiationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiTogglePoeNegotiationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiTogglePoeNegotiationRequest) ProtoMessage() {}

func (x *WifiTogglePoeNegotiationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiTogglePoeNegotiationRequest.ProtoReflect.Descriptor instead.
func (*WifiTogglePoeNegotiationRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{56}
}

func (x *WifiTogglePoeNegotiationRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type WifiCalibrationModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiCalibrationModeRequest) Reset() {
	*x = WifiCalibrationModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiCalibrationModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiCalibrationModeRequest) ProtoMessage() {}

func (x *WifiCalibrationModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiCalibrationModeRequest.ProtoReflect.Descriptor instead.
func (*WifiCalibrationModeRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{57}
}

type StarlinkRouterHourlyMetricsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimestampDate                       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=timestamp_date,json=timestampDate,proto3" json:"timestamp_date,omitempty"`
	TimestampHour                       *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=timestamp_hour,json=timestampHour,proto3" json:"timestamp_hour,omitempty"`
	SysHwGen                            *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=sys_hw_gen,json=sysHwGen,proto3" json:"sys_hw_gen,omitempty"`
	SysSw                               *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=sys_sw,json=sysSw,proto3" json:"sys_sw,omitempty"`
	SysCountry                          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=sys_country,json=sysCountry,proto3" json:"sys_country,omitempty"`
	SysIsDev                            *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=sys_is_dev,json=sysIsDev,proto3" json:"sys_is_dev,omitempty"`
	SysAllocFds                         *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=sys_alloc_fds,json=sysAllocFds,proto3" json:"sys_alloc_fds,omitempty"`
	SysCpuUsage                         *wrapperspb.FloatValue  `protobuf:"bytes,9,opt,name=sys_cpu_usage,json=sysCpuUsage,proto3" json:"sys_cpu_usage,omitempty"`
	SysMemFreeKb                        *wrapperspb.FloatValue  `protobuf:"bytes,10,opt,name=sys_mem_free_kb,json=sysMemFreeKb,proto3" json:"sys_mem_free_kb,omitempty"`
	SysBootcount                        *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=sys_bootcount,json=sysBootcount,proto3" json:"sys_bootcount,omitempty"`
	SysPartitionsEqual                  *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=sys_partitions_equal,json=sysPartitionsEqual,proto3" json:"sys_partitions_equal,omitempty"`
	SysUptimeSeconds                    *wrapperspb.UInt32Value `protobuf:"bytes,13,opt,name=sys_uptime_seconds,json=sysUptimeSeconds,proto3" json:"sys_uptime_seconds,omitempty"`
	SysAntiRollbackVersion              *wrapperspb.Int32Value  `protobuf:"bytes,14,opt,name=sys_anti_rollback_version,json=sysAntiRollbackVersion,proto3" json:"sys_anti_rollback_version,omitempty"`
	Radios_2GhzChannel                  *wrapperspb.UInt32Value `protobuf:"bytes,100,opt,name=radios_2ghz_channel,json=radios2ghzChannel,proto3" json:"radios_2ghz_channel,omitempty"`
	Radios_2GhzAntenna1Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,101,opt,name=radios_2ghz_antenna1_rssi,json=radios2ghzAntenna1Rssi,proto3" json:"radios_2ghz_antenna1_rssi,omitempty"`
	Radios_2GhzAntenna2Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,102,opt,name=radios_2ghz_antenna2_rssi,json=radios2ghzAntenna2Rssi,proto3" json:"radios_2ghz_antenna2_rssi,omitempty"`
	Radios_2GhzAntenna3Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,103,opt,name=radios_2ghz_antenna3_rssi,json=radios2ghzAntenna3Rssi,proto3" json:"radios_2ghz_antenna3_rssi,omitempty"`
	Radios_2GhzIfaceCount               *wrapperspb.UInt32Value `protobuf:"bytes,104,opt,name=radios_2ghz_iface_count,json=radios2ghzIfaceCount,proto3" json:"radios_2ghz_iface_count,omitempty"`
	Radios_2GhzChanBusyFraction         *wrapperspb.FloatValue  `protobuf:"bytes,105,opt,name=radios_2ghz_chan_busy_fraction,json=radios2ghzChanBusyFraction,proto3" json:"radios_2ghz_chan_busy_fraction,omitempty"`
	Radios_2GhzEdccaFraction            *wrapperspb.FloatValue  `protobuf:"bytes,106,opt,name=radios_2ghz_edcca_fraction,json=radios2ghzEdccaFraction,proto3" json:"radios_2ghz_edcca_fraction,omitempty"`
	Radios_2GhzOverlappingBssFraction   *wrapperspb.FloatValue  `protobuf:"bytes,107,opt,name=radios_2ghz_overlapping_bss_fraction,json=radios2ghzOverlappingBssFraction,proto3" json:"radios_2ghz_overlapping_bss_fraction,omitempty"`
	Radios_2GhzRxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,108,opt,name=radios_2ghz_rx_bytes,json=radios2ghzRxBytes,proto3" json:"radios_2ghz_rx_bytes,omitempty"`
	Radios_2GhzRxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,109,opt,name=radios_2ghz_rx_packets,json=radios2ghzRxPackets,proto3" json:"radios_2ghz_rx_packets,omitempty"`
	Radios_2GhzRxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,110,opt,name=radios_2ghz_rx_errors,json=radios2ghzRxErrors,proto3" json:"radios_2ghz_rx_errors,omitempty"`
	Radios_2GhzRxFrameErrors            *wrapperspb.UInt32Value `protobuf:"bytes,111,opt,name=radios_2ghz_rx_frame_errors,json=radios2ghzRxFrameErrors,proto3" json:"radios_2ghz_rx_frame_errors,omitempty"`
	Radios_2GhzRxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,112,opt,name=radios_2ghz_rx_packet_error_rate,json=radios2ghzRxPacketErrorRate,proto3" json:"radios_2ghz_rx_packet_error_rate,omitempty"`
	Radios_2GhzRxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,113,opt,name=radios_2ghz_rx_airtime_fraction,json=radios2ghzRxAirtimeFraction,proto3" json:"radios_2ghz_rx_airtime_fraction,omitempty"`
	Radios_2GhzTxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,114,opt,name=radios_2ghz_tx_bytes,json=radios2ghzTxBytes,proto3" json:"radios_2ghz_tx_bytes,omitempty"`
	Radios_2GhzTxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,115,opt,name=radios_2ghz_tx_packets,json=radios2ghzTxPackets,proto3" json:"radios_2ghz_tx_packets,omitempty"`
	Radios_2GhzTxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,116,opt,name=radios_2ghz_tx_errors,json=radios2ghzTxErrors,proto3" json:"radios_2ghz_tx_errors,omitempty"`
	Radios_2GhzTxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,117,opt,name=radios_2ghz_tx_packet_error_rate,json=radios2ghzTxPacketErrorRate,proto3" json:"radios_2ghz_tx_packet_error_rate,omitempty"`
	Radios_2GhzTxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,118,opt,name=radios_2ghz_tx_airtime_fraction,json=radios2ghzTxAirtimeFraction,proto3" json:"radios_2ghz_tx_airtime_fraction,omitempty"`
	Radios_5GhzChannel                  *wrapperspb.UInt32Value `protobuf:"bytes,119,opt,name=radios_5ghz_channel,json=radios5ghzChannel,proto3" json:"radios_5ghz_channel,omitempty"`
	Radios_5GhzAntenna1Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,120,opt,name=radios_5ghz_antenna1_rssi,json=radios5ghzAntenna1Rssi,proto3" json:"radios_5ghz_antenna1_rssi,omitempty"`
	Radios_5GhzAntenna2Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,121,opt,name=radios_5ghz_antenna2_rssi,json=radios5ghzAntenna2Rssi,proto3" json:"radios_5ghz_antenna2_rssi,omitempty"`
	Radios_5GhzAntenna3Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,122,opt,name=radios_5ghz_antenna3_rssi,json=radios5ghzAntenna3Rssi,proto3" json:"radios_5ghz_antenna3_rssi,omitempty"`
	Radios_5GhzIfaceCount               *wrapperspb.UInt32Value `protobuf:"bytes,123,opt,name=radios_5ghz_iface_count,json=radios5ghzIfaceCount,proto3" json:"radios_5ghz_iface_count,omitempty"`
	Radios_5GhzChanBusyFraction         *wrapperspb.FloatValue  `protobuf:"bytes,124,opt,name=radios_5ghz_chan_busy_fraction,json=radios5ghzChanBusyFraction,proto3" json:"radios_5ghz_chan_busy_fraction,omitempty"`
	Radios_5GhzEdccaFraction            *wrapperspb.FloatValue  `protobuf:"bytes,125,opt,name=radios_5ghz_edcca_fraction,json=radios5ghzEdccaFraction,proto3" json:"radios_5ghz_edcca_fraction,omitempty"`
	Radios_5GhzOverlappingBssFraction   *wrapperspb.FloatValue  `protobuf:"bytes,126,opt,name=radios_5ghz_overlapping_bss_fraction,json=radios5ghzOverlappingBssFraction,proto3" json:"radios_5ghz_overlapping_bss_fraction,omitempty"`
	Radios_5GhzRxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,127,opt,name=radios_5ghz_rx_bytes,json=radios5ghzRxBytes,proto3" json:"radios_5ghz_rx_bytes,omitempty"`
	Radios_5GhzRxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,128,opt,name=radios_5ghz_rx_packets,json=radios5ghzRxPackets,proto3" json:"radios_5ghz_rx_packets,omitempty"`
	Radios_5GhzRxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,129,opt,name=radios_5ghz_rx_errors,json=radios5ghzRxErrors,proto3" json:"radios_5ghz_rx_errors,omitempty"`
	Radios_5GhzRxFrameErrors            *wrapperspb.UInt32Value `protobuf:"bytes,130,opt,name=radios_5ghz_rx_frame_errors,json=radios5ghzRxFrameErrors,proto3" json:"radios_5ghz_rx_frame_errors,omitempty"`
	Radios_5GhzRxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,131,opt,name=radios_5ghz_rx_packet_error_rate,json=radios5ghzRxPacketErrorRate,proto3" json:"radios_5ghz_rx_packet_error_rate,omitempty"`
	Radios_5GhzRxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,132,opt,name=radios_5ghz_rx_airtime_fraction,json=radios5ghzRxAirtimeFraction,proto3" json:"radios_5ghz_rx_airtime_fraction,omitempty"`
	Radios_5GhzTxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,133,opt,name=radios_5ghz_tx_bytes,json=radios5ghzTxBytes,proto3" json:"radios_5ghz_tx_bytes,omitempty"`
	Radios_5GhzTxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,134,opt,name=radios_5ghz_tx_packets,json=radios5ghzTxPackets,proto3" json:"radios_5ghz_tx_packets,omitempty"`
	Radios_5GhzTxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,135,opt,name=radios_5ghz_tx_errors,json=radios5ghzTxErrors,proto3" json:"radios_5ghz_tx_errors,omitempty"`
	Radios_5GhzTxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,136,opt,name=radios_5ghz_tx_packet_error_rate,json=radios5ghzTxPacketErrorRate,proto3" json:"radios_5ghz_tx_packet_error_rate,omitempty"`
	Radios_5GhzTxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,137,opt,name=radios_5ghz_tx_airtime_fraction,json=radios5ghzTxAirtimeFraction,proto3" json:"radios_5ghz_tx_airtime_fraction,omitempty"`
	Radios_2GhzThermalTemp              *wrapperspb.FloatValue  `protobuf:"bytes,200,opt,name=radios_2ghz_thermal_temp,json=radios2ghzThermalTemp,proto3" json:"radios_2ghz_thermal_temp,omitempty"`
	Radios_5GhzThermalTemp              *wrapperspb.FloatValue  `protobuf:"bytes,201,opt,name=radios_5ghz_thermal_temp,json=radios5ghzThermalTemp,proto3" json:"radios_5ghz_thermal_temp,omitempty"`
	Radios_2GhzThermalDutyCycle         *wrapperspb.FloatValue  `protobuf:"bytes,202,opt,name=radios_2ghz_thermal_duty_cycle,json=radios2ghzThermalDutyCycle,proto3" json:"radios_2ghz_thermal_duty_cycle,omitempty"`
	Radios_5GhzThermalDutyCycle         *wrapperspb.FloatValue  `protobuf:"bytes,203,opt,name=radios_5ghz_thermal_duty_cycle,json=radios5ghzThermalDutyCycle,proto3" json:"radios_5ghz_thermal_duty_cycle,omitempty"`
	Radios_2GhzThermalThrottledSeconds  *wrapperspb.UInt32Value `protobuf:"bytes,204,opt,name=radios_2ghz_thermal_throttled_seconds,json=radios2ghzThermalThrottledSeconds,proto3" json:"radios_2ghz_thermal_throttled_seconds,omitempty"`
	Radios_5GhzThermalThrottledSeconds  *wrapperspb.UInt32Value `protobuf:"bytes,205,opt,name=radios_5ghz_thermal_throttled_seconds,json=radios5ghzThermalThrottledSeconds,proto3" json:"radios_5ghz_thermal_throttled_seconds,omitempty"`
	IfacesLanEthRxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,300,opt,name=ifaces_lan_eth_rx_bytes,json=ifacesLanEthRxBytes,proto3" json:"ifaces_lan_eth_rx_bytes,omitempty"`
	IfacesLanEthRxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,301,opt,name=ifaces_lan_eth_rx_packets,json=ifacesLanEthRxPackets,proto3" json:"ifaces_lan_eth_rx_packets,omitempty"`
	IfacesLanEthRxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,302,opt,name=ifaces_lan_eth_rx_errors,json=ifacesLanEthRxErrors,proto3" json:"ifaces_lan_eth_rx_errors,omitempty"`
	IfacesLanEthRxFrameErrors           *wrapperspb.UInt32Value `protobuf:"bytes,303,opt,name=ifaces_lan_eth_rx_frame_errors,json=ifacesLanEthRxFrameErrors,proto3" json:"ifaces_lan_eth_rx_frame_errors,omitempty"`
	IfacesLanEthTxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,304,opt,name=ifaces_lan_eth_tx_bytes,json=ifacesLanEthTxBytes,proto3" json:"ifaces_lan_eth_tx_bytes,omitempty"`
	IfacesLanEthTxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,305,opt,name=ifaces_lan_eth_tx_packets,json=ifacesLanEthTxPackets,proto3" json:"ifaces_lan_eth_tx_packets,omitempty"`
	IfacesLanEthTxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,306,opt,name=ifaces_lan_eth_tx_errors,json=ifacesLanEthTxErrors,proto3" json:"ifaces_lan_eth_tx_errors,omitempty"`
	IfacesWanEthRxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,307,opt,name=ifaces_wan_eth_rx_bytes,json=ifacesWanEthRxBytes,proto3" json:"ifaces_wan_eth_rx_bytes,omitempty"`
	IfacesWanEthRxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,308,opt,name=ifaces_wan_eth_rx_packets,json=ifacesWanEthRxPackets,proto3" json:"ifaces_wan_eth_rx_packets,omitempty"`
	IfacesWanEthRxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,309,opt,name=ifaces_wan_eth_rx_errors,json=ifacesWanEthRxErrors,proto3" json:"ifaces_wan_eth_rx_errors,omitempty"`
	IfacesWanEthRxFrameErrors           *wrapperspb.UInt32Value `protobuf:"bytes,310,opt,name=ifaces_wan_eth_rx_frame_errors,json=ifacesWanEthRxFrameErrors,proto3" json:"ifaces_wan_eth_rx_frame_errors,omitempty"`
	IfacesWanEthTxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,311,opt,name=ifaces_wan_eth_tx_bytes,json=ifacesWanEthTxBytes,proto3" json:"ifaces_wan_eth_tx_bytes,omitempty"`
	IfacesWanEthTxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,312,opt,name=ifaces_wan_eth_tx_packets,json=ifacesWanEthTxPackets,proto3" json:"ifaces_wan_eth_tx_packets,omitempty"`
	IfacesWanEthTxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,313,opt,name=ifaces_wan_eth_tx_errors,json=ifacesWanEthTxErrors,proto3" json:"ifaces_wan_eth_tx_errors,omitempty"`
	Clients                             *wrapperspb.UInt32Value `protobuf:"bytes,400,opt,name=clients,proto3" json:"clients,omitempty"`
	Clients_2Ghz                        *wrapperspb.UInt32Value `protobuf:"bytes,401,opt,name=clients_2ghz,json=clients2ghz,proto3" json:"clients_2ghz,omitempty"`
	Clients_5Ghz                        *wrapperspb.UInt32Value `protobuf:"bytes,402,opt,name=clients_5ghz,json=clients5ghz,proto3" json:"clients_5ghz,omitempty"`
	ClientsEth                          *wrapperspb.UInt32Value `protobuf:"bytes,403,opt,name=clients_eth,json=clientsEth,proto3" json:"clients_eth,omitempty"`
	ClientsRepeater                     *wrapperspb.UInt32Value `protobuf:"bytes,404,opt,name=clients_repeater,json=clientsRepeater,proto3" json:"clients_repeater,omitempty"`
	ClientsRepeater_2Ghz                *wrapperspb.UInt32Value `protobuf:"bytes,405,opt,name=clients_repeater_2ghz,json=clientsRepeater2ghz,proto3" json:"clients_repeater_2ghz,omitempty"`
	ClientsRepeater_5Ghz                *wrapperspb.UInt32Value `protobuf:"bytes,406,opt,name=clients_repeater_5ghz,json=clientsRepeater5ghz,proto3" json:"clients_repeater_5ghz,omitempty"`
	ClientsRepeaterEth                  *wrapperspb.UInt32Value `protobuf:"bytes,407,opt,name=clients_repeater_eth,json=clientsRepeaterEth,proto3" json:"clients_repeater_eth,omitempty"`
	MeshHops                            *wrapperspb.UInt32Value `protobuf:"bytes,408,opt,name=mesh_hops,json=meshHops,proto3" json:"mesh_hops,omitempty"`
	MeshOneHopRssiAvg_2Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,409,opt,name=mesh_one_hop_rssi_avg_2ghz,json=meshOneHopRssiAvg2ghz,proto3" json:"mesh_one_hop_rssi_avg_2ghz,omitempty"`
	MeshOneHopRssiAvg_5Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,410,opt,name=mesh_one_hop_rssi_avg_5ghz,json=meshOneHopRssiAvg5ghz,proto3" json:"mesh_one_hop_rssi_avg_5ghz,omitempty"`
	MeshTwoHopRssiAvg_2Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,411,opt,name=mesh_two_hop_rssi_avg_2ghz,json=meshTwoHopRssiAvg2ghz,proto3" json:"mesh_two_hop_rssi_avg_2ghz,omitempty"`
	MeshTwoHopRssiAvg_5Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,412,opt,name=mesh_two_hop_rssi_avg_5ghz,json=meshTwoHopRssiAvg5ghz,proto3" json:"mesh_two_hop_rssi_avg_5ghz,omitempty"`
	PingSecondsSinceLast_1SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,600,opt,name=ping_seconds_since_last_1s_outage,json=pingSecondsSinceLast1sOutage,proto3" json:"ping_seconds_since_last_1s_outage,omitempty"`
	PingSecondsSinceLast_2SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,601,opt,name=ping_seconds_since_last_2s_outage,json=pingSecondsSinceLast2sOutage,proto3" json:"ping_seconds_since_last_2s_outage,omitempty"`
	PingSecondsSinceLast_5SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,602,opt,name=ping_seconds_since_last_5s_outage,json=pingSecondsSinceLast5sOutage,proto3" json:"ping_seconds_since_last_5s_outage,omitempty"`
	PingSecondsSinceLast_60SOutage      *wrapperspb.FloatValue  `protobuf:"bytes,603,opt,name=ping_seconds_since_last_60s_outage,json=pingSecondsSinceLast60sOutage,proto3" json:"ping_seconds_since_last_60s_outage,omitempty"`
	PingSecondsSinceLast_300SOutage     *wrapperspb.FloatValue  `protobuf:"bytes,604,opt,name=ping_seconds_since_last_300s_outage,json=pingSecondsSinceLast300sOutage,proto3" json:"ping_seconds_since_last_300s_outage,omitempty"`
	PingDropRate                        *wrapperspb.FloatValue  `protobuf:"bytes,605,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingDropRateLast_1H                 *wrapperspb.FloatValue  `protobuf:"bytes,606,opt,name=ping_drop_rate_last_1h,json=pingDropRateLast1h,proto3" json:"ping_drop_rate_last_1h,omitempty"`
	PingLatency                         *wrapperspb.FloatValue  `protobuf:"bytes,607,opt,name=ping_latency,json=pingLatency,proto3" json:"ping_latency,omitempty"`
	PingDishSecondsSinceLast_1SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,610,opt,name=ping_dish_seconds_since_last_1s_outage,json=pingDishSecondsSinceLast1sOutage,proto3" json:"ping_dish_seconds_since_last_1s_outage,omitempty"`
	PingDishSecondsSinceLast_2SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,611,opt,name=ping_dish_seconds_since_last_2s_outage,json=pingDishSecondsSinceLast2sOutage,proto3" json:"ping_dish_seconds_since_last_2s_outage,omitempty"`
	PingDishSecondsSinceLast_5SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,612,opt,name=ping_dish_seconds_since_last_5s_outage,json=pingDishSecondsSinceLast5sOutage,proto3" json:"ping_dish_seconds_since_last_5s_outage,omitempty"`
	PingDishSecondsSinceLast_60SOutage  *wrapperspb.FloatValue  `protobuf:"bytes,613,opt,name=ping_dish_seconds_since_last_60s_outage,json=pingDishSecondsSinceLast60sOutage,proto3" json:"ping_dish_seconds_since_last_60s_outage,omitempty"`
	PingDishSecondsSinceLast_300SOutage *wrapperspb.FloatValue  `protobuf:"bytes,614,opt,name=ping_dish_seconds_since_last_300s_outage,json=pingDishSecondsSinceLast300sOutage,proto3" json:"ping_dish_seconds_since_last_300s_outage,omitempty"`
	PingDishDropRate                    *wrapperspb.FloatValue  `protobuf:"bytes,615,opt,name=ping_dish_drop_rate,json=pingDishDropRate,proto3" json:"ping_dish_drop_rate,omitempty"`
	PingDishDropRateLast_1H             *wrapperspb.FloatValue  `protobuf:"bytes,616,opt,name=ping_dish_drop_rate_last_1h,json=pingDishDropRateLast1h,proto3" json:"ping_dish_drop_rate_last_1h,omitempty"`
	PingDishLatency                     *wrapperspb.FloatValue  `protobuf:"bytes,617,opt,name=ping_dish_latency,json=pingDishLatency,proto3" json:"ping_dish_latency,omitempty"`
	ClientSpeedtestRouterDownloadMbps   *wrapperspb.FloatValue  `protobuf:"bytes,700,opt,name=client_speedtest_router_download_mbps,json=clientSpeedtestRouterDownloadMbps,proto3" json:"client_speedtest_router_download_mbps,omitempty"`
	ClientSpeedtestRouterUploadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,701,opt,name=client_speedtest_router_upload_mbps,json=clientSpeedtestRouterUploadMbps,proto3" json:"client_speedtest_router_upload_mbps,omitempty"`
	ClientSpeedtestRouterRssi           *wrapperspb.FloatValue  `protobuf:"bytes,702,opt,name=client_speedtest_router_rssi,json=clientSpeedtestRouterRssi,proto3" json:"client_speedtest_router_rssi,omitempty"`
	ClientSpeedtestWifiDownloadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,703,opt,name=client_speedtest_wifi_download_mbps,json=clientSpeedtestWifiDownloadMbps,proto3" json:"client_speedtest_wifi_download_mbps,omitempty"`
	ClientSpeedtestWifiUploadMbps       *wrapperspb.FloatValue  `protobuf:"bytes,704,opt,name=client_speedtest_wifi_upload_mbps,json=clientSpeedtestWifiUploadMbps,proto3" json:"client_speedtest_wifi_upload_mbps,omitempty"`
	ClientSpeedtestClientDownloadMbps   *wrapperspb.FloatValue  `protobuf:"bytes,705,opt,name=client_speedtest_client_download_mbps,json=clientSpeedtestClientDownloadMbps,proto3" json:"client_speedtest_client_download_mbps,omitempty"`
	ClientSpeedtestClientUploadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,706,opt,name=client_speedtest_client_upload_mbps,json=clientSpeedtestClientUploadMbps,proto3" json:"client_speedtest_client_upload_mbps,omitempty"`
	ClientSpeedtestClientRssi           *wrapperspb.FloatValue  `protobuf:"bytes,707,opt,name=client_speedtest_client_rssi,json=clientSpeedtestClientRssi,proto3" json:"client_speedtest_client_rssi,omitempty"`
	ClientSpeedtestClientIface          *wrapperspb.UInt32Value `protobuf:"bytes,708,opt,name=client_speedtest_client_iface,json=clientSpeedtestClientIface,proto3" json:"client_speedtest_client_iface,omitempty"`
	ClientSpeedtestClientOui            *wrapperspb.StringValue `protobuf:"bytes,709,opt,name=client_speedtest_client_oui,json=clientSpeedtestClientOui,proto3" json:"client_speedtest_client_oui,omitempty"`
	ClientSpeedtestClientTxRate         *wrapperspb.UInt32Value `protobuf:"bytes,710,opt,name=client_speedtest_client_tx_rate,json=clientSpeedtestClientTxRate,proto3" json:"client_speedtest_client_tx_rate,omitempty"`
	ClientSpeedtestClientRxRate         *wrapperspb.UInt32Value `protobuf:"bytes,711,opt,name=client_speedtest_client_rx_rate,json=clientSpeedtestClientRxRate,proto3" json:"client_speedtest_client_rx_rate,omitempty"`
	ClientSpeedtestClientPlatformType   *wrapperspb.UInt32Value `protobuf:"bytes,712,opt,name=client_speedtest_client_platform_type,json=clientSpeedtestClientPlatformType,proto3" json:"client_speedtest_client_platform_type,omitempty"`
	SpeedtestTcp_8DownloadMbpsAvg       *wrapperspb.FloatValue  `protobuf:"bytes,800,opt,name=speedtest_tcp_8_download_mbps_avg,json=speedtestTcp8DownloadMbpsAvg,proto3" json:"speedtest_tcp_8_download_mbps_avg,omitempty"`
	SpeedtestTcp_8DownloadMbpsMax       *wrapperspb.FloatValue  `protobuf:"bytes,801,opt,name=speedtest_tcp_8_download_mbps_max,json=speedtestTcp8DownloadMbpsMax,proto3" json:"speedtest_tcp_8_download_mbps_max,omitempty"`
	SpeedtestTcp_8UploadMbpsAvg         *wrapperspb.FloatValue  `protobuf:"bytes,802,opt,name=speedtest_tcp_8_upload_mbps_avg,json=speedtestTcp8UploadMbpsAvg,proto3" json:"speedtest_tcp_8_upload_mbps_avg,omitempty"`
	SpeedtestTcp_8UploadMbpsMax         *wrapperspb.FloatValue  `protobuf:"bytes,803,opt,name=speedtest_tcp_8_upload_mbps_max,json=speedtestTcp8UploadMbpsMax,proto3" json:"speedtest_tcp_8_upload_mbps_max,omitempty"`
	SpeedtestTcp_64DownloadMbpsAvg      *wrapperspb.FloatValue  `protobuf:"bytes,804,opt,name=speedtest_tcp_64_download_mbps_avg,json=speedtestTcp64DownloadMbpsAvg,proto3" json:"speedtest_tcp_64_download_mbps_avg,omitempty"`
	SpeedtestTcp_64DownloadMbpsMax      *wrapperspb.FloatValue  `protobuf:"bytes,805,opt,name=speedtest_tcp_64_download_mbps_max,json=speedtestTcp64DownloadMbpsMax,proto3" json:"speedtest_tcp_64_download_mbps_max,omitempty"`
	SpeedtestTcp_64UploadMbpsAvg        *wrapperspb.FloatValue  `protobuf:"bytes,806,opt,name=speedtest_tcp_64_upload_mbps_avg,json=speedtestTcp64UploadMbpsAvg,proto3" json:"speedtest_tcp_64_upload_mbps_avg,omitempty"`
	SpeedtestTcp_64UploadMbpsMax        *wrapperspb.FloatValue  `protobuf:"bytes,807,opt,name=speedtest_tcp_64_upload_mbps_max,json=speedtestTcp64UploadMbpsMax,proto3" json:"speedtest_tcp_64_upload_mbps_max,omitempty"`
	DishCellId                          *wrapperspb.UInt32Value `protobuf:"bytes,900,opt,name=dish_cell_id,json=dishCellId,proto3" json:"dish_cell_id,omitempty"`
	ConfigSetupComplete                 *wrapperspb.BoolValue   `protobuf:"bytes,1000,opt,name=config_setup_complete,json=configSetupComplete,proto3" json:"config_setup_complete,omitempty"`
	ConfigBandsSplit                    *wrapperspb.BoolValue   `protobuf:"bytes,1001,opt,name=config_bands_split,json=configBandsSplit,proto3" json:"config_bands_split,omitempty"`
	ConfigIsRepeater                    *wrapperspb.BoolValue   `protobuf:"bytes,1002,opt,name=config_is_repeater,json=configIsRepeater,proto3" json:"config_is_repeater,omitempty"`
	ConfigOpenNetwork                   *wrapperspb.BoolValue   `protobuf:"bytes,1003,opt,name=config_open_network,json=configOpenNetwork,proto3" json:"config_open_network,omitempty"`
	ConfigIsAviation                    *wrapperspb.BoolValue   `protobuf:"bytes,1004,opt,name=config_is_aviation,json=configIsAviation,proto3" json:"config_is_aviation,omitempty"`
	ConfigSecureDns                     *wrapperspb.BoolValue   `protobuf:"bytes,1005,opt,name=config_secure_dns,json=configSecureDns,proto3" json:"config_secure_dns,omitempty"`
	ConfigLegacy                        *wrapperspb.BoolValue   `protobuf:"bytes,1006,opt,name=config_legacy,json=configLegacy,proto3" json:"config_legacy,omitempty"`
	ConfigApMode                        *wrapperspb.BoolValue   `protobuf:"bytes,1007,opt,name=config_ap_mode,json=configApMode,proto3" json:"config_ap_mode,omitempty"`
	ConfigDfsEnabled                    *wrapperspb.BoolValue   `protobuf:"bytes,1008,opt,name=config_dfs_enabled,json=configDfsEnabled,proto3" json:"config_dfs_enabled,omitempty"`
	ConfigNetworkNameIsDefault          *wrapperspb.BoolValue   `protobuf:"bytes,1009,opt,name=config_network_name_is_default,json=configNetworkNameIsDefault,proto3" json:"config_network_name_is_default,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	ConfigRemoteSshEnabled *wrapperspb.BoolValue `protobuf:"bytes,1010,opt,name=config_remote_ssh_enabled,json=configRemoteSshEnabled,proto3" json:"config_remote_ssh_enabled,omitempty"`
}

func (x *StarlinkRouterHourlyMetricsV2) Reset() {
	*x = StarlinkRouterHourlyMetricsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterHourlyMetricsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterHourlyMetricsV2) ProtoMessage() {}

func (x *StarlinkRouterHourlyMetricsV2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterHourlyMetricsV2.ProtoReflect.Descriptor instead.
func (*StarlinkRouterHourlyMetricsV2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{58}
}

func (x *StarlinkRouterHourlyMetricsV2) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetTimestampDate() *wrapperspb.StringValue {
	if x != nil {
		return x.TimestampDate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetTimestampHour() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TimestampHour
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysHwGen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysHwGen
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysSw() *wrapperspb.StringValue {
	if x != nil {
		return x.SysSw
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.SysCountry
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysIsDev() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsDev
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysAllocFds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysAllocFds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysCpuUsage() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysCpuUsage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysMemFreeKb() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysMemFreeKb
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysBootcount() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysBootcount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysPartitionsEqual() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysPartitionsEqual
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysUptimeSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUptimeSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysAntiRollbackVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysAntiRollbackVersion
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzChannel
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzChannel
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsEth
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeaterEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeaterEth
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshHops
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshOneHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshOneHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshTwoHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshTwoHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatency
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatency
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterRssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestWifiDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestWifiUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientRssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientIface() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientIface
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientOui() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSpeedtestClientOui
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientTxRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientRxRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientPlatformType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientPlatformType
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetDishCellId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DishCellId
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigSetupComplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSetupComplete
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigBandsSplit() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigBandsSplit
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigIsRepeater() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeater
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigOpenNetwork() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigOpenNetwork
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigIsAviation() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsAviation
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigSecureDns() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSecureDns
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigLegacy() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigLegacy
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigApMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigApMode
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigDfsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDfsEnabled
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigNetworkNameIsDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigNetworkNameIsDefault
	}
	return nil
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *StarlinkRouterHourlyMetricsV2) GetConfigRemoteSshEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigRemoteSshEnabled
	}
	return nil
}

type WifiGuestInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGuestInfoRequest) Reset() {
	*x = WifiGuestInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGuestInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGuestInfoRequest) ProtoMessage() {}

func (x *WifiGuestInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGuestInfoRequest.ProtoReflect.Descriptor instead.
func (*WifiGuestInfoRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{59}
}

type WifiGuestInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGuest                   bool   `protobuf:"varint,1,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`
	IsOnline                  bool   `protobuf:"varint,2,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	RouterHardwareVersion     string `protobuf:"bytes,3,opt,name=router_hardware_version,json=routerHardwareVersion,proto3" json:"router_hardware_version,omitempty"`
	DishHardwareVersion       string `protobuf:"bytes,4,opt,name=dish_hardware_version,json=dishHardwareVersion,proto3" json:"dish_hardware_version,omitempty"`
	IsRouterAviationConformed bool   `protobuf:"varint,5,opt,name=is_router_aviation_conformed,json=isRouterAviationConformed,proto3" json:"is_router_aviation_conformed,omitempty"`
}

func (x *WifiGuestInfoResponse) Reset() {
	*x = WifiGuestInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGuestInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGuestInfoResponse) ProtoMessage() {}

func (x *WifiGuestInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGuestInfoResponse.ProtoReflect.Descriptor instead.
func (*WifiGuestInfoResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{60}
}

func (x *WifiGuestInfoResponse) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *WifiGuestInfoResponse) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *WifiGuestInfoResponse) GetRouterHardwareVersion() string {
	if x != nil {
		return x.RouterHardwareVersion
	}
	return ""
}

func (x *WifiGuestInfoResponse) GetDishHardwareVersion() string {
	if x != nil {
		return x.DishHardwareVersion
	}
	return ""
}

func (x *WifiGuestInfoResponse) GetIsRouterAviationConformed() bool {
	if x != nil {
		return x.IsRouterAviationConformed
	}
	return false
}

type WifiFactoryTestCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*WifiFactoryTestCommandRequest_IwprivCommand
	//	*WifiFactoryTestCommandRequest_IpLinkSetCommand
	//	*WifiFactoryTestCommandRequest_IpAddrSetCommand
	Command isWifiFactoryTestCommandRequest_Command `protobuf_oneof:"command"`
}

func (x *WifiFactoryTestCommandRequest) Reset() {
	*x = WifiFactoryTestCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiFactoryTestCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiFactoryTestCommandRequest) ProtoMessage() {}

func (x *WifiFactoryTestCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiFactoryTestCommandRequest.ProtoReflect.Descriptor instead.
func (*WifiFactoryTestCommandRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{61}
}

func (m *WifiFactoryTestCommandRequest) GetCommand() isWifiFactoryTestCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *WifiFactoryTestCommandRequest) GetIwprivCommand() *IwprivCommand {
	if x, ok := x.GetCommand().(*WifiFactoryTestCommandRequest_IwprivCommand); ok {
		return x.IwprivCommand
	}
	return nil
}

func (x *WifiFactoryTestCommandRequest) GetIpLinkSetCommand() *IpLinkSetCommand {
	if x, ok := x.GetCommand().(*WifiFactoryTestCommandRequest_IpLinkSetCommand); ok {
		return x.IpLinkSetCommand
	}
	return nil
}

func (x *WifiFactoryTestCommandRequest) GetIpAddrSetCommand() *IpAddrSetCommand {
	if x, ok := x.GetCommand().(*WifiFactoryTestCommandRequest_IpAddrSetCommand); ok {
		return x.IpAddrSetCommand
	}
	return nil
}

type isWifiFactoryTestCommandRequest_Command interface {
	isWifiFactoryTestCommandRequest_Command()
}

type WifiFactoryTestCommandRequest_IwprivCommand struct {
	IwprivCommand *IwprivCommand `protobuf:"bytes,1,opt,name=iwpriv_command,json=iwprivCommand,proto3,oneof"`
}

type WifiFactoryTestCommandRequest_IpLinkSetCommand struct {
	IpLinkSetCommand *IpLinkSetCommand `protobuf:"bytes,2,opt,name=ip_link_set_command,json=ipLinkSetCommand,proto3,oneof"`
}

type WifiFactoryTestCommandRequest_IpAddrSetCommand struct {
	IpAddrSetCommand *IpAddrSetCommand `protobuf:"bytes,3,opt,name=ip_addr_set_command,json=ipAddrSetCommand,proto3,oneof"`
}

func (*WifiFactoryTestCommandRequest_IwprivCommand) isWifiFactoryTestCommandRequest_Command() {}

func (*WifiFactoryTestCommandRequest_IpLinkSetCommand) isWifiFactoryTestCommandRequest_Command() {}

func (*WifiFactoryTestCommandRequest_IpAddrSetCommand) isWifiFactoryTestCommandRequest_Command() {}

type WifiFactoryTestCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *WifiFactoryTestCommandResponse) Reset() {
	*x = WifiFactoryTestCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiFactoryTestCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiFactoryTestCommandResponse) ProtoMessage() {}

func (x *WifiFactoryTestCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiFactoryTestCommandResponse.ProtoReflect.Descriptor instead.
func (*WifiFactoryTestCommandResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{62}
}

func (x *WifiFactoryTestCommandResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type IwprivCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iface string              `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	Arg   string              `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Ioctl IwprivCommand_Ioctl `protobuf:"varint,3,opt,name=ioctl,proto3,enum=SpaceX.API.Device.IwprivCommand_Ioctl" json:"ioctl,omitempty"`
}

func (x *IwprivCommand) Reset() {
	*x = IwprivCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IwprivCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IwprivCommand) ProtoMessage() {}

func (x *IwprivCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IwprivCommand.ProtoReflect.Descriptor instead.
func (*IwprivCommand) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{63}
}

func (x *IwprivCommand) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *IwprivCommand) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

func (x *IwprivCommand) GetIoctl() IwprivCommand_Ioctl {
	if x != nil {
		return x.Ioctl
	}
	return IwprivCommand_IOCTL_SET
}

type IpLinkSetCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iface string `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	Up    bool   `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
}

func (x *IpLinkSetCommand) Reset() {
	*x = IpLinkSetCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpLinkSetCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpLinkSetCommand) ProtoMessage() {}

func (x *IpLinkSetCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpLinkSetCommand.ProtoReflect.Descriptor instead.
func (*IpLinkSetCommand) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{64}
}

func (x *IpLinkSetCommand) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *IpLinkSetCommand) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

type IpAddrSetCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iface string `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	Add   bool   `protobuf:"varint,2,opt,name=add,proto3" json:"add,omitempty"`
	Cidr  string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (x *IpAddrSetCommand) Reset() {
	*x = IpAddrSetCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddrSetCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddrSetCommand) ProtoMessage() {}

func (x *IpAddrSetCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddrSetCommand.ProtoReflect.Descriptor instead.
func (*IpAddrSetCommand) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{65}
}

func (x *IpAddrSetCommand) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *IpAddrSetCommand) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

func (x *IpAddrSetCommand) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type WifiStartLocalTelemProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *WifiStartLocalTelemProxyRequest) Reset() {
	*x = WifiStartLocalTelemProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiStartLocalTelemProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiStartLocalTelemProxyRequest) ProtoMessage() {}

func (x *WifiStartLocalTelemProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiStartLocalTelemProxyRequest.ProtoReflect.Descriptor instead.
func (*WifiStartLocalTelemProxyRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{66}
}

func (x *WifiStartLocalTelemProxyRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SteerClientRequest_SteerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Bssid string `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Channel int32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *SteerClientRequest_SteerTarget) Reset() {
	*x = SteerClientRequest_SteerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteerClientRequest_SteerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteerClientRequest_SteerTarget) ProtoMessage() {}

func (x *SteerClientRequest_SteerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteerClientRequest_SteerTarget.ProtoReflect.Descriptor instead.
func (*SteerClientRequest_SteerTarget) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{10, 0}
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *SteerClientRequest_SteerTarget) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *SteerClientRequest_SteerTarget) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type WifiBtmRequest_NeighborReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid   string `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Channel uint32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *WifiBtmRequest_NeighborReport) Reset() {
	*x = WifiBtmRequest_NeighborReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBtmRequest_NeighborReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBtmRequest_NeighborReport) ProtoMessage() {}

func (x *WifiBtmRequest_NeighborReport) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBtmRequest_NeighborReport.ProtoReflect.Descriptor instead.
func (*WifiBtmRequest_NeighborReport) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{11, 0}
}

func (x *WifiBtmRequest_NeighborReport) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiBtmRequest_NeighborReport) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type WifiSelfTest_TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Success       bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	FailureReason string `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *WifiSelfTest_TestResult) Reset() {
	*x = WifiSelfTest_TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSelfTest_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSelfTest_TestResult) ProtoMessage() {}

func (x *WifiSelfTest_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSelfTest_TestResult.ProtoReflect.Descriptor instead.
func (*WifiSelfTest_TestResult) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{12, 0}
}

func (x *WifiSelfTest_TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WifiSelfTest_TestResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WifiSelfTest_TestResult) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type WifiClient_RxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes                  uint64  `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountErrors            uint64  `protobuf:"varint,2,opt,name=count_errors,json=countErrors,proto3" json:"count_errors,omitempty"`
	PhyMode                uint32  `protobuf:"varint,13,opt,name=phy_mode,json=phyMode,proto3" json:"phy_mode,omitempty"`
	Nss                    int32   `protobuf:"varint,3,opt,name=nss,proto3" json:"nss,omitempty"`
	RateMbps               uint32  `protobuf:"varint,8,opt,name=rate_mbps,json=rateMbps,proto3" json:"rate_mbps,omitempty"`
	RateMbpsLast_30S       float32 `protobuf:"fixed32,14,opt,name=rate_mbps_last_30s,json=rateMbpsLast30s,proto3" json:"rate_mbps_last_30s,omitempty"`
	RateMbpsLast_15S       float32 `protobuf:"fixed32,15,opt,name=rate_mbps_last_15s,json=rateMbpsLast15s,proto3" json:"rate_mbps_last_15s,omitempty"`
	Mcs                    uint32  `protobuf:"varint,5,opt,name=mcs,proto3" json:"mcs,omitempty"`
	Bandwidth              uint32  `protobuf:"varint,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	GuardNs                uint32  `protobuf:"varint,7,opt,name=guard_ns,json=guardNs,proto3" json:"guard_ns,omitempty"`
	AirtimeFractionLast_1S float32 `protobuf:"fixed32,9,opt,name=airtime_fraction_last_1s,json=airtimeFractionLast1s,proto3" json:"airtime_fraction_last_1s,omitempty"`
	SampledPackets         uint32  `protobuf:"varint,10,opt,name=sampled_packets,json=sampledPackets,proto3" json:"sampled_packets,omitempty"`
	SampledPacketsRetried  uint32  `protobuf:"varint,11,opt,name=sampled_packets_retried,json=sampledPacketsRetried,proto3" json:"sampled_packets_retried,omitempty"`
	SampledPacketsDropped  uint32  `protobuf:"varint,12,opt,name=sampled_packets_dropped,json=sampledPacketsDropped,proto3" json:"sampled_packets_dropped,omitempty"`
}

func (x *WifiClient_RxStats) Reset() {
	*x = WifiClient_RxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_RxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_RxStats) ProtoMessage() {}

func (x *WifiClient_RxStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_RxStats.ProtoReflect.Descriptor instead.
func (*WifiClient_RxStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 0}
}

func (x *WifiClient_RxStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *WifiClient_RxStats) GetCountErrors() uint64 {
	if x != nil {
		return x.CountErrors
	}
	return 0
}

func (x *WifiClient_RxStats) GetPhyMode() uint32 {
	if x != nil {
		return x.PhyMode
	}
	return 0
}

func (x *WifiClient_RxStats) GetNss() int32 {
	if x != nil {
		return x.Nss
	}
	return 0
}

func (x *WifiClient_RxStats) GetRateMbps() uint32 {
	if x != nil {
		return x.RateMbps
	}
	return 0
}

func (x *WifiClient_RxStats) GetRateMbpsLast_30S() float32 {
	if x != nil {
		return x.RateMbpsLast_30S
	}
	return 0
}

func (x *WifiClient_RxStats) GetRateMbpsLast_15S() float32 {
	if x != nil {
		return x.RateMbpsLast_15S
	}
	return 0
}

func (x *WifiClient_RxStats) GetMcs() uint32 {
	if x != nil {
		return x.Mcs
	}
	return 0
}

func (x *WifiClient_RxStats) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *WifiClient_RxStats) GetGuardNs() uint32 {
	if x != nil {
		return x.GuardNs
	}
	return 0
}

func (x *WifiClient_RxStats) GetAirtimeFractionLast_1S() float32 {
	if x != nil {
		return x.AirtimeFractionLast_1S
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPackets() uint32 {
	if x != nil {
		return x.SampledPackets
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPacketsRetried() uint32 {
	if x != nil {
		return x.SampledPacketsRetried
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPacketsDropped() uint32 {
	if x != nil {
		return x.SampledPacketsDropped
	}
	return 0
}

type WifiClient_TxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes                  uint64  `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	SuccessBytes           uint64  `protobuf:"varint,2,opt,name=success_bytes,json=successBytes,proto3" json:"success_bytes,omitempty"`
	PhyMode                uint32  `protobuf:"varint,10,opt,name=phy_mode,json=phyMode,proto3" json:"phy_mode,omitempty"`
	Nss                    int32   `protobuf:"varint,3,opt,name=nss,proto3" json:"nss,omitempty"`
	RateMbps               uint32  `protobuf:"varint,8,opt,name=rate_mbps,json=rateMbps,proto3" json:"rate_mbps,omitempty"`
	RateMbpsLast_30S       float32 `protobuf:"fixed32,11,opt,name=rate_mbps_last_30s,json=rateMbpsLast30s,proto3" json:"rate_mbps_last_30s,omitempty"`
	RateMbpsLast_15S       float32 `protobuf:"fixed32,12,opt,name=rate_mbps_last_15s,json=rateMbpsLast15s,proto3" json:"rate_mbps_last_15s,omitempty"`
	Mcs                    uint32  `protobuf:"varint,5,opt,name=mcs,proto3" json:"mcs,omitempty"`
	Bandwidth              uint32  `protobuf:"varint,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	GuardNs                uint32  `protobuf:"varint,7,opt,name=guard_ns,json=guardNs,proto3" json:"guard_ns,omitempty"`
	AirtimeFractionLast_1S float32 `protobuf:"fixed32,9,opt,name=airtime_fraction_last_1s,json=airtimeFractionLast1s,proto3" json:"airtime_fraction_last_1s,omitempty"`
}

func (x *WifiClient_TxStats) Reset() {
	*x = WifiClient_TxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_TxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_TxStats) ProtoMessage() {}

func (x *WifiClient_TxStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_TxStats.ProtoReflect.Descriptor instead.
func (*WifiClient_TxStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 1}
}

func (x *WifiClient_TxStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *WifiClient_TxStats) GetSuccessBytes() uint64 {
	if x != nil {
		return x.SuccessBytes
	}
	return 0
}

func (x *WifiClient_TxStats) GetPhyMode() uint32 {
	if x != nil {
		return x.PhyMode
	}
	return 0
}

func (x *WifiClient_TxStats) GetNss() int32 {
	if x != nil {
		return x.Nss
	}
	return 0
}

func (x *WifiClient_TxStats) GetRateMbps() uint32 {
	if x != nil {
		return x.RateMbps
	}
	return 0
}

func (x *WifiClient_TxStats) GetRateMbpsLast_30S() float32 {
	if x != nil {
		return x.RateMbpsLast_30S
	}
	return 0
}

func (x *WifiClient_TxStats) GetRateMbpsLast_15S() float32 {
	if x != nil {
		return x.RateMbpsLast_15S
	}
	return 0
}

func (x *WifiClient_TxStats) GetMcs() uint32 {
	if x != nil {
		return x.Mcs
	}
	return 0
}

func (x *WifiClient_TxStats) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *WifiClient_TxStats) GetGuardNs() uint32 {
	if x != nil {
		return x.GuardNs
	}
	return 0
}

func (x *WifiClient_TxStats) GetAirtimeFractionLast_1S() float32 {
	if x != nil {
		return x.AirtimeFractionLast_1S
	}
	return 0
}

type WifiClient_PingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InUnhappyHour_2S bool    `protobuf:"varint,1,opt,name=in_unhappy_hour_2s,json=inUnhappyHour2s,proto3" json:"in_unhappy_hour_2s,omitempty"`
	InUnhappyHour_5S bool    `protobuf:"varint,2,opt,name=in_unhappy_hour_5s,json=inUnhappyHour5s,proto3" json:"in_unhappy_hour_5s,omitempty"`
	DropRate_5M      float32 `protobuf:"fixed32,3,opt,name=drop_rate_5m,json=dropRate5m,proto3" json:"drop_rate_5m,omitempty"`
	Latency_5M       float32 `protobuf:"fixed32,4,opt,name=latency_5m,json=latency5m,proto3" json:"latency_5m,omitempty"`
}

func (x *WifiClient_PingMetrics) Reset() {
	*x = WifiClient_PingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_PingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_PingMetrics) ProtoMessage() {}

func (x *WifiClient_PingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_PingMetrics.ProtoReflect.Descriptor instead.
func (*WifiClient_PingMetrics) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 2}
}

func (x *WifiClient_PingMetrics) GetInUnhappyHour_2S() bool {
	if x != nil {
		return x.InUnhappyHour_2S
	}
	return false
}

func (x *WifiClient_PingMetrics) GetInUnhappyHour_5S() bool {
	if x != nil {
		return x.InUnhappyHour_5S
	}
	return false
}

func (x *WifiClient_PingMetrics) GetDropRate_5M() float32 {
	if x != nil {
		return x.DropRate_5M
	}
	return 0
}

func (x *WifiClient_PingMetrics) GetLatency_5M() float32 {
	if x != nil {
		return x.Latency_5M
	}
	return 0
}

type WifiClient_FqcodelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqsHiPrio            uint64 `protobuf:"varint,1,opt,name=enqs_hi_prio,json=enqsHiPrio,proto3" json:"enqs_hi_prio,omitempty"`
	EnqsFqcodel           uint64 `protobuf:"varint,2,opt,name=enqs_fqcodel,json=enqsFqcodel,proto3" json:"enqs_fqcodel,omitempty"`
	EnqsNew               uint64 `protobuf:"varint,3,opt,name=enqs_new,json=enqsNew,proto3" json:"enqs_new,omitempty"`
	EnqsOld               uint64 `protobuf:"varint,4,opt,name=enqs_old,json=enqsOld,proto3" json:"enqs_old,omitempty"`
	EnqsDropped           uint64 `protobuf:"varint,5,opt,name=enqs_dropped,json=enqsDropped,proto3" json:"enqs_dropped,omitempty"`
	DeqsNew               uint64 `protobuf:"varint,6,opt,name=deqs_new,json=deqsNew,proto3" json:"deqs_new,omitempty"`
	DeqsOld               uint64 `protobuf:"varint,7,opt,name=deqs_old,json=deqsOld,proto3" json:"deqs_old,omitempty"`
	DeqsFlowNew           uint64 `protobuf:"varint,8,opt,name=deqs_flow_new,json=deqsFlowNew,proto3" json:"deqs_flow_new,omitempty"`
	DeqsFlowOldDeficit    uint64 `protobuf:"varint,9,opt,name=deqs_flow_old_deficit,json=deqsFlowOldDeficit,proto3" json:"deqs_flow_old_deficit,omitempty"`
	DeqsFlowOldStarvation uint64 `protobuf:"varint,10,opt,name=deqs_flow_old_starvation,json=deqsFlowOldStarvation,proto3" json:"deqs_flow_old_starvation,omitempty"`
	DeqsDropped           uint64 `protobuf:"varint,11,opt,name=deqs_dropped,json=deqsDropped,proto3" json:"deqs_dropped,omitempty"`
}

func (x *WifiClient_FqcodelInfo) Reset() {
	*x = WifiClient_FqcodelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_FqcodelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_FqcodelInfo) ProtoMessage() {}

func (x *WifiClient_FqcodelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_FqcodelInfo.ProtoReflect.Descriptor instead.
func (*WifiClient_FqcodelInfo) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28, 3}
}

func (x *WifiClient_FqcodelInfo) GetEnqsHiPrio() uint64 {
	if x != nil {
		return x.EnqsHiPrio
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetEnqsFqcodel() uint64 {
	if x != nil {
		return x.EnqsFqcodel
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetEnqsNew() uint64 {
	if x != nil {
		return x.EnqsNew
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetEnqsOld() uint64 {
	if x != nil {
		return x.EnqsOld
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetEnqsDropped() uint64 {
	if x != nil {
		return x.EnqsDropped
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsNew() uint64 {
	if x != nil {
		return x.DeqsNew
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsOld() uint64 {
	if x != nil {
		return x.DeqsOld
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsFlowNew() uint64 {
	if x != nil {
		return x.DeqsFlowNew
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsFlowOldDeficit() uint64 {
	if x != nil {
		return x.DeqsFlowOldDeficit
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsFlowOldStarvation() uint64 {
	if x != nil {
		return x.DeqsFlowOldStarvation
	}
	return 0
}

func (x *WifiClient_FqcodelInfo) GetDeqsDropped() uint64 {
	if x != nil {
		return x.DeqsDropped
	}
	return 0
}

type WifiPersistentStats_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastOccurredTimestamp int64  `protobuf:"varint,2,opt,name=last_occurred_timestamp,json=lastOccurredTimestamp,proto3" json:"last_occurred_timestamp,omitempty"`
}

func (x *WifiPersistentStats_Event) Reset() {
	*x = WifiPersistentStats_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiPersistentStats_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiPersistentStats_Event) ProtoMessage() {}

func (x *WifiPersistentStats_Event) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiPersistentStats_Event.ProtoReflect.Descriptor instead.
func (*WifiPersistentStats_Event) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{42, 0}
}

func (x *WifiPersistentStats_Event) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WifiPersistentStats_Event) GetLastOccurredTimestamp() int64 {
	if x != nil {
		return x.LastOccurredTimestamp
	}
	return 0
}

type RadioStats_ThermalStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
	Temp           uint32  `protobuf:"varint,2,opt,name=temp,proto3" json:"temp,omitempty"`
	Temp2          float64 `protobuf:"fixed64,3,opt,name=temp2,proto3" json:"temp2,omitempty"`
	PowerReduction uint32  `protobuf:"varint,4,opt,name=power_reduction,json=powerReduction,proto3" json:"power_reduction,omitempty"`
	DutyCycle      uint32  `protobuf:"varint,5,opt,name=duty_cycle,json=dutyCycle,proto3" json:"duty_cycle,omitempty"`
}

func (x *RadioStats_ThermalStatus) Reset() {
	*x = RadioStats_ThermalStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStats_ThermalStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStats_ThermalStatus) ProtoMessage() {}

func (x *RadioStats_ThermalStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStats_ThermalStatus.ProtoReflect.Descriptor instead.
func (*RadioStats_ThermalStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{44, 0}
}

func (x *RadioStats_ThermalStatus) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Deprecated: Marked as deprecated in spacex/api/device/wifi.proto.
func (x *RadioStats_ThermalStatus) GetTemp() uint32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *RadioStats_ThermalStatus) GetTemp2() float64 {
	if x != nil {
		return x.Temp2
	}
	return 0
}

func (x *RadioStats_ThermalStatus) GetPowerReduction() uint32 {
	if x != nil {
		return x.PowerReduction
	}
	return 0
}

func (x *RadioStats_ThermalStatus) GetDutyCycle() uint32 {
	if x != nil {
		return x.DutyCycle
	}
	return 0
}

type RadioStats_AntennaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rssi1 float32 `protobuf:"fixed32,1,opt,name=rssi1,proto3" json:"rssi1,omitempty"`
	Rssi2 float32 `protobuf:"fixed32,2,opt,name=rssi2,proto3" json:"rssi2,omitempty"`
	Rssi3 float32 `protobuf:"fixed32,3,opt,name=rssi3,proto3" json:"rssi3,omitempty"`
	Rssi4 float32 `protobuf:"fixed32,4,opt,name=rssi4,proto3" json:"rssi4,omitempty"`
}

func (x *RadioStats_AntennaStatus) Reset() {
	*x = RadioStats_AntennaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioStats_AntennaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioStats_AntennaStatus) ProtoMessage() {}

func (x *RadioStats_AntennaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioStats_AntennaStatus.ProtoReflect.Descriptor instead.
func (*RadioStats_AntennaStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{44, 1}
}

func (x *RadioStats_AntennaStatus) GetRssi1() float32 {
	if x != nil {
		return x.Rssi1
	}
	return 0
}

func (x *RadioStats_AntennaStatus) GetRssi2() float32 {
	if x != nil {
		return x.Rssi2
	}
	return 0
}

func (x *RadioStats_AntennaStatus) GetRssi3() float32 {
	if x != nil {
		return x.Rssi3
	}
	return 0
}

func (x *RadioStats_AntennaStatus) GetRssi4() float32 {
	if x != nil {
		return x.Rssi4
	}
	return 0
}

var File_spacex_api_device_wifi_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x0b, 0x57, 0x69, 0x66,
	0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x4a,
	0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x57, 0x69,
	0x66, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x69, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x57, 0x69, 0x66, 0x69, 0x4d,
	0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6e, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x62, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x65,
	0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x69, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72,
	0x73, 0x73, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x0d, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x07, 0x62, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x0f, 0x42,
	0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x68, 0x61, 0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f,
	0x62, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e,
	0x42, 0x73, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x77,
	0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x74, 0x65,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x68, 0x61,
	0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x68, 0x61, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x62, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x42, 0x74, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x77, 0x69, 0x66, 0x69, 0x42, 0x74, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x53,
	0x74, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4f, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x45,
	0x0a, 0x0b, 0x53, 0x74, 0x65, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x57, 0x69,
	0x66, 0x69, 0x42, 0x74, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a,
	0x62, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x62, 0x73, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x42, 0x73, 0x73, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x42, 0x74, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x40, 0x0a, 0x0e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x52,
	0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x03, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x66,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x65, 0x74, 0x68,
	0x50, 0x68, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x63, 0x69, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x6c, 0x66, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04,
	0x70, 0x63, 0x69, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x6c, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x62, 0x6c, 0x32, 0x50, 0x72, 0x6f, 0x64, 0x1a, 0x61, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x56,
	0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x66, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16,
	0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x6d, 0x0a, 0x1d, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x20,
	0x0a, 0x1e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x77, 0x0a, 0x18, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x57, 0x69, 0x66,
	0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x5f, 0x0a, 0x1b, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xa7, 0x03, 0x0a, 0x1c, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x74, 0x78, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x72, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x70, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0a, 0x72, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x22, 0x69, 0x0a, 0x11, 0x57, 0x69, 0x66, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x03, 0x22, 0x21, 0x0a, 0x1f, 0x57,
	0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x16, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x69,
	0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xea, 0x07,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xbb, 0x1a, 0x0a, 0x0a, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x07, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x73, 0x6e, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x73, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x73, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x71, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x77, 0x71, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x77, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x62,
	0x53, 0x74, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x62, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x62, 0x53, 0x74, 0x65, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x74, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x74, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x74, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x74, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x74,
	0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x74, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x68, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x46, 0x61,
	0x69, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x46, 0x0a, 0x21, 0x73, 0x74, 0x65, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x74, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x46, 0x61, 0x69,
	0x6c, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x74, 0x31, 0x31, 0x76,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x6f, 0x70, 0x73, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x68, 0x6f, 0x70, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1b, 0x65, 0x73, 0x74, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62,
	0x70, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x20, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x65, 0x73, 0x74, 0x52,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0b, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x66, 0x71, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x71, 0x63, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x71, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x89, 0x04, 0x0a, 0x07, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x2b, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x33, 0x30, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x73, 0x12, 0x2b, 0x0a,
	0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x31, 0x35, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x62, 0x70, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x35, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x4e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xf2, 0x02,
	0x0a, 0x07, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x33, 0x30, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x62, 0x70, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x35,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x35, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x4e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x32, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x55, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x32, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x35, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x55,
	0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x35, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x35, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x35, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x6d, 0x1a, 0x94, 0x03,
	0x0a, 0x0b, 0x46, 0x71, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0c, 0x65, 0x6e, 0x71, 0x73, 0x5f, 0x68, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x73, 0x48, 0x69, 0x50, 0x72, 0x69, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x73, 0x5f, 0x66, 0x71, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x73, 0x46, 0x71, 0x63, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x71, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x71, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x71, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x65, 0x6e, 0x71, 0x73, 0x4f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x73,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x65, 0x6e, 0x71, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x65, 0x71, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64,
	0x65, 0x71, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x71, 0x73, 0x5f, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x71, 0x73, 0x4f, 0x6c,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x71, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x71, 0x73, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x71, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x71, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x71, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65, 0x71, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x71, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x71, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x32, 0x47,
	0x48, 0x5a, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x22, 0x42, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x66, 0x69,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x0e,
	0x57, 0x69, 0x66, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x63, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x78, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x78, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x62, 0x73, 0x73, 0x5f,
	0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x73, 0x41, 0x69, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x65,
	0x64, 0x63, 0x63, 0x61, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x07, 0x0a, 0x0a, 0x57, 0x69, 0x66, 0x69, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6c,
	0x79, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x6c, 0x79, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x6c,
	0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x31, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x45, 0x74,
	0x68, 0x53, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x31, 0x30, 0x12, 0x30, 0x0a, 0x15, 0x6c,
	0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x31, 0x30, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x53, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x31, 0x30, 0x30, 0x12, 0x35, 0x0a,
	0x17, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x77, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x66, 0x74, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x74, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x68, 0x55, 0x6e, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x68, 0x61, 0x75, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x65, 0x74, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x6f, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x70, 0x6f, 0x65, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x68, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x65, 0x5f, 0x66, 0x75,
	0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x70, 0x6f, 0x65, 0x46, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x6f, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x6f,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x6f, 0x65, 0x4f, 0x66, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x65,
	0x5f, 0x76, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6f, 0x65, 0x56, 0x69, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x65,
	0x5f, 0x76, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x6f, 0x65, 0x56, 0x69, 0x6e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x52, 0x2b, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x31, 0x35, 0x64, 0x62,
	0x52, 0x2b, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x31, 0x35, 0x64, 0x62, 0x52, 0x23, 0x70,
	0x6f, 0x6f, 0x72, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x38, 0x30,
	0x64, 0x62, 0x52, 0x23, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x38, 0x30, 0x64, 0x62, 0x22, 0xe9, 0x0b, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x57, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xf9, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x57, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x35, 0x6d,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x35, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x64, 0x69, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x35, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xf5, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x70, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xf6, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x6f, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6f, 0x70, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0xfc,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x6f, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x35, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x70, 0x5f,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18,
	0xf7, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x6f, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x66, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x66, 0x32, 0x67, 0x68, 0x7a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x66, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x66, 0x35, 0x67, 0x68, 0x7a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0xf2,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0xb8, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xba, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x33, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x69, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x0b,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xfb, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x70, 0x6f, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xfe, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x08, 0x70, 0x6f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x74, 0x63, 0x5f, 0x6e, 0x73, 0x18, 0x80, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x74, 0x63, 0x4e, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x4a, 0x06, 0x08, 0xe9, 0x07, 0x10, 0xea, 0x07, 0x4a, 0x06, 0x08, 0xea, 0x07,
	0x10, 0xeb, 0x07, 0x4a, 0x06, 0x08, 0xee, 0x07, 0x10, 0xef, 0x07, 0x4a, 0x06, 0x08, 0xef, 0x07,
	0x10, 0xf0, 0x07, 0x22, 0x56, 0x0a, 0x17, 0x57, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x18,
	0x57, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x77, 0x69,
	0x66, 0x69, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x69, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x17,
	0x57, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x10,
	0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x07, 0x0a, 0x0b, 0x50, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x4d,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x64,
	0x64, 0x65, 0x76, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x4d, 0x73, 0x12, 0x2b, 0x0a,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73,
	0x5f, 0x35, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x4d, 0x73, 0x35, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x31, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x65, 0x61, 0x6e, 0x4d, 0x73, 0x31, 0x68, 0x12, 0x2f, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4d, 0x65, 0x61, 0x6e, 0x4d, 0x73, 0x31, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x35, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x31, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x31, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x32, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x31, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x36, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f,
	0x31, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x68, 0x61, 0x70,
	0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x31, 0x73, 0x31, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x68,
	0x61, 0x70, 0x70, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x32, 0x73, 0x5f, 0x31, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x32, 0x73, 0x31, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x35, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x35, 0x73, 0x31,
	0x64, 0x22, 0x1b, 0x0a, 0x19, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58,
	0x0a, 0x1a, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x66,
	0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x22,
	0x38, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x46, 0x49, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x46,
	0x49, 0x5f, 0x32, 0x5f, 0x34, 0x47, 0x48, 0x5a, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49,
	0x46, 0x49, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x02, 0x22, 0x83, 0x05, 0x0a, 0x13, 0x57, 0x69,
	0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x5e, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x67, 0x0a, 0x19, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x16, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x55, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x7d, 0x0a, 0x25,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x61,
	0x64, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x1b, 0x72,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x18,
	0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x55, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x5e, 0x0a, 0x1e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x83, 0x05, 0x0a, 0x0a, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x6e, 0x64,
	0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x74,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x9b,
	0x01, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74,
	0x65, 0x6d, 0x70, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x1a, 0x67, 0x0a, 0x0d,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x73, 0x73, 0x69, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x73,
	0x73, 0x69, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x73, 0x69, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x72, 0x73, 0x73, 0x69, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x73,
	0x69, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x73, 0x73, 0x69, 0x33, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x73, 0x73, 0x69, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x72, 0x73, 0x73, 0x69, 0x34, 0x22, 0xcc, 0x9f, 0x01, 0x0a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f,
	0x68, 0x77, 0x5f, 0x67, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x48,
	0x77, 0x47, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x73, 0x79, 0x73, 0x53, 0x77, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x49, 0x73, 0x44,
	0x65, 0x76, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x66, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x46, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x43, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73,
	0x4d, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x79, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x73,
	0x79, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x79, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x73,
	0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x79, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6e, 0x74,
	0x69, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x73, 0x79, 0x73, 0x49, 0x73, 0x57, 0x69, 0x74, 0x6c, 0x12, 0x55, 0x0a, 0x19, 0x73, 0x79, 0x73,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x49, 0x73, 0x41,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x5f, 0x75, 0x62, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x55, 0x62, 0x69, 0x4d, 0x61,
	0x78, 0x45, 0x63, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x75, 0x62, 0x69, 0x5f, 0x62,
	0x61, 0x64, 0x5f, 0x70, 0x65, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x55,
	0x62, 0x69, 0x42, 0x61, 0x64, 0x50, 0x65, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x79, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69,
	0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69,
	0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xc5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x34, 0x52, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x31, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x54, 0x73,
	0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18,
	0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x54, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x33, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33,
	0x54, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x5f, 0x74, 0x73, 0x73,
	0x69, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x54, 0x73, 0x73, 0x69, 0x12, 0x53, 0x0a,
	0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a,
	0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67,
	0x68, 0x7a, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x1b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x41, 0x69, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x15,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67,
	0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73, 0x73,
	0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x34, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x54, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x32, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32,
	0x54, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x74, 0x73, 0x73,
	0x69, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x54, 0x73, 0x73, 0x69, 0x12, 0x57, 0x0a,
	0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x34, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x34, 0x54, 0x73, 0x73, 0x69, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f,
	0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e,
	0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63,
	0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x63, 0x0a,
	0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x60,
	0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a,
	0x48, 0x69, 0x67, 0x68, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69,
	0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33,
	0x52, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x34, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x34, 0x52, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x31, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x31, 0x54, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x54, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x54, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x5f, 0x74, 0x73, 0x73, 0x69, 0x18, 0xa8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69,
	0x67, 0x68, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x34, 0x54, 0x73, 0x73, 0x69, 0x12, 0x5d,
	0x0a, 0x1c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48,
	0x69, 0x67, 0x68, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a,
	0x23, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x65, 0x64, 0x63,
	0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x45,
	0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x29,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x24, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a,
	0x48, 0x69, 0x67, 0x68, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x52, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48,
	0x69, 0x67, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68,
	0x52, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69,
	0x67, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x6c, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a,
	0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x18, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x12, 0x55, 0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x1d, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xcb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x23,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75,
	0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6f, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x2a, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x25, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x54, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x45, 0x0a, 0x10, 0x70, 0x6f, 0x65, 0x5f, 0x6d, 0x63, 0x75, 0x5f, 0x64, 0x69, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x65, 0x4d, 0x63, 0x75,
	0x44, 0x69, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61,
	0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74,
	0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61,
	0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x18,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xba, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x31,
	0x45, 0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x19,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x1f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c,
	0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xbe, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c,
	0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a,
	0x1a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xbf, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x54, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x31, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x4c, 0x61, 0x6e, 0x31, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f,
	0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57,
	0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb7, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57,
	0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x91, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x12,
	0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18,
	0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x9d, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x3e, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x93, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x1f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x32, 0x30, 0x6d, 0x68, 0x7a, 0x18,
	0xad, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x52, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x32, 0x30, 0x6d, 0x68,
	0x7a, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x34,
	0x30, 0x6d, 0x68, 0x7a, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x34, 0x30, 0x6d, 0x68, 0x7a, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x38, 0x30, 0x6d, 0x68, 0x7a, 0x18, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x38, 0x30, 0x6d, 0x68, 0x7a, 0x12, 0x48, 0x0a, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x95,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x5a, 0x0a, 0x1a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0xa0, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x35,
	0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x18,
	0x97, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68,
	0x48, 0x6f, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48,
	0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a,
	0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41,
	0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x60, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x9e, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6d,
	0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67,
	0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68,
	0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68,
	0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18,
	0x9c, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52,
	0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x60, 0x0a, 0x1f, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f,
	0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x9f, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73,
	0x69, 0x41, 0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x56, 0x0a, 0x19,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0xa3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x19,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70,
	0x73, 0x41, 0x76, 0x67, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0xa5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x6b, 0x0a, 0x24,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xa6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x32, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x35, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa7,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x32, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x76, 0x67, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x35, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa9, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x67,
	0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x5f, 0x31, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xaa,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x73, 0x31, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x73, 0x5f, 0x31, 0x68, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xab, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x31,
	0x68, 0x41, 0x76, 0x67, 0x12, 0x5f, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x31, 0x64, 0x18, 0xac, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x64, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x21,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x22, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x23, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33,
	0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xde, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0xdf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xea, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x68, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe2,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe3,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe4,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x4f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x27, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18,
	0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x28, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x44,
	0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x1b, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x31, 0x68, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x19,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xeb, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x68, 0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbc, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbd, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0xbe, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66, 0x69, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x18, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc1, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc2, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12,
	0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18,
	0xc3, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x73, 0x69, 0x12, 0x60,
	0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xc4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x69, 0x18,
	0xc5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x69, 0x12, 0x63,
	0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc7, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xc8, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa0,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70,
	0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67,
	0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa2, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa3, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x67, 0x0a,
	0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36,
	0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x61, 0x76, 0x67, 0x18, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa5, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12,
	0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x61, 0x76, 0x67, 0x18, 0xa6, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70,
	0x73, 0x41, 0x76, 0x67, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa7, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x6e, 0x64,
	0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0xea, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0xed,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf0, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x66, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x5f, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x64, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x57, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a,
	0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xf5, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x60, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xfa, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x67, 0x68, 0x7a, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67, 0x68, 0x7a,
	0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x85, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x35, 0x67,
	0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xfc, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xfd, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x35, 0x67, 0x68, 0x7a, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x46, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0xff, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x80, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x66, 0x0a, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0x83, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x60, 0x0a, 0x1e, 0x77, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x77, 0x61, 0x6e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6b, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x20, 0x77, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6b, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x77, 0x61,
	0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x61, 0x6b, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x1e, 0x77, 0x61,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0xcf, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x77, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6b, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x67, 0x0a, 0x22,
	0x77, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0xd0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x77, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x6b,
	0x44, 0x72, 0x6f, 0x70, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0xe1, 0x13, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x73, 0x69, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x73, 0x73, 0x69, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x75, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x69, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x68,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x78, 0x50, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x19, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x6f, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x5f, 0x61, 0x76, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x63, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x1a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x18,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12,
	0x50, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76,
	0x67, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x63, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x6b, 0x0a, 0x18, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x77, 0x69, 0x66, 0x69, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x67, 0x0a,
	0x16, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x77, 0x69, 0x66, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x77, 0x69, 0x66, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x4c, 0x0a, 0x14, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x69, 0x66, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f,
	0x10, 0x10, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0x8a, 0x0e, 0x0a, 0x15, 0x53, 0x74, 0x61,
	0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x77, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x77, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x53, 0x77, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x77, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x77, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x77, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x77, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6f,
	0x75, 0x69, 0x12, 0x3d, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x12, 0x3a, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x78, 0x4d,
	0x63, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6d, 0x63, 0x73, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x74, 0x78, 0x4d, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x78, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x73, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x72, 0x78, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x78, 0x50, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x4f, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31,
	0x68, 0x12, 0x4c, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x69,
	0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69,
	0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x6c, 0x66,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x22, 0xff, 0x02, 0x0a, 0x11, 0x57, 0x69, 0x66, 0x69, 0x52, 0x66, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68,
	0x7a, 0x48, 0x69, 0x67, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x73, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x63, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x63, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x63, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x63, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x63, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x32,
	0x67, 0x68, 0x7a, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x68, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x35, 0x67, 0x68, 0x7a,
	0x48, 0x69, 0x67, 0x68, 0x22, 0x2c, 0x0a, 0x12, 0x57, 0x69, 0x66, 0x69, 0x52, 0x66, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x17,
	0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f,
	0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x36, 0x22, 0x39, 0x0a, 0x1f, 0x57, 0x69, 0x66, 0x69, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x50, 0x6f, 0x65, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1c, 0x0a,
	0x1a, 0x57, 0x69, 0x66, 0x69, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad, 0x5c, 0x0a, 0x21,
	0x73, 0x74, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76,
	0x32, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x79, 0x73,
	0x5f, 0x68, 0x77, 0x5f, 0x67, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x48, 0x77, 0x47, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x79, 0x73, 0x53, 0x77, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x79,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x79, 0x73,
	0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x49, 0x73,
	0x44, 0x65, 0x76, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x5f, 0x66, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x46, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79,
	0x73, 0x4d, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x14,
	0x73, 0x79, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x79, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79,
	0x73, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x79, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6e,
	0x74, 0x69, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31,
	0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73,
	0x69, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33,
	0x52, 0x73, 0x73, 0x69, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x49,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75,
	0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75,
	0x73, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a,
	0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x62, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67,
	0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61,
	0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61,
	0x6e, 0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63,
	0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78,
	0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41,
	0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x55, 0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x1e,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x60,
	0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a,
	0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x6f, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x6f, 0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x21, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68,
	0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x55, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65,
	0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xae, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53,
	0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e,
	0x45, 0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x18,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72,
	0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e,
	0x45, 0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0xb9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x94, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x32, 0x67, 0x68, 0x7a, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x96, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x18,
	0x97, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68,
	0x48, 0x6f, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48,
	0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a,
	0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41,
	0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77,
	0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12,
	0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9c, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73,
	0x69, 0x41, 0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a,
	0x22, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x23, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1e, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18,
	0xde, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xdf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x69, 0x6e,
	0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0xe3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x32, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x27, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x18, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x36, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x28, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x13, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x73, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x1b, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x1c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xbe, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x73, 0x73, 0x69, 0x12, 0x6a, 0x0a, 0x23, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc0, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x66, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12,
	0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12,
	0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc2, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xc3, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc4, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x1b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x69, 0x18, 0xc5, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x69, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc6, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0xc7, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x65, 0x0a, 0x21,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0xa1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x63, 0x70, 0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73,
	0x4d, 0x61, 0x78, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa3, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63,
	0x70, 0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41,
	0x76, 0x67, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa5, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x63, 0x0a, 0x20, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0xa6, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63,
	0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67,
	0x12, 0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa7, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62,
	0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x41, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x6e, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18,
	0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x66,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x66, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x5a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf2, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x57,
	0x69, 0x66, 0x69, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x68, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x1d, 0x57, 0x69, 0x66, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x77, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x77, 0x70, 0x72, 0x69, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x69, 0x77, 0x70, 0x72, 0x69, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x54, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x1e, 0x57, 0x69, 0x66, 0x69, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x49, 0x77, 0x70, 0x72, 0x69, 0x76, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x3c,
	0x0a, 0x05, 0x69, 0x6f, 0x63, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x77, 0x70, 0x72, 0x69, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x49, 0x6f, 0x63, 0x74, 0x6c, 0x52, 0x05, 0x69, 0x6f, 0x63, 0x74, 0x6c, 0x22, 0x52, 0x0a, 0x05,
	0x49, 0x6f, 0x63, 0x74, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x54, 0x4c, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x54, 0x4c, 0x5f, 0x45, 0x32,
	0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x54, 0x4c, 0x5f, 0x4d, 0x41, 0x43,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4f, 0x43, 0x54, 0x4c, 0x5f, 0x53, 0x58, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04,
	0x22, 0x38, 0x0a, 0x10, 0x49, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x22, 0x4e, 0x0a, 0x10, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0x35, 0x0a, 0x1f, 0x57, 0x69,
	0x66, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x32, 0x5c, 0x0a, 0x04, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x0a, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_wifi_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_proto_rawDescData = file_spacex_api_device_wifi_proto_rawDesc
)

func file_spacex_api_device_wifi_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_proto_rawDescData
}

var file_spacex_api_device_wifi_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_spacex_api_device_wifi_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_spacex_api_device_wifi_proto_goTypes = []interface{}{
	(WifiGetClientHistoryResponse_WifiLimitedReason)(0), // 0: SpaceX.API.Device.WifiGetClientHistoryResponse.WifiLimitedReason
	(WifiClient_Interface)(0),                           // 1: SpaceX.API.Device.WifiClient.Interface
	(WifiClient_Role)(0),                                // 2: SpaceX.API.Device.WifiClient.Role
	(WifiNetwork_Band)(0),                               // 3: SpaceX.API.Device.WifiNetwork.Band
	(IwprivCommand_Ioctl)(0),                            // 4: SpaceX.API.Device.IwprivCommand.Ioctl
	(*WifiClients)(nil),                                 // 5: SpaceX.API.Device.WifiClients
	(*ToController)(nil),                                // 6: SpaceX.API.Device.ToController
	(*WifiMeshJoin)(nil),                                // 7: SpaceX.API.Device.WifiMeshJoin
	(*WifiMeshStatus)(nil),                              // 8: SpaceX.API.Device.WifiMeshStatus
	(*MeshSpeedtestRequest)(nil),                        // 9: SpaceX.API.Device.MeshSpeedtestRequest
	(*MeshSpeedtest)(nil),                               // 10: SpaceX.API.Device.MeshSpeedtest
	(*WifiSiteSurveyResult)(nil),                        // 11: SpaceX.API.Device.WifiSiteSurveyResult
	(*WifiGlobalMeshStatus)(nil),                        // 12: SpaceX.API.Device.WifiGlobalMeshStatus
	(*BackhaulRequest)(nil),                             // 13: SpaceX.API.Device.BackhaulRequest
	(*FromController)(nil),                              // 14: SpaceX.API.Device.FromController
	(*SteerClientRequest)(nil),                          // 15: SpaceX.API.Device.SteerClientRequest
	(*WifiBtmRequest)(nil),                              // 16: SpaceX.API.Device.WifiBtmRequest
	(*WifiSelfTest)(nil),                                // 17: SpaceX.API.Device.WifiSelfTest
	(*WifiSetConfigRequest)(nil),                        // 18: SpaceX.API.Device.WifiSetConfigRequest
	(*WifiSetConfigResponse)(nil),                       // 19: SpaceX.API.Device.WifiSetConfigResponse
	(*WifiGetConfigRequest)(nil),                        // 20: SpaceX.API.Device.WifiGetConfigRequest
	(*WifiGetConfigResponse)(nil),                       // 21: SpaceX.API.Device.WifiGetConfigResponse
	(*WifiSetMeshDeviceTrustRequest)(nil),               // 22: SpaceX.API.Device.WifiSetMeshDeviceTrustRequest
	(*WifiSetMeshDeviceTrustResponse)(nil),              // 23: SpaceX.API.Device.WifiSetMeshDeviceTrustResponse
	(*WifiSetMeshConfigRequest)(nil),                    // 24: SpaceX.API.Device.WifiSetMeshConfigRequest
	(*WifiSetMeshConfigResponse)(nil),                   // 25: SpaceX.API.Device.WifiSetMeshConfigResponse
	(*WifiGetClientsRequest)(nil),                       // 26: SpaceX.API.Device.WifiGetClientsRequest
	(*WifiGetClientsResponse)(nil),                      // 27: SpaceX.API.Device.WifiGetClientsResponse
	(*WifiGetClientHistoryRequest)(nil),                 // 28: SpaceX.API.Device.WifiGetClientHistoryRequest
	(*WifiGetClientHistoryResponse)(nil),                // 29: SpaceX.API.Device.WifiGetClientHistoryResponse
	(*WifiSetAviationConformedRequest)(nil),             // 30: SpaceX.API.Device.WifiSetAviationConformedRequest
	(*WifiGetHistoryResponse)(nil),                      // 31: SpaceX.API.Device.WifiGetHistoryResponse
	(*WifiNewClientConnectedEvent)(nil),                 // 32: SpaceX.API.Device.WifiNewClientConnectedEvent
	(*WifiClient)(nil),                                  // 33: SpaceX.API.Device.WifiClient
	(*WifiSetupRequest)(nil),                            // 34: SpaceX.API.Device.WifiSetupRequest
	(*WifiSetupResponse)(nil),                           // 35: SpaceX.API.Device.WifiSetupResponse
	(*WifiBandStatus)(nil),                              // 36: SpaceX.API.Device.WifiBandStatus
	(*WifiAlerts)(nil),                                  // 37: SpaceX.API.Device.WifiAlerts
	(*WifiGetStatusResponse)(nil),                       // 38: SpaceX.API.Device.WifiGetStatusResponse
	(*WifiAuthenticateRequest)(nil),                     // 39: SpaceX.API.Device.WifiAuthenticateRequest
	(*WifiAuthenticateResponse)(nil),                    // 40: SpaceX.API.Device.WifiAuthenticateResponse
	(*WifiAccountBondingEvent)(nil),                     // 41: SpaceX.API.Device.WifiAccountBondingEvent
	(*WifiNewPeerEvent)(nil),                            // 42: SpaceX.API.Device.WifiNewPeerEvent
	(*PingMetrics)(nil),                                 // 43: SpaceX.API.Device.PingMetrics
	(*WifiGetPingMetricsRequest)(nil),                   // 44: SpaceX.API.Device.WifiGetPingMetricsRequest
	(*WifiGetPingMetricsResponse)(nil),                  // 45: SpaceX.API.Device.WifiGetPingMetricsResponse
	(*WifiNetwork)(nil),                                 // 46: SpaceX.API.Device.WifiNetwork
	(*WifiPersistentStats)(nil),                         // 47: SpaceX.API.Device.WifiPersistentStats
	(*WifiGetPersistentStatsResponse)(nil),              // 48: SpaceX.API.Device.WifiGetPersistentStatsResponse
	(*RadioStats)(nil),                                  // 49: SpaceX.API.Device.RadioStats
	(*StarlinkRoutersHourlyMetricsV2)(nil),              // 50: SpaceX.API.Device.starlink_routers_hourly_metrics_v2
	(*StarlinkRouterAlerts)(nil),                        // 51: SpaceX.API.Device.starlink_router_alerts
	(*StarlinkRouterClientSpeedtests)(nil),              // 52: SpaceX.API.Device.starlink_router_client_speedtests
	(*StarlinkRouterClients)(nil),                       // 53: SpaceX.API.Device.StarlinkRouterClients
	(*WifiSetClientGivenNameRequest)(nil),               // 54: SpaceX.API.Device.WifiSetClientGivenNameRequest
	(*WifiSelfTestRequest)(nil),                         // 55: SpaceX.API.Device.WifiSelfTestRequest
	(*WifiSelfTestResponse)(nil),                        // 56: SpaceX.API.Device.WifiSelfTestResponse
	(*WifiRfTestRequest)(nil),                           // 57: SpaceX.API.Device.WifiRfTestRequest
	(*WifiRfTestResponse)(nil),                          // 58: SpaceX.API.Device.WifiRfTestResponse
	(*WifiGetFirewallRequest)(nil),                      // 59: SpaceX.API.Device.WifiGetFirewallRequest
	(*WifiGetFirewallResponse)(nil),                     // 60: SpaceX.API.Device.WifiGetFirewallResponse
	(*WifiTogglePoeNegotiationRequest)(nil),             // 61: SpaceX.API.Device.WifiTogglePoeNegotiationRequest
	(*WifiCalibrationModeRequest)(nil),                  // 62: SpaceX.API.Device.WifiCalibrationModeRequest
	(*StarlinkRouterHourlyMetricsV2)(nil),               // 63: SpaceX.API.Device.starlink_router_hourly_metrics_v2
	(*WifiGuestInfoRequest)(nil),                        // 64: SpaceX.API.Device.WifiGuestInfoRequest
	(*WifiGuestInfoResponse)(nil),                       // 65: SpaceX.API.Device.WifiGuestInfoResponse
	(*WifiFactoryTestCommandRequest)(nil),               // 66: SpaceX.API.Device.WifiFactoryTestCommandRequest
	(*WifiFactoryTestCommandResponse)(nil),              // 67: SpaceX.API.Device.WifiFactoryTestCommandResponse
	(*IwprivCommand)(nil),                               // 68: SpaceX.API.Device.IwprivCommand
	(*IpLinkSetCommand)(nil),                            // 69: SpaceX.API.Device.IpLinkSetCommand
	(*IpAddrSetCommand)(nil),                            // 70: SpaceX.API.Device.IpAddrSetCommand
	(*WifiStartLocalTelemProxyRequest)(nil),             // 71: SpaceX.API.Device.WifiStartLocalTelemProxyRequest
	(*SteerClientRequest_SteerTarget)(nil),              // 72: SpaceX.API.Device.SteerClientRequest.SteerTarget
	(*WifiBtmRequest_NeighborReport)(nil),               // 73: SpaceX.API.Device.WifiBtmRequest.NeighborReport
	(*WifiSelfTest_TestResult)(nil),                     // 74: SpaceX.API.Device.WifiSelfTest.TestResult
	(*WifiClient_RxStats)(nil),                          // 75: SpaceX.API.Device.WifiClient.RxStats
	(*WifiClient_TxStats)(nil),                          // 76: SpaceX.API.Device.WifiClient.TxStats
	(*WifiClient_PingMetrics)(nil),                      // 77: SpaceX.API.Device.WifiClient.PingMetrics
	(*WifiClient_FqcodelInfo)(nil),                      // 78: SpaceX.API.Device.WifiClient.FqcodelInfo
	(*WifiPersistentStats_Event)(nil),                   // 79: SpaceX.API.Device.WifiPersistentStats.Event
	(*RadioStats_ThermalStatus)(nil),                    // 80: SpaceX.API.Device.RadioStats.ThermalStatus
	(*RadioStats_AntennaStatus)(nil),                    // 81: SpaceX.API.Device.RadioStats.AntennaStatus
	(*InflatedBasicServiceSet)(nil),                     // 82: SpaceX.API.Device.InflatedBasicServiceSet
	(WifiSecurity)(0),                                   // 83: SpaceX.API.Device.WifiSecurity
	(WifiMode)(0),                                       // 84: SpaceX.API.Device.WifiMode
	(IfaceType)(0),                                      // 85: SpaceX.API.Device.IfaceType
	(*WifiConfig)(nil),                                  // 86: SpaceX.API.Device.WifiConfig
	(MeshAuth)(0),                                       // 87: SpaceX.API.Device.MeshAuth
	(*MeshConfig)(nil),                                  // 88: SpaceX.API.Device.MeshConfig
	(*DeviceInfo)(nil),                                  // 89: SpaceX.API.Device.DeviceInfo
	(*DeviceState)(nil),                                 // 90: SpaceX.API.Device.DeviceState
	(*RadiusStatsMap)(nil),                              // 91: SpaceX.API.Device.RadiusStatsMap
	(*DhcpServer)(nil),                                  // 92: SpaceX.API.Device.DhcpServer
	(*PoeStats)(nil),                                    // 93: SpaceX.API.Device.PoeStats
	(*SignedData)(nil),                                  // 94: SpaceX.API.Device.SignedData
	(*ChallengeResponse)(nil),                           // 95: SpaceX.API.Device.ChallengeResponse
	(WifiConfig_Band)(0),                                // 96: SpaceX.API.Device.WifiConfig.Band
	(*NetworkInterface_RxStats)(nil),                    // 97: SpaceX.API.Device.NetworkInterface.RxStats
	(*NetworkInterface_TxStats)(nil),                    // 98: SpaceX.API.Device.NetworkInterface.TxStats
	(*wrapperspb.StringValue)(nil),                      // 99: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                      // 100: google.protobuf.UInt32Value
	(*telemetron.TimestampInfo)(nil),                    // 101: SpaceX.API.Telemetron.Public.Common.TimestampInfo
	(*wrapperspb.BoolValue)(nil),                        // 102: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                       // 103: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),                       // 104: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),                       // 105: google.protobuf.Int64Value
	(*ClientName)(nil),                                  // 106: SpaceX.API.Device.ClientName
	(*ClientConfig)(nil),                                // 107: SpaceX.API.Device.ClientConfig
}
var file_spacex_api_device_wifi_proto_depIdxs = []int32{
	33,  // 0: SpaceX.API.Device.WifiClients.clients:type_name -> SpaceX.API.Device.WifiClient
	5,   // 1: SpaceX.API.Device.ToController.clients:type_name -> SpaceX.API.Device.WifiClients
	7,   // 2: SpaceX.API.Device.ToController.mesh_join:type_name -> SpaceX.API.Device.WifiMeshJoin
	8,   // 3: SpaceX.API.Device.ToController.status:type_name -> SpaceX.API.Device.WifiMeshStatus
	10,  // 4: SpaceX.API.Device.ToController.speedtest:type_name -> SpaceX.API.Device.MeshSpeedtest
	11,  // 5: SpaceX.API.Device.WifiMeshJoin.siteSurveyScan:type_name -> SpaceX.API.Device.WifiSiteSurveyResult
	33,  // 6: SpaceX.API.Device.WifiMeshStatus.clients:type_name -> SpaceX.API.Device.WifiClient
	82,  // 7: SpaceX.API.Device.WifiMeshStatus.bss_list:type_name -> SpaceX.API.Device.InflatedBasicServiceSet
	83,  // 8: SpaceX.API.Device.WifiSiteSurveyResult.security:type_name -> SpaceX.API.Device.WifiSecurity
	84,  // 9: SpaceX.API.Device.WifiSiteSurveyResult.wireless_mode:type_name -> SpaceX.API.Device.WifiMode
	85,  // 10: SpaceX.API.Device.WifiSiteSurveyResult.iface:type_name -> SpaceX.API.Device.IfaceType
	82,  // 11: SpaceX.API.Device.WifiGlobalMeshStatus.bss_list:type_name -> SpaceX.API.Device.InflatedBasicServiceSet
	86,  // 12: SpaceX.API.Device.BackhaulRequest.golden_bss:type_name -> SpaceX.API.Device.WifiConfig
	86,  // 13: SpaceX.API.Device.FromController.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	15,  // 14: SpaceX.API.Device.FromController.steer_client_request:type_name -> SpaceX.API.Device.SteerClientRequest
	12,  // 15: SpaceX.API.Device.FromController.status:type_name -> SpaceX.API.Device.WifiGlobalMeshStatus
	13,  // 16: SpaceX.API.Device.FromController.backhaul_request:type_name -> SpaceX.API.Device.BackhaulRequest
	9,   // 17: SpaceX.API.Device.FromController.start_speedtest:type_name -> SpaceX.API.Device.MeshSpeedtestRequest
	16,  // 18: SpaceX.API.Device.FromController.wifi_btm_request:type_name -> SpaceX.API.Device.WifiBtmRequest
	72,  // 19: SpaceX.API.Device.SteerClientRequest.targets:type_name -> SpaceX.API.Device.SteerClientRequest.SteerTarget
	73,  // 20: SpaceX.API.Device.WifiBtmRequest.neighbor_report:type_name -> SpaceX.API.Device.WifiBtmRequest.NeighborReport
	74,  // 21: SpaceX.API.Device.WifiSelfTest.fused:type_name -> SpaceX.API.Device.WifiSelfTest.TestResult
	74,  // 22: SpaceX.API.Device.WifiSelfTest.eth_phys:type_name -> SpaceX.API.Device.WifiSelfTest.TestResult
	74,  // 23: SpaceX.API.Device.WifiSelfTest.pcis:type_name -> SpaceX.API.Device.WifiSelfTest.TestResult
	74,  // 24: SpaceX.API.Device.WifiSelfTest.bl2_prod:type_name -> SpaceX.API.Device.WifiSelfTest.TestResult
	86,  // 25: SpaceX.API.Device.WifiSetConfigRequest.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	86,  // 26: SpaceX.API.Device.WifiSetConfigResponse.updated_wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	86,  // 27: SpaceX.API.Device.WifiGetConfigResponse.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	87,  // 28: SpaceX.API.Device.WifiSetMeshDeviceTrustRequest.auth:type_name -> SpaceX.API.Device.MeshAuth
	88,  // 29: SpaceX.API.Device.WifiSetMeshConfigRequest.mesh_config:type_name -> SpaceX.API.Device.MeshConfig
	33,  // 30: SpaceX.API.Device.WifiGetClientsResponse.clients:type_name -> SpaceX.API.Device.WifiClient
	0,   // 31: SpaceX.API.Device.WifiGetClientHistoryResponse.throughput_limited:type_name -> SpaceX.API.Device.WifiGetClientHistoryResponse.WifiLimitedReason
	33,  // 32: SpaceX.API.Device.WifiNewClientConnectedEvent.client:type_name -> SpaceX.API.Device.WifiClient
	75,  // 33: SpaceX.API.Device.WifiClient.rx_stats:type_name -> SpaceX.API.Device.WifiClient.RxStats
	76,  // 34: SpaceX.API.Device.WifiClient.tx_stats:type_name -> SpaceX.API.Device.WifiClient.TxStats
	1,   // 35: SpaceX.API.Device.WifiClient.iface:type_name -> SpaceX.API.Device.WifiClient.Interface
	2,   // 36: SpaceX.API.Device.WifiClient.role:type_name -> SpaceX.API.Device.WifiClient.Role
	77,  // 37: SpaceX.API.Device.WifiClient.ping_metrics:type_name -> SpaceX.API.Device.WifiClient.PingMetrics
	78,  // 38: SpaceX.API.Device.WifiClient.fqcodel_info:type_name -> SpaceX.API.Device.WifiClient.FqcodelInfo
	89,  // 39: SpaceX.API.Device.WifiGetStatusResponse.device_info:type_name -> SpaceX.API.Device.DeviceInfo
	90,  // 40: SpaceX.API.Device.WifiGetStatusResponse.device_state:type_name -> SpaceX.API.Device.DeviceState
	36,  // 41: SpaceX.API.Device.WifiGetStatusResponse.rf_2ghz_status:type_name -> SpaceX.API.Device.WifiBandStatus
	36,  // 42: SpaceX.API.Device.WifiGetStatusResponse.rf_5ghz_status:type_name -> SpaceX.API.Device.WifiBandStatus
	37,  // 43: SpaceX.API.Device.WifiGetStatusResponse.alerts:type_name -> SpaceX.API.Device.WifiAlerts
	86,  // 44: SpaceX.API.Device.WifiGetStatusResponse.config:type_name -> SpaceX.API.Device.WifiConfig
	33,  // 45: SpaceX.API.Device.WifiGetStatusResponse.clients:type_name -> SpaceX.API.Device.WifiClient
	91,  // 46: SpaceX.API.Device.WifiGetStatusResponse.radius_stats:type_name -> SpaceX.API.Device.RadiusStatsMap
	92,  // 47: SpaceX.API.Device.WifiGetStatusResponse.dhcp_servers:type_name -> SpaceX.API.Device.DhcpServer
	93,  // 48: SpaceX.API.Device.WifiGetStatusResponse.poe_stats:type_name -> SpaceX.API.Device.PoeStats
	94,  // 49: SpaceX.API.Device.WifiAuthenticateRequest.challenge:type_name -> SpaceX.API.Device.SignedData
	95,  // 50: SpaceX.API.Device.WifiAuthenticateResponse.wifi:type_name -> SpaceX.API.Device.ChallengeResponse
	95,  // 51: SpaceX.API.Device.WifiAuthenticateResponse.dish:type_name -> SpaceX.API.Device.ChallengeResponse
	43,  // 52: SpaceX.API.Device.WifiGetPingMetricsResponse.internet:type_name -> SpaceX.API.Device.PingMetrics
	3,   // 53: SpaceX.API.Device.WifiNetwork.band:type_name -> SpaceX.API.Device.WifiNetwork.Band
	79,  // 54: SpaceX.API.Device.WifiPersistentStats.factory_reset_button:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	79,  // 55: SpaceX.API.Device.WifiPersistentStats.factory_reset_plug_unplug:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	79,  // 56: SpaceX.API.Device.WifiPersistentStats.factory_reset_command:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	79,  // 57: SpaceX.API.Device.WifiPersistentStats.factory_reset_failed_load_wifi_config:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	79,  // 58: SpaceX.API.Device.WifiPersistentStats.reboot_from_software_update:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	47,  // 59: SpaceX.API.Device.WifiGetPersistentStatsResponse.stats:type_name -> SpaceX.API.Device.WifiPersistentStats
	96,  // 60: SpaceX.API.Device.RadioStats.band:type_name -> SpaceX.API.Device.WifiConfig.Band
	97,  // 61: SpaceX.API.Device.RadioStats.rx_stats:type_name -> SpaceX.API.Device.NetworkInterface.RxStats
	98,  // 62: SpaceX.API.Device.RadioStats.tx_stats:type_name -> SpaceX.API.Device.NetworkInterface.TxStats
	80,  // 63: SpaceX.API.Device.RadioStats.thermal_status:type_name -> SpaceX.API.Device.RadioStats.ThermalStatus
	81,  // 64: SpaceX.API.Device.RadioStats.antenna_status:type_name -> SpaceX.API.Device.RadioStats.AntennaStatus
	99,  // 65: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.id:type_name -> google.protobuf.StringValue
	99,  // 66: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp_date:type_name -> google.protobuf.StringValue
	100, // 67: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp_hour:type_name -> google.protobuf.UInt32Value
	101, // 68: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	100, // 69: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_hw_gen:type_name -> google.protobuf.UInt32Value
	99,  // 70: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_sw:type_name -> google.protobuf.StringValue
	99,  // 71: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_country:type_name -> google.protobuf.StringValue
	102, // 72: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_is_dev:type_name -> google.protobuf.BoolValue
	100, // 73: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_alloc_fds:type_name -> google.protobuf.UInt32Value
	103, // 74: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_cpu_usage:type_name -> google.protobuf.FloatValue
	103, // 75: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_mem_free_kb:type_name -> google.protobuf.FloatValue
	104, // 76: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_bootcount:type_name -> google.protobuf.Int32Value
	102, // 77: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_partitions_equal:type_name -> google.protobuf.BoolValue
	100, // 78: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_uptime_seconds:type_name -> google.protobuf.UInt32Value
	104, // 79: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_anti_rollback_version:type_name -> google.protobuf.Int32Value
	102, // 80: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_is_witl:type_name -> google.protobuf.BoolValue
	102, // 81: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_is_aviation_conformed:type_name -> google.protobuf.BoolValue
	100, // 82: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_ubi_max_ec:type_name -> google.protobuf.UInt32Value
	100, // 83: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_ubi_bad_peb:type_name -> google.protobuf.UInt32Value
	100, // 84: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_board_rev:type_name -> google.protobuf.UInt32Value
	100, // 85: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_channel:type_name -> google.protobuf.UInt32Value
	103, // 86: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	103, // 87: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	103, // 88: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	103, // 89: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna4_rssi:type_name -> google.protobuf.FloatValue
	103, // 90: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna1_tssi:type_name -> google.protobuf.FloatValue
	103, // 91: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna2_tssi:type_name -> google.protobuf.FloatValue
	103, // 92: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna3_tssi:type_name -> google.protobuf.FloatValue
	103, // 93: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna4_tssi:type_name -> google.protobuf.FloatValue
	100, // 94: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_iface_count:type_name -> google.protobuf.UInt32Value
	103, // 95: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	103, // 96: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	103, // 97: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	105, // 98: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 99: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 100: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 101: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_frame_errors:type_name -> google.protobuf.Int64Value
	103, // 102: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 103: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	105, // 104: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 105: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 106: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_errors:type_name -> google.protobuf.Int64Value
	103, // 107: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 108: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	100, // 109: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_channel:type_name -> google.protobuf.UInt32Value
	103, // 110: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	103, // 111: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	103, // 112: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	103, // 113: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna4_rssi:type_name -> google.protobuf.FloatValue
	103, // 114: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna1_tssi:type_name -> google.protobuf.FloatValue
	103, // 115: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna2_tssi:type_name -> google.protobuf.FloatValue
	103, // 116: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna3_tssi:type_name -> google.protobuf.FloatValue
	103, // 117: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna4_tssi:type_name -> google.protobuf.FloatValue
	100, // 118: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_iface_count:type_name -> google.protobuf.UInt32Value
	103, // 119: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	103, // 120: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	103, // 121: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	105, // 122: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 123: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 124: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 125: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_frame_errors:type_name -> google.protobuf.Int64Value
	103, // 126: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 127: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	105, // 128: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 129: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 130: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_errors:type_name -> google.protobuf.Int64Value
	103, // 131: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 132: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	100, // 133: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_channel:type_name -> google.protobuf.UInt32Value
	103, // 134: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna1_rssi:type_name -> google.protobuf.FloatValue
	103, // 135: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna2_rssi:type_name -> google.protobuf.FloatValue
	103, // 136: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna3_rssi:type_name -> google.protobuf.FloatValue
	103, // 137: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna4_rssi:type_name -> google.protobuf.FloatValue
	103, // 138: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna1_tssi:type_name -> google.protobuf.FloatValue
	103, // 139: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna2_tssi:type_name -> google.protobuf.FloatValue
	103, // 140: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna3_tssi:type_name -> google.protobuf.FloatValue
	103, // 141: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_antenna4_tssi:type_name -> google.protobuf.FloatValue
	100, // 142: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_iface_count:type_name -> google.protobuf.UInt32Value
	103, // 143: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	103, // 144: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_edcca_fraction:type_name -> google.protobuf.FloatValue
	103, // 145: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	105, // 146: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 147: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 148: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 149: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_frame_errors:type_name -> google.protobuf.Int64Value
	103, // 150: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 151: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	105, // 152: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 153: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 154: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_tx_errors:type_name -> google.protobuf.Int64Value
	103, // 155: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 156: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	103, // 157: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	103, // 158: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	103, // 159: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_thermal_temp:type_name -> google.protobuf.FloatValue
	103, // 160: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	103, // 161: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	103, // 162: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	100, // 163: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	100, // 164: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	100, // 165: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_high_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	103, // 166: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.board_temp:type_name -> google.protobuf.FloatValue
	103, // 167: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.poe_mcu_die_temp:type_name -> google.protobuf.FloatValue
	105, // 168: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 169: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 170: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 171: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_frame_errors:type_name -> google.protobuf.Int64Value
	105, // 172: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 173: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 174: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_errors:type_name -> google.protobuf.Int64Value
	105, // 175: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 176: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 177: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 178: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_rx_frame_errors:type_name -> google.protobuf.Int64Value
	105, // 179: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 180: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 181: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan1_eth_tx_errors:type_name -> google.protobuf.Int64Value
	105, // 182: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_bytes:type_name -> google.protobuf.Int64Value
	105, // 183: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_packets:type_name -> google.protobuf.Int64Value
	105, // 184: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_errors:type_name -> google.protobuf.Int64Value
	105, // 185: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_frame_errors:type_name -> google.protobuf.Int64Value
	105, // 186: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_bytes:type_name -> google.protobuf.Int64Value
	105, // 187: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_packets:type_name -> google.protobuf.Int64Value
	105, // 188: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_errors:type_name -> google.protobuf.Int64Value
	100, // 189: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients:type_name -> google.protobuf.UInt32Value
	100, // 190: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_2ghz:type_name -> google.protobuf.UInt32Value
	100, // 191: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz:type_name -> google.protobuf.UInt32Value
	100, // 192: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz_high:type_name -> google.protobuf.UInt32Value
	100, // 193: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_eth:type_name -> google.protobuf.UInt32Value
	100, // 194: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz_rx_bandwidth_20mhz:type_name -> google.protobuf.UInt32Value
	100, // 195: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz_rx_bandwidth_40mhz:type_name -> google.protobuf.UInt32Value
	100, // 196: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz_rx_bandwidth_80mhz:type_name -> google.protobuf.UInt32Value
	100, // 197: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater:type_name -> google.protobuf.UInt32Value
	100, // 198: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_2ghz:type_name -> google.protobuf.UInt32Value
	100, // 199: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_5ghz:type_name -> google.protobuf.UInt32Value
	100, // 200: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_5ghz_high:type_name -> google.protobuf.UInt32Value
	100, // 201: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_eth:type_name -> google.protobuf.UInt32Value
	100, // 202: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_hops:type_name -> google.protobuf.UInt32Value
	103, // 203: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_one_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	103, // 204: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_one_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	103, // 205: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_one_hop_rssi_avg_5ghz_high:type_name -> google.protobuf.FloatValue
	103, // 206: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_two_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	103, // 207: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_two_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	103, // 208: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_two_hop_rssi_avg_5ghz_high:type_name -> google.protobuf.FloatValue
	103, // 209: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_tx_rate_mbps_min:type_name -> google.protobuf.FloatValue
	103, // 210: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_rx_rate_mbps_min:type_name -> google.protobuf.FloatValue
	103, // 211: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_tx_rate_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 212: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_rx_rate_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 213: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_seconds_since_2s_outage_min:type_name -> google.protobuf.FloatValue
	103, // 214: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_seconds_since_5s_outage_min:type_name -> google.protobuf.FloatValue
	103, // 215: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_seconds_since_2s_outage_avg:type_name -> google.protobuf.FloatValue
	103, // 216: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_seconds_since_5s_outage_avg:type_name -> google.protobuf.FloatValue
	103, // 217: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_latency_ms_1h_max:type_name -> google.protobuf.FloatValue
	103, // 218: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.repeater_latency_ms_1h_avg:type_name -> google.protobuf.FloatValue
	100, // 219: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_topology_change_count_1d:type_name -> google.protobuf.UInt32Value
	103, // 220: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	103, // 221: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	103, // 222: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	103, // 223: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	103, // 224: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	103, // 225: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_drop_rate:type_name -> google.protobuf.FloatValue
	103, // 226: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	103, // 227: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_latency:type_name -> google.protobuf.FloatValue
	103, // 228: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_latency_last_1h:type_name -> google.protobuf.FloatValue
	103, // 229: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	103, // 230: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	103, // 231: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	103, // 232: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	103, // 233: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	103, // 234: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_drop_rate:type_name -> google.protobuf.FloatValue
	103, // 235: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	103, // 236: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_latency:type_name -> google.protobuf.FloatValue
	103, // 237: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_latency_last_1h:type_name -> google.protobuf.FloatValue
	103, // 238: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 239: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 240: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_rssi:type_name -> google.protobuf.FloatValue
	103, // 241: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_wifi_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 242: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_wifi_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 243: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 244: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 245: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_rssi:type_name -> google.protobuf.FloatValue
	100, // 246: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_iface:type_name -> google.protobuf.UInt32Value
	99,  // 247: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_oui:type_name -> google.protobuf.StringValue
	100, // 248: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_tx_rate:type_name -> google.protobuf.UInt32Value
	100, // 249: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_rx_rate:type_name -> google.protobuf.UInt32Value
	100, // 250: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_platform_type:type_name -> google.protobuf.UInt32Value
	103, // 251: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 252: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_download_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 253: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 254: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 255: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 256: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_download_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 257: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 258: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_max:type_name -> google.protobuf.FloatValue
	100, // 259: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.dish_cell_id:type_name -> google.protobuf.UInt32Value
	102, // 260: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_setup_complete:type_name -> google.protobuf.BoolValue
	102, // 261: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_bands_split:type_name -> google.protobuf.BoolValue
	102, // 262: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_repeater:type_name -> google.protobuf.BoolValue
	102, // 263: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_open_network:type_name -> google.protobuf.BoolValue
	102, // 264: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_aviation:type_name -> google.protobuf.BoolValue
	102, // 265: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_secure_dns:type_name -> google.protobuf.BoolValue
	102, // 266: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_legacy:type_name -> google.protobuf.BoolValue
	102, // 267: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_ap_mode:type_name -> google.protobuf.BoolValue
	102, // 268: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_dfs_enabled:type_name -> google.protobuf.BoolValue
	102, // 269: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_network_name_is_default:type_name -> google.protobuf.BoolValue
	102, // 270: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_remote_ssh_enabled:type_name -> google.protobuf.BoolValue
	102, // 271: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_repeater_wired:type_name -> google.protobuf.BoolValue
	102, // 272: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_repeater_wireless:type_name -> google.protobuf.BoolValue
	100, // 273: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_block_schedules_set:type_name -> google.protobuf.UInt32Value
	102, // 274: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_custom_nameservers:type_name -> google.protobuf.BoolValue
	102, // 275: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_disable_mesh_onboarding:type_name -> google.protobuf.BoolValue
	102, // 276: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_pin_country_code:type_name -> google.protobuf.BoolValue
	102, // 277: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_disable_update_reboot:type_name -> google.protobuf.BoolValue
	102, // 278: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_disable_2ghz:type_name -> google.protobuf.BoolValue
	102, // 279: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_disable_5ghz:type_name -> google.protobuf.BoolValue
	102, // 280: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_disable_5ghz_high:type_name -> google.protobuf.BoolValue
	100, // 281: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_channel_2ghz:type_name -> google.protobuf.UInt32Value
	100, // 282: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_channel_5ghz:type_name -> google.protobuf.UInt32Value
	100, // 283: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_channel_5ghz_high:type_name -> google.protobuf.UInt32Value
	100, // 284: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_networks:type_name -> google.protobuf.UInt32Value
	100, // 285: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_networks_guest:type_name -> google.protobuf.UInt32Value
	100, // 286: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_networks_hidden:type_name -> google.protobuf.UInt32Value
	100, // 287: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_networks_client_isolation:type_name -> google.protobuf.UInt32Value
	100, // 288: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_networks_bands_split:type_name -> google.protobuf.UInt32Value
	105, // 289: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.wan_traffic_control_cake_bytes:type_name -> google.protobuf.Int64Value
	105, // 290: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.wan_traffic_control_cake_packets:type_name -> google.protobuf.Int64Value
	105, // 291: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.wan_traffic_control_cake_drops:type_name -> google.protobuf.Int64Value
	105, // 292: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.wan_traffic_control_cake_ack_drops:type_name -> google.protobuf.Int64Value
	101, // 293: SpaceX.API.Device.starlink_router_alerts.start:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	101, // 294: SpaceX.API.Device.starlink_router_alerts.end:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	101, // 295: SpaceX.API.Device.starlink_router_client_speedtests.data_record:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	99,  // 296: SpaceX.API.Device.starlink_router_client_speedtests.speedtest_id:type_name -> google.protobuf.StringValue
	103, // 297: SpaceX.API.Device.starlink_router_client_speedtests.client_rssi:type_name -> google.protobuf.FloatValue
	103, // 298: SpaceX.API.Device.starlink_router_client_speedtests.router_rssi:type_name -> google.protobuf.FloatValue
	100, // 299: SpaceX.API.Device.starlink_router_client_speedtests.client_iface:type_name -> google.protobuf.UInt32Value
	99,  // 300: SpaceX.API.Device.starlink_router_client_speedtests.client_oui:type_name -> google.protobuf.StringValue
	100, // 301: SpaceX.API.Device.starlink_router_client_speedtests.client_tx_rate:type_name -> google.protobuf.UInt32Value
	100, // 302: SpaceX.API.Device.starlink_router_client_speedtests.client_rx_rate:type_name -> google.protobuf.UInt32Value
	99,  // 303: SpaceX.API.Device.starlink_router_client_speedtests.client_platform_type:type_name -> google.protobuf.StringValue
	99,  // 304: SpaceX.API.Device.starlink_router_client_speedtests.client_app_version:type_name -> google.protobuf.StringValue
	100, // 305: SpaceX.API.Device.starlink_router_client_speedtests.client_app_build:type_name -> google.protobuf.UInt32Value
	100, // 306: SpaceX.API.Device.starlink_router_client_speedtests.client_rx_phy_mode:type_name -> google.protobuf.UInt32Value
	100, // 307: SpaceX.API.Device.starlink_router_client_speedtests.client_rx_spatial_streams:type_name -> google.protobuf.UInt32Value
	100, // 308: SpaceX.API.Device.starlink_router_client_speedtests.client_rx_mcs:type_name -> google.protobuf.UInt32Value
	101, // 309: SpaceX.API.Device.starlink_router_client_speedtests.client_download_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	101, // 310: SpaceX.API.Device.starlink_router_client_speedtests.client_upload_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	103, // 311: SpaceX.API.Device.starlink_router_client_speedtests.client_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 312: SpaceX.API.Device.starlink_router_client_speedtests.client_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	99,  // 313: SpaceX.API.Device.starlink_router_client_speedtests.client_target:type_name -> google.protobuf.StringValue
	100, // 314: SpaceX.API.Device.starlink_router_client_speedtests.client_tcp_streams:type_name -> google.protobuf.UInt32Value
	101, // 315: SpaceX.API.Device.starlink_router_client_speedtests.router_download_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	101, // 316: SpaceX.API.Device.starlink_router_client_speedtests.router_upload_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	103, // 317: SpaceX.API.Device.starlink_router_client_speedtests.router_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 318: SpaceX.API.Device.starlink_router_client_speedtests.router_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	99,  // 319: SpaceX.API.Device.starlink_router_client_speedtests.router_target:type_name -> google.protobuf.StringValue
	100, // 320: SpaceX.API.Device.starlink_router_client_speedtests.router_tcp_streams:type_name -> google.protobuf.UInt32Value
	101, // 321: SpaceX.API.Device.starlink_router_client_speedtests.wifi_download_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	101, // 322: SpaceX.API.Device.starlink_router_client_speedtests.wifi_upload_start_time:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	103, // 323: SpaceX.API.Device.starlink_router_client_speedtests.wifi_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 324: SpaceX.API.Device.starlink_router_client_speedtests.wifi_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	101, // 325: SpaceX.API.Device.StarlinkRouterClients.timestamp:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	99,  // 326: SpaceX.API.Device.StarlinkRouterClients.router_hw:type_name -> google.protobuf.StringValue
	99,  // 327: SpaceX.API.Device.StarlinkRouterClients.router_sw:type_name -> google.protobuf.StringValue
	99,  // 328: SpaceX.API.Device.StarlinkRouterClients.client_router_id:type_name -> google.protobuf.StringValue
	99,  // 329: SpaceX.API.Device.StarlinkRouterClients.client_hw:type_name -> google.protobuf.StringValue
	99,  // 330: SpaceX.API.Device.StarlinkRouterClients.client_sw:type_name -> google.protobuf.StringValue
	99,  // 331: SpaceX.API.Device.StarlinkRouterClients.oui:type_name -> google.protobuf.StringValue
	99,  // 332: SpaceX.API.Device.StarlinkRouterClients.upstream_id:type_name -> google.protobuf.StringValue
	102, // 333: SpaceX.API.Device.StarlinkRouterClients.is_repeater:type_name -> google.protobuf.BoolValue
	100, // 334: SpaceX.API.Device.StarlinkRouterClients.connected_s:type_name -> google.protobuf.UInt32Value
	99,  // 335: SpaceX.API.Device.StarlinkRouterClients.interface:type_name -> google.protobuf.StringValue
	100, // 336: SpaceX.API.Device.StarlinkRouterClients.radio_channel:type_name -> google.protobuf.UInt32Value
	103, // 337: SpaceX.API.Device.StarlinkRouterClients.rssi:type_name -> google.protobuf.FloatValue
	100, // 338: SpaceX.API.Device.StarlinkRouterClients.rx_mcs:type_name -> google.protobuf.UInt32Value
	100, // 339: SpaceX.API.Device.StarlinkRouterClients.tx_mcs:type_name -> google.protobuf.UInt32Value
	100, // 340: SpaceX.API.Device.StarlinkRouterClients.rx_rate:type_name -> google.protobuf.UInt32Value
	100, // 341: SpaceX.API.Device.StarlinkRouterClients.tx_rate:type_name -> google.protobuf.UInt32Value
	100, // 342: SpaceX.API.Device.StarlinkRouterClients.rx_bandwidth:type_name -> google.protobuf.UInt32Value
	100, // 343: SpaceX.API.Device.StarlinkRouterClients.rx_spatial_streams:type_name -> google.protobuf.UInt32Value
	100, // 344: SpaceX.API.Device.StarlinkRouterClients.rx_phy_mode:type_name -> google.protobuf.UInt32Value
	103, // 345: SpaceX.API.Device.StarlinkRouterClients.ping_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	103, // 346: SpaceX.API.Device.StarlinkRouterClients.ping_latency_last_1h:type_name -> google.protobuf.FloatValue
	99,  // 347: SpaceX.API.Device.StarlinkRouterClients.steer_state:type_name -> google.protobuf.StringValue
	100, // 348: SpaceX.API.Device.StarlinkRouterClients.mesh_hops:type_name -> google.protobuf.UInt32Value
	103, // 349: SpaceX.API.Device.StarlinkRouterClients.speedtest_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 350: SpaceX.API.Device.StarlinkRouterClients.speedtest_download_mbps:type_name -> google.protobuf.FloatValue
	102, // 351: SpaceX.API.Device.StarlinkRouterClients.blocked:type_name -> google.protobuf.BoolValue
	106, // 352: SpaceX.API.Device.WifiSetClientGivenNameRequest.client_name:type_name -> SpaceX.API.Device.ClientName
	107, // 353: SpaceX.API.Device.WifiSetClientGivenNameRequest.client_config:type_name -> SpaceX.API.Device.ClientConfig
	17,  // 354: SpaceX.API.Device.WifiSelfTestResponse.self_test:type_name -> SpaceX.API.Device.WifiSelfTest
	99,  // 355: SpaceX.API.Device.starlink_router_hourly_metrics_v2.id:type_name -> google.protobuf.StringValue
	99,  // 356: SpaceX.API.Device.starlink_router_hourly_metrics_v2.timestamp_date:type_name -> google.protobuf.StringValue
	100, // 357: SpaceX.API.Device.starlink_router_hourly_metrics_v2.timestamp_hour:type_name -> google.protobuf.UInt32Value
	100, // 358: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_hw_gen:type_name -> google.protobuf.UInt32Value
	99,  // 359: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_sw:type_name -> google.protobuf.StringValue
	99,  // 360: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_country:type_name -> google.protobuf.StringValue
	102, // 361: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_is_dev:type_name -> google.protobuf.BoolValue
	100, // 362: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_alloc_fds:type_name -> google.protobuf.UInt32Value
	103, // 363: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_cpu_usage:type_name -> google.protobuf.FloatValue
	103, // 364: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_mem_free_kb:type_name -> google.protobuf.FloatValue
	104, // 365: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_bootcount:type_name -> google.protobuf.Int32Value
	102, // 366: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_partitions_equal:type_name -> google.protobuf.BoolValue
	100, // 367: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_uptime_seconds:type_name -> google.protobuf.UInt32Value
	104, // 368: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_anti_rollback_version:type_name -> google.protobuf.Int32Value
	100, // 369: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_channel:type_name -> google.protobuf.UInt32Value
	103, // 370: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	103, // 371: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	103, // 372: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	100, // 373: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_iface_count:type_name -> google.protobuf.UInt32Value
	103, // 374: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	103, // 375: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	103, // 376: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	100, // 377: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 378: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_packets:type_name -> google.protobuf.UInt32Value
	100, // 379: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_errors:type_name -> google.protobuf.UInt32Value
	100, // 380: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	103, // 381: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 382: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	100, // 383: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 384: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_packets:type_name -> google.protobuf.UInt32Value
	100, // 385: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_errors:type_name -> google.protobuf.UInt32Value
	103, // 386: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 387: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	100, // 388: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_channel:type_name -> google.protobuf.UInt32Value
	103, // 389: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	103, // 390: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	103, // 391: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	100, // 392: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_iface_count:type_name -> google.protobuf.UInt32Value
	103, // 393: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	103, // 394: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	103, // 395: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	100, // 396: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 397: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_packets:type_name -> google.protobuf.UInt32Value
	100, // 398: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_errors:type_name -> google.protobuf.UInt32Value
	100, // 399: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	103, // 400: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 401: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	100, // 402: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 403: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_packets:type_name -> google.protobuf.UInt32Value
	100, // 404: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_errors:type_name -> google.protobuf.UInt32Value
	103, // 405: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	103, // 406: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	103, // 407: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	103, // 408: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	103, // 409: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	103, // 410: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	100, // 411: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	100, // 412: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	100, // 413: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 414: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_packets:type_name -> google.protobuf.UInt32Value
	100, // 415: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_errors:type_name -> google.protobuf.UInt32Value
	100, // 416: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	100, // 417: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 418: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_packets:type_name -> google.protobuf.UInt32Value
	100, // 419: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_errors:type_name -> google.protobuf.UInt32Value
	100, // 420: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 421: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_packets:type_name -> google.protobuf.UInt32Value
	100, // 422: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_errors:type_name -> google.protobuf.UInt32Value
	100, // 423: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	100, // 424: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_bytes:type_name -> google.protobuf.UInt32Value
	100, // 425: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_packets:type_name -> google.protobuf.UInt32Value
	100, // 426: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_errors:type_name -> google.protobuf.UInt32Value
	100, // 427: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients:type_name -> google.protobuf.UInt32Value
	100, // 428: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_2ghz:type_name -> google.protobuf.UInt32Value
	100, // 429: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_5ghz:type_name -> google.protobuf.UInt32Value
	100, // 430: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_eth:type_name -> google.protobuf.UInt32Value
	100, // 431: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater:type_name -> google.protobuf.UInt32Value
	100, // 432: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_2ghz:type_name -> google.protobuf.UInt32Value
	100, // 433: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_5ghz:type_name -> google.protobuf.UInt32Value
	100, // 434: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_eth:type_name -> google.protobuf.UInt32Value
	100, // 435: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_hops:type_name -> google.protobuf.UInt32Value
	103, // 436: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_one_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	103, // 437: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_one_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	103, // 438: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_two_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	103, // 439: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_two_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	103, // 440: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	103, // 441: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	103, // 442: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	103, // 443: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	103, // 444: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	103, // 445: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_drop_rate:type_name -> google.protobuf.FloatValue
	103, // 446: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	103, // 447: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_latency:type_name -> google.protobuf.FloatValue
	103, // 448: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	103, // 449: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	103, // 450: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	103, // 451: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	103, // 452: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	103, // 453: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_drop_rate:type_name -> google.protobuf.FloatValue
	103, // 454: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	103, // 455: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_latency:type_name -> google.protobuf.FloatValue
	103, // 456: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 457: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 458: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_rssi:type_name -> google.protobuf.FloatValue
	103, // 459: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_wifi_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 460: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_wifi_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 461: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_download_mbps:type_name -> google.protobuf.FloatValue
	103, // 462: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_upload_mbps:type_name -> google.protobuf.FloatValue
	103, // 463: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_rssi:type_name -> google.protobuf.FloatValue
	100, // 464: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_iface:type_name -> google.protobuf.UInt32Value
	99,  // 465: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_oui:type_name -> google.protobuf.StringValue
	100, // 466: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_tx_rate:type_name -> google.protobuf.UInt32Value
	100, // 467: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_rx_rate:type_name -> google.protobuf.UInt32Value
	100, // 468: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_platform_type:type_name -> google.protobuf.UInt32Value
	103, // 469: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 470: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_download_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 471: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 472: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 473: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_download_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 474: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_download_mbps_max:type_name -> google.protobuf.FloatValue
	103, // 475: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	103, // 476: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_max:type_name -> google.protobuf.FloatValue
	100, // 477: SpaceX.API.Device.starlink_router_hourly_metrics_v2.dish_cell_id:type_name -> google.protobuf.UInt32Value
	102, // 478: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_setup_complete:type_name -> google.protobuf.BoolValue
	102, // 479: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_bands_split:type_name -> google.protobuf.BoolValue
	102, // 480: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_is_repeater:type_name -> google.protobuf.BoolValue
	102, // 481: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_open_network:type_name -> google.protobuf.BoolValue
	102, // 482: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_is_aviation:type_name -> google.protobuf.BoolValue
	102, // 483: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_secure_dns:type_name -> google.protobuf.BoolValue
	102, // 484: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_legacy:type_name -> google.protobuf.BoolValue
	102, // 485: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_ap_mode:type_name -> google.protobuf.BoolValue
	102, // 486: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_dfs_enabled:type_name -> google.protobuf.BoolValue
	102, // 487: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_network_name_is_default:type_name -> google.protobuf.BoolValue
	102, // 488: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_remote_ssh_enabled:type_name -> google.protobuf.BoolValue
	68,  // 489: SpaceX.API.Device.WifiFactoryTestCommandRequest.iwpriv_command:type_name -> SpaceX.API.Device.IwprivCommand
	69,  // 490: SpaceX.API.Device.WifiFactoryTestCommandRequest.ip_link_set_command:type_name -> SpaceX.API.Device.IpLinkSetCommand
	70,  // 491: SpaceX.API.Device.WifiFactoryTestCommandRequest.ip_addr_set_command:type_name -> SpaceX.API.Device.IpAddrSetCommand
	4,   // 492: SpaceX.API.Device.IwprivCommand.ioctl:type_name -> SpaceX.API.Device.IwprivCommand.Ioctl
	6,   // 493: SpaceX.API.Device.Mesh.MeshStream:input_type -> SpaceX.API.Device.ToController
	14,  // 494: SpaceX.API.Device.Mesh.MeshStream:output_type -> SpaceX.API.Device.FromController
	494, // [494:495] is the sub-list for method output_type
	493, // [493:494] is the sub-list for method input_type
	493, // [493:493] is the sub-list for extension type_name
	493, // [493:493] is the sub-list for extension extendee
	0,   // [0:493] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_proto_init() }
func file_spacex_api_device_wifi_proto_init() {
	if File_spacex_api_device_wifi_proto != nil {
		return
	}
	file_spacex_api_device_common_proto_init()
	file_spacex_api_device_wifi_config_proto_init()
	file_spacex_api_device_wifi_util_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiMeshJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiMeshStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpeedtestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpeedtest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSiteSurveyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGlobalMeshStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackhaulRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteerClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiBtmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSelfTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshDeviceTrustRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshDeviceTrustResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetAviationConformedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNewClientConnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiBandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAccountBondingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNewPeerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPingMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPingMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiPersistentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPersistentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRoutersHourlyMetricsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterClientSpeedtests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetClientGivenNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSelfTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSelfTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiRfTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiRfTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetFirewallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetFirewallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiTogglePoeNegotiationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiCalibrationModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterHourlyMetricsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGuestInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGuestInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiFactoryTestCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiFactoryTestCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IwprivCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpLinkSetCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddrSetCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiStartLocalTelemProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteerClientRequest_SteerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiBtmRequest_NeighborReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSelfTest_TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_RxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_TxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_PingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_FqcodelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiPersistentStats_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStats_ThermalStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioStats_AntennaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_wifi_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ToController_Clients)(nil),
		(*ToController_MeshJoin)(nil),
		(*ToController_Status)(nil),
		(*ToController_Speedtest)(nil),
	}
	file_spacex_api_device_wifi_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FromController_WifiConfig)(nil),
		(*FromController_SteerClientRequest)(nil),
		(*FromController_Status)(nil),
		(*FromController_BackhaulRequest)(nil),
		(*FromController_StartSpeedtest)(nil),
		(*FromController_WifiBtmRequest)(nil),
	}
	file_spacex_api_device_wifi_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*WifiFactoryTestCommandRequest_IwprivCommand)(nil),
		(*WifiFactoryTestCommandRequest_IpLinkSetCommand)(nil),
		(*WifiFactoryTestCommandRequest_IpAddrSetCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacex_api_device_wifi_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_proto = out.File
	file_spacex_api_device_wifi_proto_rawDesc = nil
	file_spacex_api_device_wifi_proto_goTypes = nil
	file_spacex_api_device_wifi_proto_depIdxs = nil
}
